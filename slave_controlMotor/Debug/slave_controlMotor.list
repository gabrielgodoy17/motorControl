
slave_controlMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007910  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08007a20  08007a20  00017a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d50  08007d50  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  08007d50  08007d50  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d50  08007d50  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08007d58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000238  08007f8c  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08007f8c  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca39  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca1  00000000  00000000  0002cc96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002f608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d86  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c22  00000000  00000000  00048f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c4e4  00000000  00000000  00052b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  000df0f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a08 	.word	0x08007a08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08007a08 	.word	0x08007a08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <interpreteComando>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interpreteComando() {
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

	double consigna;

	switch (buffer[0]) {
 8000b42:	4bb2      	ldr	r3, [pc, #712]	; (8000e0c <interpreteComando+0x2d0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	3b44      	subs	r3, #68	; 0x44
 8000b48:	2b33      	cmp	r3, #51	; 0x33
 8000b4a:	f200 8210 	bhi.w	8000f6e <interpreteComando+0x432>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <interpreteComando+0x18>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000eff 	.word	0x08000eff
 8000b58:	08000f6f 	.word	0x08000f6f
 8000b5c:	08000f6f 	.word	0x08000f6f
 8000b60:	08000f6f 	.word	0x08000f6f
 8000b64:	08000f6f 	.word	0x08000f6f
 8000b68:	08000e8f 	.word	0x08000e8f
 8000b6c:	08000f6f 	.word	0x08000f6f
 8000b70:	08000f6f 	.word	0x08000f6f
 8000b74:	08000f6f 	.word	0x08000f6f
 8000b78:	08000f6f 	.word	0x08000f6f
 8000b7c:	08000f6f 	.word	0x08000f6f
 8000b80:	08000f6f 	.word	0x08000f6f
 8000b84:	08000dfd 	.word	0x08000dfd
 8000b88:	08000f6f 	.word	0x08000f6f
 8000b8c:	08000f6f 	.word	0x08000f6f
 8000b90:	08000f6f 	.word	0x08000f6f
 8000b94:	08000f6f 	.word	0x08000f6f
 8000b98:	08000f6f 	.word	0x08000f6f
 8000b9c:	08000f6f 	.word	0x08000f6f
 8000ba0:	08000c25 	.word	0x08000c25
 8000ba4:	08000f6f 	.word	0x08000f6f
 8000ba8:	08000f6f 	.word	0x08000f6f
 8000bac:	08000f6f 	.word	0x08000f6f
 8000bb0:	08000f6f 	.word	0x08000f6f
 8000bb4:	08000f6f 	.word	0x08000f6f
 8000bb8:	08000f6f 	.word	0x08000f6f
 8000bbc:	08000f6f 	.word	0x08000f6f
 8000bc0:	08000f6f 	.word	0x08000f6f
 8000bc4:	08000f6f 	.word	0x08000f6f
 8000bc8:	08000f6f 	.word	0x08000f6f
 8000bcc:	08000f6f 	.word	0x08000f6f
 8000bd0:	08000f6f 	.word	0x08000f6f
 8000bd4:	08000eff 	.word	0x08000eff
 8000bd8:	08000f6f 	.word	0x08000f6f
 8000bdc:	08000f6f 	.word	0x08000f6f
 8000be0:	08000f6f 	.word	0x08000f6f
 8000be4:	08000f6f 	.word	0x08000f6f
 8000be8:	08000e8f 	.word	0x08000e8f
 8000bec:	08000f6f 	.word	0x08000f6f
 8000bf0:	08000f6f 	.word	0x08000f6f
 8000bf4:	08000f6f 	.word	0x08000f6f
 8000bf8:	08000f6f 	.word	0x08000f6f
 8000bfc:	08000f6f 	.word	0x08000f6f
 8000c00:	08000f6f 	.word	0x08000f6f
 8000c04:	08000dfd 	.word	0x08000dfd
 8000c08:	08000f6f 	.word	0x08000f6f
 8000c0c:	08000f6f 	.word	0x08000f6f
 8000c10:	08000f6f 	.word	0x08000f6f
 8000c14:	08000f6f 	.word	0x08000f6f
 8000c18:	08000f6f 	.word	0x08000f6f
 8000c1c:	08000f6f 	.word	0x08000f6f
 8000c20:	08000c25 	.word	0x08000c25
		case 'W':
		case 'w':
			switch (buffer[1]) {
 8000c24:	4b79      	ldr	r3, [pc, #484]	; (8000e0c <interpreteComando+0x2d0>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	2b31      	cmp	r3, #49	; 0x31
 8000c2a:	d002      	beq.n	8000c32 <interpreteComando+0xf6>
 8000c2c:	2b32      	cmp	r3, #50	; 0x32
 8000c2e:	d06b      	beq.n	8000d08 <interpreteComando+0x1cc>
					}
				}
				break;
				/*codigo ascii simbolo '?' = 63 */
			}
			break;
 8000c30:	e19d      	b.n	8000f6e <interpreteComando+0x432>
				if (buffer[2]) {
 8000c32:	4b76      	ldr	r3, [pc, #472]	; (8000e0c <interpreteComando+0x2d0>)
 8000c34:	789b      	ldrb	r3, [r3, #2]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 80dc 	beq.w	8000df4 <interpreteComando+0x2b8>
					if (buffer[2] == 43) {
 8000c3c:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <interpreteComando+0x2d0>)
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	2b2b      	cmp	r3, #43	; 0x2b
 8000c42:	d123      	bne.n	8000c8c <interpreteComando+0x150>
						stop1 = 0;
 8000c44:	4b72      	ldr	r3, [pc, #456]	; (8000e10 <interpreteComando+0x2d4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
						if (buffer[3]) {
 8000c4a:	4b70      	ldr	r3, [pc, #448]	; (8000e0c <interpreteComando+0x2d0>)
 8000c4c:	78db      	ldrb	r3, [r3, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 80d0 	beq.w	8000df4 <interpreteComando+0x2b8>
							consigna = atof(&buffer[3]);
 8000c54:	486f      	ldr	r0, [pc, #444]	; (8000e14 <interpreteComando+0x2d8>)
 8000c56:	f004 fc92 	bl	800557e <atof>
 8000c5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
							if (consigna < 35) {
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	4b6d      	ldr	r3, [pc, #436]	; (8000e18 <interpreteComando+0x2dc>)
 8000c64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c68:	f7ff fea8 	bl	80009bc <__aeabi_dcmplt>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <interpreteComando+0x142>
								velocidad_consigna = consigna;
 8000c72:	4a6a      	ldr	r2, [pc, #424]	; (8000e1c <interpreteComando+0x2e0>)
 8000c74:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000c78:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000c7c:	e0ba      	b.n	8000df4 <interpreteComando+0x2b8>
								velocidad_consigna = 35;
 8000c7e:	4a67      	ldr	r2, [pc, #412]	; (8000e1c <interpreteComando+0x2e0>)
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	4c64      	ldr	r4, [pc, #400]	; (8000e18 <interpreteComando+0x2dc>)
 8000c86:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000c8a:	e0b3      	b.n	8000df4 <interpreteComando+0x2b8>
					} else if (buffer[2] == 45) {
 8000c8c:	4b5f      	ldr	r3, [pc, #380]	; (8000e0c <interpreteComando+0x2d0>)
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b2d      	cmp	r3, #45	; 0x2d
 8000c92:	d129      	bne.n	8000ce8 <interpreteComando+0x1ac>
						stop1 = 0;
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <interpreteComando+0x2d4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
						if (buffer[3]) {
 8000c9a:	4b5c      	ldr	r3, [pc, #368]	; (8000e0c <interpreteComando+0x2d0>)
 8000c9c:	78db      	ldrb	r3, [r3, #3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80a8 	beq.w	8000df4 <interpreteComando+0x2b8>
							consigna = atof(&buffer[3]);
 8000ca4:	485b      	ldr	r0, [pc, #364]	; (8000e14 <interpreteComando+0x2d8>)
 8000ca6:	f004 fc6a 	bl	800557e <atof>
 8000caa:	e9c7 0102 	strd	r0, r1, [r7, #8]
							if (consigna < 35) {
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	4b59      	ldr	r3, [pc, #356]	; (8000e18 <interpreteComando+0x2dc>)
 8000cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cb8:	f7ff fe80 	bl	80009bc <__aeabi_dcmplt>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <interpreteComando+0x19e>
								velocidad_consigna = -consigna;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <interpreteComando+0x2e0>)
 8000cd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000cd4:	e9c3 1200 	strd	r1, r2, [r3]
				break;
 8000cd8:	e08c      	b.n	8000df4 <interpreteComando+0x2b8>
								velocidad_consigna = -35;
 8000cda:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <interpreteComando+0x2e0>)
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	4c4f      	ldr	r4, [pc, #316]	; (8000e20 <interpreteComando+0x2e4>)
 8000ce2:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000ce6:	e085      	b.n	8000df4 <interpreteComando+0x2b8>
					} else if (buffer[2] == 48) {
 8000ce8:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <interpreteComando+0x2d0>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	2b30      	cmp	r3, #48	; 0x30
 8000cee:	f040 8081 	bne.w	8000df4 <interpreteComando+0x2b8>
						velocidad_consigna = 0;
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <interpreteComando+0x2e0>)
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	f04f 0400 	mov.w	r4, #0
 8000cfc:	e9c2 3400 	strd	r3, r4, [r2]
						stop1 = 1;
 8000d00:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <interpreteComando+0x2d4>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
				break;
 8000d06:	e075      	b.n	8000df4 <interpreteComando+0x2b8>
				if (buffer[2]) {
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <interpreteComando+0x2d0>)
 8000d0a:	789b      	ldrb	r3, [r3, #2]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d073      	beq.n	8000df8 <interpreteComando+0x2bc>
					if (buffer[2] == 43) {
 8000d10:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <interpreteComando+0x2d0>)
 8000d12:	789b      	ldrb	r3, [r3, #2]
 8000d14:	2b2b      	cmp	r3, #43	; 0x2b
 8000d16:	d122      	bne.n	8000d5e <interpreteComando+0x222>
						stop2 = 0;
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <interpreteComando+0x2e8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
						if (buffer[3]) {
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <interpreteComando+0x2d0>)
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d068      	beq.n	8000df8 <interpreteComando+0x2bc>
							consigna = atof(&buffer[3]);
 8000d26:	483b      	ldr	r0, [pc, #236]	; (8000e14 <interpreteComando+0x2d8>)
 8000d28:	f004 fc29 	bl	800557e <atof>
 8000d2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
							if (consigna < 35) {
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <interpreteComando+0x2dc>)
 8000d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d3a:	f7ff fe3f 	bl	80009bc <__aeabi_dcmplt>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <interpreteComando+0x214>
								velocidad_consigna2 = consigna;
 8000d44:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <interpreteComando+0x2ec>)
 8000d46:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000d4a:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000d4e:	e053      	b.n	8000df8 <interpreteComando+0x2bc>
								velocidad_consigna2 = 35;
 8000d50:	4a35      	ldr	r2, [pc, #212]	; (8000e28 <interpreteComando+0x2ec>)
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	4c30      	ldr	r4, [pc, #192]	; (8000e18 <interpreteComando+0x2dc>)
 8000d58:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000d5c:	e04c      	b.n	8000df8 <interpreteComando+0x2bc>
					} else if (buffer[2] == 45) {
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <interpreteComando+0x2d0>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	2b2d      	cmp	r3, #45	; 0x2d
 8000d64:	d137      	bne.n	8000dd6 <interpreteComando+0x29a>
						stop2 = 0;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <interpreteComando+0x2e8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
						if (buffer[3]) {
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <interpreteComando+0x2d0>)
 8000d6e:	78db      	ldrb	r3, [r3, #3]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d041      	beq.n	8000df8 <interpreteComando+0x2bc>
							consigna = atof(&buffer[3]);
 8000d74:	4827      	ldr	r0, [pc, #156]	; (8000e14 <interpreteComando+0x2d8>)
 8000d76:	f004 fc02 	bl	800557e <atof>
 8000d7a:	e9c7 0102 	strd	r0, r1, [r7, #8]
							if (consigna == 0) {
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d8a:	f7ff fe0d 	bl	80009a8 <__aeabi_dcmpeq>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d007      	beq.n	8000da4 <interpreteComando+0x268>
								velocidad_consigna2 = 0;
 8000d94:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <interpreteComando+0x2ec>)
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	f04f 0400 	mov.w	r4, #0
 8000d9e:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000da2:	e029      	b.n	8000df8 <interpreteComando+0x2bc>
							} else if (consigna < 35) {
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <interpreteComando+0x2dc>)
 8000daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dae:	f7ff fe05 	bl	80009bc <__aeabi_dcmplt>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d007      	beq.n	8000dc8 <interpreteComando+0x28c>
								velocidad_consigna2 = -consigna;
 8000db8:	68bc      	ldr	r4, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <interpreteComando+0x2ec>)
 8000dc2:	e9c3 4500 	strd	r4, r5, [r3]
				break;
 8000dc6:	e017      	b.n	8000df8 <interpreteComando+0x2bc>
								velocidad_consigna2 = -35;
 8000dc8:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <interpreteComando+0x2ec>)
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	4c14      	ldr	r4, [pc, #80]	; (8000e20 <interpreteComando+0x2e4>)
 8000dd0:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8000dd4:	e010      	b.n	8000df8 <interpreteComando+0x2bc>
					} else if (buffer[2] == 48) {
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <interpreteComando+0x2d0>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b30      	cmp	r3, #48	; 0x30
 8000ddc:	d10c      	bne.n	8000df8 <interpreteComando+0x2bc>
						velocidad_consigna2 = 0;
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <interpreteComando+0x2ec>)
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	f04f 0400 	mov.w	r4, #0
 8000de8:	e9c2 3400 	strd	r3, r4, [r2]
						stop2 = 1;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <interpreteComando+0x2e8>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
				break;
 8000df2:	e001      	b.n	8000df8 <interpreteComando+0x2bc>
				break;
 8000df4:	bf00      	nop
 8000df6:	e0ba      	b.n	8000f6e <interpreteComando+0x432>
				break;
 8000df8:	bf00      	nop
			break;
 8000dfa:	e0b8      	b.n	8000f6e <interpreteComando+0x432>
		case 'p':
		case 'P':
			switch (buffer[1]) {
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <interpreteComando+0x2d0>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b31      	cmp	r3, #49	; 0x31
 8000e02:	d013      	beq.n	8000e2c <interpreteComando+0x2f0>
 8000e04:	2b32      	cmp	r3, #50	; 0x32
 8000e06:	d027      	beq.n	8000e58 <interpreteComando+0x31c>
 8000e08:	e03c      	b.n	8000e84 <interpreteComando+0x348>
 8000e0a:	bf00      	nop
 8000e0c:	20000414 	.word	0x20000414
 8000e10:	20000050 	.word	0x20000050
 8000e14:	20000417 	.word	0x20000417
 8000e18:	40418000 	.word	0x40418000
 8000e1c:	200002b0 	.word	0x200002b0
 8000e20:	c0418000 	.word	0xc0418000
 8000e24:	20000054 	.word	0x20000054
 8000e28:	200002b8 	.word	0x200002b8
			/*codigo ascii de '1' = 49*/
			case 49:
				consigna = atof(&buffer[2]);
 8000e2c:	4852      	ldr	r0, [pc, #328]	; (8000f78 <interpreteComando+0x43c>)
 8000e2e:	f004 fba6 	bl	800557e <atof>
 8000e32:	e9c7 0102 	strd	r0, r1, [r7, #8]
				KP1 = (float) consigna;
 8000e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e3a:	f7ff fe2f 	bl	8000a9c <__aeabi_d2f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff faf1 	bl	8000428 <__aeabi_f2d>
 8000e46:	4603      	mov	r3, r0
 8000e48:	460c      	mov	r4, r1
 8000e4a:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <interpreteComando+0x440>)
 8000e4c:	e9c2 3400 	strd	r3, r4, [r2]
				printf("\r\n");
 8000e50:	484b      	ldr	r0, [pc, #300]	; (8000f80 <interpreteComando+0x444>)
 8000e52:	f004 fc25 	bl	80056a0 <puts>
				break;
 8000e56:	e019      	b.n	8000e8c <interpreteComando+0x350>
				/*codigo ascii de '2' = 50*/
			case 50:
				consigna = atof(&buffer[2]);
 8000e58:	4847      	ldr	r0, [pc, #284]	; (8000f78 <interpreteComando+0x43c>)
 8000e5a:	f004 fb90 	bl	800557e <atof>
 8000e5e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				KP2 = (float) consigna;
 8000e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e66:	f7ff fe19 	bl	8000a9c <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fadb 	bl	8000428 <__aeabi_f2d>
 8000e72:	4603      	mov	r3, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	4a43      	ldr	r2, [pc, #268]	; (8000f84 <interpreteComando+0x448>)
 8000e78:	e9c2 3400 	strd	r3, r4, [r2]
				printf("\r\n");
 8000e7c:	4840      	ldr	r0, [pc, #256]	; (8000f80 <interpreteComando+0x444>)
 8000e7e:	f004 fc0f 	bl	80056a0 <puts>
				break;
 8000e82:	e003      	b.n	8000e8c <interpreteComando+0x350>
			default:
				printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000e84:	4840      	ldr	r0, [pc, #256]	; (8000f88 <interpreteComando+0x44c>)
 8000e86:	f004 fc0b 	bl	80056a0 <puts>
				break;
 8000e8a:	bf00      	nop

			}
			break;
 8000e8c:	e06f      	b.n	8000f6e <interpreteComando+0x432>
		case 'i':
		case 'I':
			switch (buffer[1]) {
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <interpreteComando+0x450>)
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	2b31      	cmp	r3, #49	; 0x31
 8000e94:	d002      	beq.n	8000e9c <interpreteComando+0x360>
 8000e96:	2b32      	cmp	r3, #50	; 0x32
 8000e98:	d016      	beq.n	8000ec8 <interpreteComando+0x38c>
 8000e9a:	e02b      	b.n	8000ef4 <interpreteComando+0x3b8>
			/*codigo ascii de '1' = 49*/
			case 49:
				consigna = atof(&buffer[2]);
 8000e9c:	4836      	ldr	r0, [pc, #216]	; (8000f78 <interpreteComando+0x43c>)
 8000e9e:	f004 fb6e 	bl	800557e <atof>
 8000ea2:	e9c7 0102 	strd	r0, r1, [r7, #8]
				KI1 = (float) consigna;
 8000ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eaa:	f7ff fdf7 	bl	8000a9c <__aeabi_d2f>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fab9 	bl	8000428 <__aeabi_f2d>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460c      	mov	r4, r1
 8000eba:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <interpreteComando+0x454>)
 8000ebc:	e9c2 3400 	strd	r3, r4, [r2]
				printf("\r\n");
 8000ec0:	482f      	ldr	r0, [pc, #188]	; (8000f80 <interpreteComando+0x444>)
 8000ec2:	f004 fbed 	bl	80056a0 <puts>
				break;
 8000ec6:	e019      	b.n	8000efc <interpreteComando+0x3c0>
				/*codigo ascii de '2' = 50*/
			case 50:
				consigna = atof(&buffer[2]);
 8000ec8:	482b      	ldr	r0, [pc, #172]	; (8000f78 <interpreteComando+0x43c>)
 8000eca:	f004 fb58 	bl	800557e <atof>
 8000ece:	e9c7 0102 	strd	r0, r1, [r7, #8]
				KI2 = (float) consigna;
 8000ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ed6:	f7ff fde1 	bl	8000a9c <__aeabi_d2f>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff faa3 	bl	8000428 <__aeabi_f2d>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <interpreteComando+0x458>)
 8000ee8:	e9c2 3400 	strd	r3, r4, [r2]
				printf("\r\n");
 8000eec:	4824      	ldr	r0, [pc, #144]	; (8000f80 <interpreteComando+0x444>)
 8000eee:	f004 fbd7 	bl	80056a0 <puts>
				break;
 8000ef2:	e003      	b.n	8000efc <interpreteComando+0x3c0>
			default:
				printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000ef4:	4824      	ldr	r0, [pc, #144]	; (8000f88 <interpreteComando+0x44c>)
 8000ef6:	f004 fbd3 	bl	80056a0 <puts>
				break;
 8000efa:	bf00      	nop
			}
			break;
 8000efc:	e037      	b.n	8000f6e <interpreteComando+0x432>
		case 'd':
		case 'D':
			switch (buffer[1]) {
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <interpreteComando+0x450>)
 8000f00:	785b      	ldrb	r3, [r3, #1]
 8000f02:	2b31      	cmp	r3, #49	; 0x31
 8000f04:	d002      	beq.n	8000f0c <interpreteComando+0x3d0>
 8000f06:	2b32      	cmp	r3, #50	; 0x32
 8000f08:	d016      	beq.n	8000f38 <interpreteComando+0x3fc>
 8000f0a:	e02b      	b.n	8000f64 <interpreteComando+0x428>
			/*codigo ascii de '1' = 49*/
			case 49:
				consigna = atof(&buffer[2]);
 8000f0c:	481a      	ldr	r0, [pc, #104]	; (8000f78 <interpreteComando+0x43c>)
 8000f0e:	f004 fb36 	bl	800557e <atof>
 8000f12:	e9c7 0102 	strd	r0, r1, [r7, #8]
				KD1 = (float) consigna;
 8000f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f1a:	f7ff fdbf 	bl	8000a9c <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fa81 	bl	8000428 <__aeabi_f2d>
 8000f26:	4603      	mov	r3, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <interpreteComando+0x45c>)
 8000f2c:	e9c2 3400 	strd	r3, r4, [r2]
				printf("\r\n");
 8000f30:	4813      	ldr	r0, [pc, #76]	; (8000f80 <interpreteComando+0x444>)
 8000f32:	f004 fbb5 	bl	80056a0 <puts>
				break;
 8000f36:	e019      	b.n	8000f6c <interpreteComando+0x430>
				/*codigo ascii de '2' = 50*/
			case 50:
				consigna = atof(&buffer[2]);
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <interpreteComando+0x43c>)
 8000f3a:	f004 fb20 	bl	800557e <atof>
 8000f3e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				KD2 = (float) consigna;
 8000f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f46:	f7ff fda9 	bl	8000a9c <__aeabi_d2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fa6b 	bl	8000428 <__aeabi_f2d>
 8000f52:	4603      	mov	r3, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <interpreteComando+0x460>)
 8000f58:	e9c2 3400 	strd	r3, r4, [r2]
				printf("\r\n");
 8000f5c:	4808      	ldr	r0, [pc, #32]	; (8000f80 <interpreteComando+0x444>)
 8000f5e:	f004 fb9f 	bl	80056a0 <puts>
				break;
 8000f62:	e003      	b.n	8000f6c <interpreteComando+0x430>
			default:
				printf("\r\n Por favor indicar el valor correcto ( 1 ó 2 )\r\n");
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <interpreteComando+0x44c>)
 8000f66:	f004 fb9b 	bl	80056a0 <puts>
				break;
 8000f6a:	bf00      	nop
			}
			break;
 8000f6c:	bf00      	nop
	}

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bdb0      	pop	{r4, r5, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000416 	.word	0x20000416
 8000f7c:	20000018 	.word	0x20000018
 8000f80:	08007a20 	.word	0x08007a20
 8000f84:	20000030 	.word	0x20000030
 8000f88:	08007a24 	.word	0x08007a24
 8000f8c:	20000414 	.word	0x20000414
 8000f90:	20000020 	.word	0x20000020
 8000f94:	20000038 	.word	0x20000038
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	20000040 	.word	0x20000040

08000fa0 <generateSpeedResponse>:

void generateSpeedResponse(double vel1, double vel2) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8000faa:	e9c7 2302 	strd	r2, r3, [r7, #8]


  	if (vel1 < 0) {
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fba:	f7ff fcff 	bl	80009bc <__aeabi_dcmplt>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <generateSpeedResponse+0x2c>
		s1 = '-';
 8000fc4:	4b54      	ldr	r3, [pc, #336]	; (8001118 <generateSpeedResponse+0x178>)
 8000fc6:	222d      	movs	r2, #45	; 0x2d
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e002      	b.n	8000fd2 <generateSpeedResponse+0x32>
	} else {
		s1 = '+';
 8000fcc:	4b52      	ldr	r3, [pc, #328]	; (8001118 <generateSpeedResponse+0x178>)
 8000fce:	222b      	movs	r2, #43	; 0x2b
 8000fd0:	701a      	strb	r2, [r3, #0]
	}

	if (vel2 < 0) {
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fde:	f7ff fced 	bl	80009bc <__aeabi_dcmplt>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <generateSpeedResponse+0x50>
		s2 = '-';
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	; (800111c <generateSpeedResponse+0x17c>)
 8000fea:	222d      	movs	r2, #45	; 0x2d
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e002      	b.n	8000ff6 <generateSpeedResponse+0x56>
	} else {
		s2 = '+';
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <generateSpeedResponse+0x17c>)
 8000ff2:	222b      	movs	r2, #43	; 0x2b
 8000ff4:	701a      	strb	r2, [r3, #0]
	}

	v1 = (int) fabs(vel1);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001006:	f7ff fd01 	bl	8000a0c <__aeabi_d2iz>
 800100a:	4602      	mov	r2, r0
 800100c:	4b44      	ldr	r3, [pc, #272]	; (8001120 <generateSpeedResponse+0x180>)
 800100e:	601a      	str	r2, [r3, #0]
	v2 = (int) fabs(vel2);
 8001010:	68bc      	ldr	r4, [r7, #8]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff fcf6 	bl	8000a0c <__aeabi_d2iz>
 8001020:	4602      	mov	r2, r0
 8001022:	4b40      	ldr	r3, [pc, #256]	; (8001124 <generateSpeedResponse+0x184>)
 8001024:	601a      	str	r2, [r3, #0]

	if (v1 < 10) {
 8001026:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <generateSpeedResponse+0x180>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b09      	cmp	r3, #9
 800102c:	dc0a      	bgt.n	8001044 <generateSpeedResponse+0xa4>
		v1_1 = '0';
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <generateSpeedResponse+0x188>)
 8001030:	2230      	movs	r2, #48	; 0x30
 8001032:	701a      	strb	r2, [r3, #0]
		v1_2 = v1 + '0';
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <generateSpeedResponse+0x180>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3330      	adds	r3, #48	; 0x30
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <generateSpeedResponse+0x18c>)
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e01e      	b.n	8001082 <generateSpeedResponse+0xe2>
	} else {
		v1_1 = (v1 / 10) + '0';
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <generateSpeedResponse+0x180>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a39      	ldr	r2, [pc, #228]	; (8001130 <generateSpeedResponse+0x190>)
 800104a:	fb82 1203 	smull	r1, r2, r2, r3
 800104e:	1092      	asrs	r2, r2, #2
 8001050:	17db      	asrs	r3, r3, #31
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	3330      	adds	r3, #48	; 0x30
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <generateSpeedResponse+0x188>)
 800105c:	701a      	strb	r2, [r3, #0]
		v1_2 = (v1 % 10) + '0';
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <generateSpeedResponse+0x180>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <generateSpeedResponse+0x190>)
 8001064:	fb83 1302 	smull	r1, r3, r3, r2
 8001068:	1099      	asrs	r1, r3, #2
 800106a:	17d3      	asrs	r3, r2, #31
 800106c:	1ac9      	subs	r1, r1, r3
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	1ad1      	subs	r1, r2, r3
 8001078:	b2cb      	uxtb	r3, r1
 800107a:	3330      	adds	r3, #48	; 0x30
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <generateSpeedResponse+0x18c>)
 8001080:	701a      	strb	r2, [r3, #0]
	}

	if (v2 < 10) {
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <generateSpeedResponse+0x184>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b09      	cmp	r3, #9
 8001088:	dc0a      	bgt.n	80010a0 <generateSpeedResponse+0x100>
		v2_1 = '0';
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <generateSpeedResponse+0x194>)
 800108c:	2230      	movs	r2, #48	; 0x30
 800108e:	701a      	strb	r2, [r3, #0]
		v2_2 = v2 + '0';
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <generateSpeedResponse+0x184>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3330      	adds	r3, #48	; 0x30
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <generateSpeedResponse+0x198>)
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e01e      	b.n	80010de <generateSpeedResponse+0x13e>
	} else {
		v2_1 = (v2 / 10) + '0';
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <generateSpeedResponse+0x184>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <generateSpeedResponse+0x190>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1092      	asrs	r2, r2, #2
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <generateSpeedResponse+0x194>)
 80010b8:	701a      	strb	r2, [r3, #0]
		v2_2 = (v2 % 10) + '0';
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <generateSpeedResponse+0x184>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <generateSpeedResponse+0x190>)
 80010c0:	fb83 1302 	smull	r1, r3, r3, r2
 80010c4:	1099      	asrs	r1, r3, #2
 80010c6:	17d3      	asrs	r3, r2, #31
 80010c8:	1ac9      	subs	r1, r1, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	1ad1      	subs	r1, r2, r3
 80010d4:	b2cb      	uxtb	r3, r1
 80010d6:	3330      	adds	r3, #48	; 0x30
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <generateSpeedResponse+0x198>)
 80010dc:	701a      	strb	r2, [r3, #0]
	}

	out_buffer[3] = s1;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <generateSpeedResponse+0x178>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <generateSpeedResponse+0x19c>)
 80010e4:	70da      	strb	r2, [r3, #3]
	out_buffer[4] = v1_1;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <generateSpeedResponse+0x188>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <generateSpeedResponse+0x19c>)
 80010ec:	711a      	strb	r2, [r3, #4]
	out_buffer[5] = v1_2;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <generateSpeedResponse+0x18c>)
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <generateSpeedResponse+0x19c>)
 80010f4:	715a      	strb	r2, [r3, #5]
	out_buffer[10] = s2;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <generateSpeedResponse+0x17c>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <generateSpeedResponse+0x19c>)
 80010fc:	729a      	strb	r2, [r3, #10]
	out_buffer[11] = v2_1;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <generateSpeedResponse+0x194>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <generateSpeedResponse+0x19c>)
 8001104:	72da      	strb	r2, [r3, #11]
	out_buffer[12] = v2_2;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <generateSpeedResponse+0x198>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <generateSpeedResponse+0x19c>)
 800110c:	731a      	strb	r2, [r3, #12]

}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bdb0      	pop	{r4, r5, r7, pc}
 8001116:	bf00      	nop
 8001118:	20000410 	.word	0x20000410
 800111c:	2000048c 	.word	0x2000048c
 8001120:	200003b4 	.word	0x200003b4
 8001124:	2000043c 	.word	0x2000043c
 8001128:	200004d8 	.word	0x200004d8
 800112c:	20000411 	.word	0x20000411
 8001130:	66666667 	.word	0x66666667
 8001134:	200004d9 	.word	0x200004d9
 8001138:	200003c7 	.word	0x200003c7
 800113c:	20000000 	.word	0x20000000

08001140 <directionConsistencyChecker>:

int directionConsistencyChecker(double speed_set_point, int motor) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	if(motor == 1) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d14b      	bne.n	80011ea <directionConsistencyChecker+0xaa>
		if(speed_set_point > 0) {
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800115e:	f7ff fc4b 	bl	80009f8 <__aeabi_dcmpgt>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d011      	beq.n	800118c <directionConsistencyChecker+0x4c>
			return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8001168:	2108      	movs	r1, #8
 800116a:	484d      	ldr	r0, [pc, #308]	; (80012a0 <directionConsistencyChecker+0x160>)
 800116c:	f001 fed0 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <directionConsistencyChecker+0x48>
 8001176:	2110      	movs	r1, #16
 8001178:	4849      	ldr	r0, [pc, #292]	; (80012a0 <directionConsistencyChecker+0x160>)
 800117a:	f001 fec9 	bl	8002f10 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <directionConsistencyChecker+0x48>
 8001184:	2301      	movs	r3, #1
 8001186:	e086      	b.n	8001296 <directionConsistencyChecker+0x156>
 8001188:	2300      	movs	r3, #0
 800118a:	e084      	b.n	8001296 <directionConsistencyChecker+0x156>
		}else if (speed_set_point < 0) {
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001198:	f7ff fc10 	bl	80009bc <__aeabi_dcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d011      	beq.n	80011c6 <directionConsistencyChecker+0x86>
			return !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80011a2:	2108      	movs	r1, #8
 80011a4:	483e      	ldr	r0, [pc, #248]	; (80012a0 <directionConsistencyChecker+0x160>)
 80011a6:	f001 feb3 	bl	8002f10 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d108      	bne.n	80011c2 <directionConsistencyChecker+0x82>
 80011b0:	2110      	movs	r1, #16
 80011b2:	483b      	ldr	r0, [pc, #236]	; (80012a0 <directionConsistencyChecker+0x160>)
 80011b4:	f001 feac 	bl	8002f10 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <directionConsistencyChecker+0x82>
 80011be:	2301      	movs	r3, #1
 80011c0:	e069      	b.n	8001296 <directionConsistencyChecker+0x156>
 80011c2:	2300      	movs	r3, #0
 80011c4:	e067      	b.n	8001296 <directionConsistencyChecker+0x156>
		}else {
			return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80011c6:	2108      	movs	r1, #8
 80011c8:	4835      	ldr	r0, [pc, #212]	; (80012a0 <directionConsistencyChecker+0x160>)
 80011ca:	f001 fea1 	bl	8002f10 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d008      	beq.n	80011e6 <directionConsistencyChecker+0xa6>
 80011d4:	2110      	movs	r1, #16
 80011d6:	4832      	ldr	r0, [pc, #200]	; (80012a0 <directionConsistencyChecker+0x160>)
 80011d8:	f001 fe9a 	bl	8002f10 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <directionConsistencyChecker+0xa6>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e057      	b.n	8001296 <directionConsistencyChecker+0x156>
 80011e6:	2300      	movs	r3, #0
 80011e8:	e055      	b.n	8001296 <directionConsistencyChecker+0x156>
		}
	}else if(motor == 2) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d151      	bne.n	8001294 <directionConsistencyChecker+0x154>
		if(speed_set_point > 0) {
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011fc:	f7ff fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d013      	beq.n	800122e <directionConsistencyChecker+0xee>
			return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <directionConsistencyChecker+0x160>)
 800120c:	f001 fe80 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <directionConsistencyChecker+0xea>
 8001216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <directionConsistencyChecker+0x160>)
 800121c:	f001 fe78 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <directionConsistencyChecker+0xea>
 8001226:	2301      	movs	r3, #1
 8001228:	e035      	b.n	8001296 <directionConsistencyChecker+0x156>
 800122a:	2300      	movs	r3, #0
 800122c:	e033      	b.n	8001296 <directionConsistencyChecker+0x156>
		}else if (speed_set_point < 0) {
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	f7ff fbbf 	bl	80009bc <__aeabi_dcmplt>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <directionConsistencyChecker+0x12c>
			return !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <directionConsistencyChecker+0x160>)
 800124a:	f001 fe61 	bl	8002f10 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <directionConsistencyChecker+0x128>
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	4811      	ldr	r0, [pc, #68]	; (80012a0 <directionConsistencyChecker+0x160>)
 800125a:	f001 fe59 	bl	8002f10 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <directionConsistencyChecker+0x128>
 8001264:	2301      	movs	r3, #1
 8001266:	e016      	b.n	8001296 <directionConsistencyChecker+0x156>
 8001268:	2300      	movs	r3, #0
 800126a:	e014      	b.n	8001296 <directionConsistencyChecker+0x156>
		}else {
			return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800126c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <directionConsistencyChecker+0x160>)
 8001272:	f001 fe4d 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <directionConsistencyChecker+0x150>
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <directionConsistencyChecker+0x160>)
 8001282:	f001 fe45 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <directionConsistencyChecker+0x150>
 800128c:	2301      	movs	r3, #1
 800128e:	e002      	b.n	8001296 <directionConsistencyChecker+0x156>
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <directionConsistencyChecker+0x156>
		}
	}
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010800 	.word	0x40010800

080012a4 <setDirection>:

void setDirection(double speed_set_point, int motor) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
	if(motor == 1) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d136      	bne.n	8001324 <setDirection+0x80>
		if(speed_set_point > 0) {
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c2:	f7ff fb99 	bl	80009f8 <__aeabi_dcmpgt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00a      	beq.n	80012e2 <setDirection+0x3e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2108      	movs	r1, #8
 80012d0:	4836      	ldr	r0, [pc, #216]	; (80013ac <setDirection+0x108>)
 80012d2:	f001 fe34 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2110      	movs	r1, #16
 80012da:	4834      	ldr	r0, [pc, #208]	; (80013ac <setDirection+0x108>)
 80012dc:	f001 fe2f 	bl	8002f3e <HAL_GPIO_WritePin>
		}else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
		}
	}
}
 80012e0:	e05f      	b.n	80013a2 <setDirection+0xfe>
		}else if (speed_set_point < 0) {
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ee:	f7ff fb65 	bl	80009bc <__aeabi_dcmplt>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <setDirection+0x6a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2108      	movs	r1, #8
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <setDirection+0x108>)
 80012fe:	f001 fe1e 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	2110      	movs	r1, #16
 8001306:	4829      	ldr	r0, [pc, #164]	; (80013ac <setDirection+0x108>)
 8001308:	f001 fe19 	bl	8002f3e <HAL_GPIO_WritePin>
}
 800130c:	e049      	b.n	80013a2 <setDirection+0xfe>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800130e:	2201      	movs	r2, #1
 8001310:	2108      	movs	r1, #8
 8001312:	4826      	ldr	r0, [pc, #152]	; (80013ac <setDirection+0x108>)
 8001314:	f001 fe13 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	2110      	movs	r1, #16
 800131c:	4823      	ldr	r0, [pc, #140]	; (80013ac <setDirection+0x108>)
 800131e:	f001 fe0e 	bl	8002f3e <HAL_GPIO_WritePin>
}
 8001322:	e03e      	b.n	80013a2 <setDirection+0xfe>
	}else if(motor == 2) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d13b      	bne.n	80013a2 <setDirection+0xfe>
		if(speed_set_point > 0) {
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001336:	f7ff fb5f 	bl	80009f8 <__aeabi_dcmpgt>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <setDirection+0xb6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001346:	4819      	ldr	r0, [pc, #100]	; (80013ac <setDirection+0x108>)
 8001348:	f001 fdf9 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001352:	4816      	ldr	r0, [pc, #88]	; (80013ac <setDirection+0x108>)
 8001354:	f001 fdf3 	bl	8002f3e <HAL_GPIO_WritePin>
}
 8001358:	e023      	b.n	80013a2 <setDirection+0xfe>
		}else if (speed_set_point < 0) {
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001366:	f7ff fb29 	bl	80009bc <__aeabi_dcmplt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00c      	beq.n	800138a <setDirection+0xe6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <setDirection+0x108>)
 8001378:	f001 fde1 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <setDirection+0x108>)
 8001384:	f001 fddb 	bl	8002f3e <HAL_GPIO_WritePin>
}
 8001388:	e00b      	b.n	80013a2 <setDirection+0xfe>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <setDirection+0x108>)
 8001392:	f001 fdd4 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <setDirection+0x108>)
 800139e:	f001 fdce 	bl	8002f3e <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40010800 	.word	0x40010800

080013b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	b089      	sub	sp, #36	; 0x24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6178      	str	r0, [r7, #20]
	if (htim->Instance == TIM1) {
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a7c      	ldr	r2, [pc, #496]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f040 8373 	bne.w	8001aac <HAL_TIM_PeriodElapsedCallback+0x6fc>

		pulsosAct = (contOUFlow * 65000) + __HAL_TIM_GET_COUNTER(&htim3);
 80013c6:	4b7b      	ldr	r3, [pc, #492]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	4413      	add	r3, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4b77      	ldr	r3, [pc, #476]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80013e0:	601a      	str	r2, [r3, #0]
		velocidadPulsos = (pulsosAct - pulsosAnt) / deltaT;
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f809 	bl	8000404 <__aeabi_i2d>
 80013f2:	4b74      	ldr	r3, [pc, #464]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013f4:	cb18      	ldmia	r3, {r3, r4}
 80013f6:	461a      	mov	r2, r3
 80013f8:	4623      	mov	r3, r4
 80013fa:	f7ff f997 	bl	800072c <__aeabi_ddiv>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4a71      	ldr	r2, [pc, #452]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001404:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM = velocidadPulsos / (168 * 44) * 60;
 8001408:	4b6f      	ldr	r3, [pc, #444]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	a366      	add	r3, pc, #408	; (adr r3, 80015a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f98a 	bl	800072c <__aeabi_ddiv>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b69      	ldr	r3, [pc, #420]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4a68      	ldr	r2, [pc, #416]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001430:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt = pulsosAct;
 8001434:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a61      	ldr	r2, [pc, #388]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800143a:	6013      	str	r3, [r2, #0]

		pulsosAct2 = (contOUFlow2 * 65000) + __HAL_TIM_GET_COUNTER(&htim4);
 800143c:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	4413      	add	r3, r2
 8001452:	461a      	mov	r2, r3
 8001454:	4b61      	ldr	r3, [pc, #388]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001456:	601a      	str	r2, [r3, #0]
		velocidadPulsos2 = (pulsosAct2 - pulsosAnt2) / deltaT;
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b60      	ldr	r3, [pc, #384]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ffce 	bl	8000404 <__aeabi_i2d>
 8001468:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800146a:	cb18      	ldmia	r3, {r3, r4}
 800146c:	461a      	mov	r2, r3
 800146e:	4623      	mov	r3, r4
 8001470:	f7ff f95c 	bl	800072c <__aeabi_ddiv>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4a5a      	ldr	r2, [pc, #360]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800147a:	e9c2 3400 	strd	r3, r4, [r2]
		velocidadRPM2 = velocidadPulsos2 / (168 * 44) * 60;
 800147e:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001484:	a348      	add	r3, pc, #288	; (adr r3, 80015a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f94f 	bl	800072c <__aeabi_ddiv>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800149c:	f7ff f81c 	bl	80004d8 <__aeabi_dmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80014a6:	e9c2 3400 	strd	r3, r4, [r2]
		pulsosAnt2 = pulsosAct2;
 80014aa:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a4c      	ldr	r2, [pc, #304]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80014b0:	6013      	str	r3, [r2, #0]


		/*se cargan los valores de velocidad en el buffer de salida de spi*/
		generateSpeedResponse(velocidadRPM, velocidadRPM2);
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80014b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80014ba:	cb18      	ldmia	r3, {r3, r4}
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	f7ff fd6e 	bl	8000fa0 <generateSpeedResponse>

		int consistent_direction_1 = directionConsistencyChecker(velocidad_consigna, 1);
 80014c4:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80014c6:	cb18      	ldmia	r3, {r3, r4}
 80014c8:	2201      	movs	r2, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	4621      	mov	r1, r4
 80014ce:	f7ff fe37 	bl	8001140 <directionConsistencyChecker>
 80014d2:	61f8      	str	r0, [r7, #28]
		int consistent_direction_2 = directionConsistencyChecker(velocidad_consigna2, 2);
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80014d6:	cb18      	ldmia	r3, {r3, r4}
 80014d8:	2202      	movs	r2, #2
 80014da:	4618      	mov	r0, r3
 80014dc:	4621      	mov	r1, r4
 80014de:	f7ff fe2f 	bl	8001140 <directionConsistencyChecker>
 80014e2:	61b8      	str	r0, [r7, #24]

		if(!consistent_direction_1) {
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d138      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x1ac>
			if(velocidadRPM < ZERO_MARGIN && velocidadRPM > -ZERO_MARGIN) {
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80014f6:	f7ff fa61 	bl	80009bc <__aeabi_dcmplt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d015      	beq.n	800152c <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800150c:	f7ff fa74 	bl	80009f8 <__aeabi_dcmpgt>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <HAL_TIM_PeriodElapsedCallback+0x17c>
				setDirection(velocidad_consigna, 1);
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001518:	cb18      	ldmia	r3, {r3, r4}
 800151a:	2201      	movs	r2, #1
 800151c:	4618      	mov	r0, r3
 800151e:	4621      	mov	r1, r4
 8001520:	f7ff fec0 	bl	80012a4 <setDirection>
				control = 1;
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e017      	b.n	800155c <HAL_TIM_PeriodElapsedCallback+0x1ac>
			}else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	2108      	movs	r1, #8
 8001530:	4833      	ldr	r0, [pc, #204]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001532:	f001 fd04 	bl	8002f3e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	2110      	movs	r1, #16
 800153a:	4831      	ldr	r0, [pc, #196]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800153c:	f001 fcff 	bl	8002f3e <HAL_GPIO_WritePin>
				control = 0;
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
				duty_cycle_pid = 0; //Free running stop, fast stop can cause overcurrent protection tripping
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
				stop1 = 1;
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
			}
		}

		if(!consistent_direction_2) {
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d172      	bne.n	8001648 <HAL_TIM_PeriodElapsedCallback+0x298>
			if(velocidadRPM2 < ZERO_MARGIN && velocidadRPM2 > -ZERO_MARGIN) {
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800156e:	f7ff fa25 	bl	80009bc <__aeabi_dcmplt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d04d      	beq.n	8001614 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001584:	f7ff fa38 	bl	80009f8 <__aeabi_dcmpgt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d042      	beq.n	8001614 <HAL_TIM_PeriodElapsedCallback+0x264>
				setDirection(velocidad_consigna2, 2);
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001590:	cb18      	ldmia	r3, {r3, r4}
 8001592:	2202      	movs	r2, #2
 8001594:	4618      	mov	r0, r3
 8001596:	4621      	mov	r1, r4
 8001598:	f7ff fe84 	bl	80012a4 <setDirection>
				control2 = 1;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e051      	b.n	8001648 <HAL_TIM_PeriodElapsedCallback+0x298>
 80015a4:	f3af 8000 	nop.w
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40bce000 	.word	0x40bce000
 80015b0:	40012c00 	.word	0x40012c00
 80015b4:	20000258 	.word	0x20000258
 80015b8:	200003c8 	.word	0x200003c8
 80015bc:	20000260 	.word	0x20000260
 80015c0:	2000025c 	.word	0x2000025c
 80015c4:	20000010 	.word	0x20000010
 80015c8:	20000270 	.word	0x20000270
 80015cc:	404e0000 	.word	0x404e0000
 80015d0:	20000278 	.word	0x20000278
 80015d4:	20000264 	.word	0x20000264
 80015d8:	2000036c 	.word	0x2000036c
 80015dc:	2000026c 	.word	0x2000026c
 80015e0:	20000268 	.word	0x20000268
 80015e4:	20000280 	.word	0x20000280
 80015e8:	20000288 	.word	0x20000288
 80015ec:	200002b0 	.word	0x200002b0
 80015f0:	200002b8 	.word	0x200002b8
 80015f4:	40140000 	.word	0x40140000
 80015f8:	c0140000 	.word	0xc0140000
 80015fc:	20000048 	.word	0x20000048
 8001600:	40010800 	.word	0x40010800
 8001604:	20000300 	.word	0x20000300
 8001608:	20000490 	.word	0x20000490
 800160c:	20000050 	.word	0x20000050
 8001610:	2000004c 	.word	0x2000004c
			}else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161a:	487f      	ldr	r0, [pc, #508]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800161c:	f001 fc8f 	bl	8002f3e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001626:	487c      	ldr	r0, [pc, #496]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001628:	f001 fc89 	bl	8002f3e <HAL_GPIO_WritePin>
				control2 = 0;
 800162c:	4b7b      	ldr	r3, [pc, #492]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
				duty_cycle_pid2 = 0;
 8001632:	4b7b      	ldr	r3, [pc, #492]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 8001638:	4b7a      	ldr	r3, [pc, #488]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a78      	ldr	r2, [pc, #480]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c
				stop2 = 1;
 8001642:	4b79      	ldr	r3, [pc, #484]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
			}
		}

		//para el control
		if (control == 1) {
 8001648:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 8127 	bne.w	80018a0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
			//calculo PID:
			/*
			 *----------------  control motor 1
			 */

			error_vel_act = velocidad_consigna - velocidadRPM;
 8001652:	4b77      	ldr	r3, [pc, #476]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800165a:	cb18      	ldmia	r3, {r3, r4}
 800165c:	461a      	mov	r2, r3
 800165e:	4623      	mov	r3, r4
 8001660:	f7fe fd82 	bl	8000168 <__aeabi_dsub>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4a73      	ldr	r2, [pc, #460]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800166a:	e9c2 3400 	strd	r3, r4, [r2]
			if (stop1 == 1) {
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d106      	bne.n	8001684 <HAL_TIM_PeriodElapsedCallback+0x2d4>
				Ui_anterior = 0;
 8001676:	4a72      	ldr	r2, [pc, #456]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up = KP1 * error_vel_act;
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168a:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800168c:	cb18      	ldmia	r3, {r3, r4}
 800168e:	461a      	mov	r2, r3
 8001690:	4623      	mov	r3, r4
 8001692:	f7fe ff21 	bl	80004d8 <__aeabi_dmul>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	4a6b      	ldr	r2, [pc, #428]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800169c:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual = Ui_anterior + (KI1 * deltaT * error_vel_ant);
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80016a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a6:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80016a8:	cb18      	ldmia	r3, {r3, r4}
 80016aa:	461a      	mov	r2, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	f7fe ff13 	bl	80004d8 <__aeabi_dmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80016bc:	cb18      	ldmia	r3, {r3, r4}
 80016be:	461a      	mov	r2, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	f7fe ff09 	bl	80004d8 <__aeabi_dmul>
 80016c6:	4603      	mov	r3, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	4618      	mov	r0, r3
 80016cc:	4621      	mov	r1, r4
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80016d0:	cb18      	ldmia	r3, {r3, r4}
 80016d2:	461a      	mov	r2, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	f7fe fd49 	bl	800016c <__adddf3>
 80016da:	4603      	mov	r3, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	4a5e      	ldr	r2, [pc, #376]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80016e0:	e9c2 3400 	strd	r3, r4, [r2]
			Ud = (KD1 / deltaT) * (error_vel_act - error_vel_ant);
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80016e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ea:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80016ec:	cb18      	ldmia	r3, {r3, r4}
 80016ee:	461a      	mov	r2, r3
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7ff f81b 	bl	800072c <__aeabi_ddiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	461d      	mov	r5, r3
 80016fc:	4626      	mov	r6, r4
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001706:	cb18      	ldmia	r3, {r3, r4}
 8001708:	461a      	mov	r2, r3
 800170a:	4623      	mov	r3, r4
 800170c:	f7fe fd2c 	bl	8000168 <__aeabi_dsub>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	4628      	mov	r0, r5
 800171a:	4631      	mov	r1, r6
 800171c:	f7fe fedc 	bl	80004d8 <__aeabi_dmul>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	4a4e      	ldr	r2, [pc, #312]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001726:	e9c2 3400 	strd	r3, r4, [r2]
			if (velocidad_consigna > 0) {
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800172c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	f7ff f95e 	bl	80009f8 <__aeabi_dcmpgt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d02e      	beq.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				duty_cycle_pid = (uint32_t) fabs(
						duty_cycle_pid + (Up + Ui_actual + Ud));
 8001742:	4b48      	ldr	r3, [pc, #288]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe4c 	bl	80003e4 <__aeabi_ui2d>
 800174c:	4605      	mov	r5, r0
 800174e:	460e      	mov	r6, r1
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001758:	cb18      	ldmia	r3, {r3, r4}
 800175a:	461a      	mov	r2, r3
 800175c:	4623      	mov	r3, r4
 800175e:	f7fe fd05 	bl	800016c <__adddf3>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4618      	mov	r0, r3
 8001768:	4621      	mov	r1, r4
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800176c:	cb18      	ldmia	r3, {r3, r4}
 800176e:	461a      	mov	r2, r3
 8001770:	4623      	mov	r3, r4
 8001772:	f7fe fcfb 	bl	800016c <__adddf3>
 8001776:	4603      	mov	r3, r0
 8001778:	460c      	mov	r4, r1
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	4628      	mov	r0, r5
 8001780:	4631      	mov	r1, r6
 8001782:	f7fe fcf3 	bl	800016c <__adddf3>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
				duty_cycle_pid = (uint32_t) fabs(
 800178a:	469a      	mov	sl, r3
 800178c:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8001790:	4650      	mov	r0, sl
 8001792:	4659      	mov	r1, fp
 8001794:	f7ff f962 	bl	8000a5c <__aeabi_d2uiz>
 8001798:	4602      	mov	r2, r0
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e066      	b.n	800186e <HAL_TIM_PeriodElapsedCallback+0x4be>
			} else if (velocidad_consigna < 0) {
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x480>)
 80017a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f7ff f905 	bl	80009bc <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d057      	beq.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x4b8>
				duty_cycle_pid = (uint32_t) fabs(
						duty_cycle_pid - (Up + Ui_actual + Ud));
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe11 	bl	80003e4 <__aeabi_ui2d>
 80017c2:	4605      	mov	r5, r0
 80017c4:	460e      	mov	r6, r1
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80017c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80017ce:	cb18      	ldmia	r3, {r3, r4}
 80017d0:	461a      	mov	r2, r3
 80017d2:	4623      	mov	r3, r4
 80017d4:	f7fe fcca 	bl	800016c <__adddf3>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4618      	mov	r0, r3
 80017de:	4621      	mov	r1, r4
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80017e2:	cb18      	ldmia	r3, {r3, r4}
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	f7fe fcc0 	bl	800016c <__adddf3>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	461a      	mov	r2, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	4628      	mov	r0, r5
 80017f6:	4631      	mov	r1, r6
 80017f8:	f7fe fcb6 	bl	8000168 <__aeabi_dsub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	460c      	mov	r4, r1
				duty_cycle_pid = (uint32_t) fabs(
 8001800:	4698      	mov	r8, r3
 8001802:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7ff f927 	bl	8000a5c <__aeabi_d2uiz>
 800180e:	4602      	mov	r2, r0
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e02b      	b.n	800186e <HAL_TIM_PeriodElapsedCallback+0x4be>
 8001816:	bf00      	nop
 8001818:	40010800 	.word	0x40010800
 800181c:	2000004c 	.word	0x2000004c
 8001820:	20000304 	.word	0x20000304
 8001824:	20000490 	.word	0x20000490
 8001828:	20000054 	.word	0x20000054
 800182c:	20000048 	.word	0x20000048
 8001830:	200002b0 	.word	0x200002b0
 8001834:	20000278 	.word	0x20000278
 8001838:	20000290 	.word	0x20000290
 800183c:	20000050 	.word	0x20000050
 8001840:	200002c0 	.word	0x200002c0
 8001844:	20000018 	.word	0x20000018
 8001848:	200002d0 	.word	0x200002d0
 800184c:	20000020 	.word	0x20000020
 8001850:	20000010 	.word	0x20000010
 8001854:	20000298 	.word	0x20000298
 8001858:	200002c8 	.word	0x200002c8
 800185c:	20000028 	.word	0x20000028
 8001860:	200002d8 	.word	0x200002d8
 8001864:	20000300 	.word	0x20000300
			} else {
				duty_cycle_pid = 0;
 8001868:	4b9d      	ldr	r3, [pc, #628]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
			}

			if (duty_cycle_pid > MAX_DUTY_CICLE) {
 800186e:	4b9c      	ldr	r3, [pc, #624]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001876:	4293      	cmp	r3, r2
 8001878:	d903      	bls.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x4d2>
				duty_cycle_pid = MAX_DUTY_CICLE;
 800187a:	4b99      	ldr	r3, [pc, #612]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 800187c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001880:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle_pid);
 8001882:	4b98      	ldr	r3, [pc, #608]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
			Ui_anterior = Ui_actual;
 800188c:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800188e:	cb18      	ldmia	r3, {r3, r4}
 8001890:	4a96      	ldr	r2, [pc, #600]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001892:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant = error_vel_act;
 8001896:	4b96      	ldr	r3, [pc, #600]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001898:	cb18      	ldmia	r3, {r3, r4}
 800189a:	4a96      	ldr	r2, [pc, #600]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x744>)
 800189c:	e9c2 3400 	strd	r3, r4, [r2]

		}

		if(control2 == 1){
 80018a0:	4b95      	ldr	r3, [pc, #596]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	f040 8164 	bne.w	8001b72 <HAL_TIM_PeriodElapsedCallback+0x7c2>

			/*
			 * ------------------control motor 2
			 */

			error_vel_act2 = velocidad_consigna2 - velocidadRPM2;
 80018aa:	4b94      	ldr	r3, [pc, #592]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80018ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b0:	4b93      	ldr	r3, [pc, #588]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80018b2:	cb18      	ldmia	r3, {r3, r4}
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	f7fe fc56 	bl	8000168 <__aeabi_dsub>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	4a90      	ldr	r2, [pc, #576]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 80018c2:	e9c2 3400 	strd	r3, r4, [r2]
			if (stop2 == 1) {
 80018c6:	4b90      	ldr	r3, [pc, #576]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <HAL_TIM_PeriodElapsedCallback+0x52c>
				Ui_anterior2 = 0;
 80018ce:	4a8f      	ldr	r2, [pc, #572]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	e9c2 3400 	strd	r3, r4, [r2]
			}
			Up2 = KP2 * error_vel_act2;
 80018dc:	4b8c      	ldr	r3, [pc, #560]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x760>)
 80018de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e2:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 80018e4:	cb18      	ldmia	r3, {r3, r4}
 80018e6:	461a      	mov	r2, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7fe fdf5 	bl	80004d8 <__aeabi_dmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	4a88      	ldr	r2, [pc, #544]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x764>)
 80018f4:	e9c2 3400 	strd	r3, r4, [r2]
			Ui_actual2 = Ui_anterior2 + KI2 * deltaT * error_vel_ant2;
 80018f8:	4b87      	ldr	r3, [pc, #540]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x768>)
 80018fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018fe:	4b87      	ldr	r3, [pc, #540]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8001900:	cb18      	ldmia	r3, {r3, r4}
 8001902:	461a      	mov	r2, r3
 8001904:	4623      	mov	r3, r4
 8001906:	f7fe fde7 	bl	80004d8 <__aeabi_dmul>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8001914:	cb18      	ldmia	r3, {r3, r4}
 8001916:	461a      	mov	r2, r3
 8001918:	4623      	mov	r3, r4
 800191a:	f7fe fddd 	bl	80004d8 <__aeabi_dmul>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	4618      	mov	r0, r3
 8001924:	4621      	mov	r1, r4
 8001926:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8001928:	cb18      	ldmia	r3, {r3, r4}
 800192a:	461a      	mov	r2, r3
 800192c:	4623      	mov	r3, r4
 800192e:	f7fe fc1d 	bl	800016c <__adddf3>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4a7b      	ldr	r2, [pc, #492]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x774>)
 8001938:	e9c2 3400 	strd	r3, r4, [r2]
			Ud2 = KD2 / deltaT * (error_vel_act2 - error_vel_ant2);
 800193c:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8001944:	cb18      	ldmia	r3, {r3, r4}
 8001946:	461a      	mov	r2, r3
 8001948:	4623      	mov	r3, r4
 800194a:	f7fe feef 	bl	800072c <__aeabi_ddiv>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	461d      	mov	r5, r3
 8001954:	4626      	mov	r6, r4
 8001956:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x770>)
 800195e:	cb18      	ldmia	r3, {r3, r4}
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	f7fe fc00 	bl	8000168 <__aeabi_dsub>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	4628      	mov	r0, r5
 8001972:	4631      	mov	r1, r6
 8001974:	f7fe fdb0 	bl	80004d8 <__aeabi_dmul>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4a6b      	ldr	r2, [pc, #428]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x77c>)
 800197e:	e9c2 3400 	strd	r3, r4, [r2]
			if (velocidad_consigna2 > 0) {
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	f7ff f832 	bl	80009f8 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d02f      	beq.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x64a>
				duty_cycle_pid2 = (uint32_t) fabs(
						duty_cycle_pid2 + (Up2 + Ui_actual2 + Ud2));
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd20 	bl	80003e4 <__aeabi_ui2d>
 80019a4:	4605      	mov	r5, r0
 80019a6:	460e      	mov	r6, r1
 80019a8:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x764>)
 80019aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x774>)
 80019b0:	cb18      	ldmia	r3, {r3, r4}
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	f7fe fbd9 	bl	800016c <__adddf3>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	4618      	mov	r0, r3
 80019c0:	4621      	mov	r1, r4
 80019c2:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80019c4:	cb18      	ldmia	r3, {r3, r4}
 80019c6:	461a      	mov	r2, r3
 80019c8:	4623      	mov	r3, r4
 80019ca:	f7fe fbcf 	bl	800016c <__adddf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	460c      	mov	r4, r1
 80019d2:	461a      	mov	r2, r3
 80019d4:	4623      	mov	r3, r4
 80019d6:	4628      	mov	r0, r5
 80019d8:	4631      	mov	r1, r6
 80019da:	f7fe fbc7 	bl	800016c <__adddf3>
 80019de:	4603      	mov	r3, r0
 80019e0:	460c      	mov	r4, r1
				duty_cycle_pid2 = (uint32_t) fabs(
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ee:	f7ff f835 	bl	8000a5c <__aeabi_d2uiz>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e03e      	b.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x6c8>
			} else if (velocidad_consigna2 < 0) {
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80019fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f7fe ffd8 	bl	80009bc <__aeabi_dcmplt>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02f      	beq.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x6c2>
				duty_cycle_pid2 = (uint32_t) fabs(
						duty_cycle_pid2 - (Up2 + Ui_actual2 + Ud2));
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fce4 	bl	80003e4 <__aeabi_ui2d>
 8001a1c:	4605      	mov	r5, r0
 8001a1e:	460e      	mov	r6, r1
 8001a20:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8001a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x774>)
 8001a28:	cb18      	ldmia	r3, {r3, r4}
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	f7fe fb9d 	bl	800016c <__adddf3>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	4618      	mov	r0, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001a3c:	cb18      	ldmia	r3, {r3, r4}
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4623      	mov	r3, r4
 8001a42:	f7fe fb93 	bl	800016c <__adddf3>
 8001a46:	4603      	mov	r3, r0
 8001a48:	460c      	mov	r4, r1
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	4628      	mov	r0, r5
 8001a50:	4631      	mov	r1, r6
 8001a52:	f7fe fb89 	bl	8000168 <__aeabi_dsub>
 8001a56:	4603      	mov	r3, r0
 8001a58:	460c      	mov	r4, r1
				duty_cycle_pid2 = (uint32_t) fabs(
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a66:	f7fe fff9 	bl	8000a5c <__aeabi_d2uiz>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e002      	b.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x6c8>
			} else {
				duty_cycle_pid2 = 0;
 8001a72:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
			}
			if (duty_cycle_pid2 > MAX_DUTY_CICLE) {
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d903      	bls.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0x6dc>
				duty_cycle_pid2 = MAX_DUTY_CICLE;
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001a86:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001a8a:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle_pid2);
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
			Ui_anterior2 = Ui_actual2;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x774>)
 8001a98:	cb18      	ldmia	r3, {r3, r4}
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8001a9c:	e9c2 3400 	strd	r3, r4, [r2]
			error_vel_ant2 = error_vel_act2;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001aa2:	cb18      	ldmia	r3, {r3, r4}
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8001aa6:	e9c2 3400 	strd	r3, r4, [r2]
			contOUFlow2--;
		} else { //Overflow
			contOUFlow2++;
		}
	}
}
 8001aaa:	e062      	b.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x7c2>
	} else if (htim->Instance == TIM3) {
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d144      	bne.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x790>
		if (__HAL_TIM_GET_COUNTER(&htim3) > (htim->Init.Period + 1) / 2) { //Underflow
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d905      	bls.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0x724>
			contOUFlow--;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	e04e      	b.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x7c2>
			contOUFlow++;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001adc:	6013      	str	r3, [r2, #0]
}
 8001ade:	e048      	b.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x7c2>
 8001ae0:	20000300 	.word	0x20000300
 8001ae4:	20000490 	.word	0x20000490
 8001ae8:	200002c8 	.word	0x200002c8
 8001aec:	200002c0 	.word	0x200002c0
 8001af0:	20000290 	.word	0x20000290
 8001af4:	20000298 	.word	0x20000298
 8001af8:	2000004c 	.word	0x2000004c
 8001afc:	200002b8 	.word	0x200002b8
 8001b00:	20000288 	.word	0x20000288
 8001b04:	200002a0 	.word	0x200002a0
 8001b08:	20000054 	.word	0x20000054
 8001b0c:	200002e0 	.word	0x200002e0
 8001b10:	20000030 	.word	0x20000030
 8001b14:	200002f0 	.word	0x200002f0
 8001b18:	20000038 	.word	0x20000038
 8001b1c:	20000010 	.word	0x20000010
 8001b20:	200002a8 	.word	0x200002a8
 8001b24:	200002e8 	.word	0x200002e8
 8001b28:	20000040 	.word	0x20000040
 8001b2c:	200002f8 	.word	0x200002f8
 8001b30:	20000304 	.word	0x20000304
 8001b34:	40000400 	.word	0x40000400
 8001b38:	200003c8 	.word	0x200003c8
 8001b3c:	20000258 	.word	0x20000258
	} else if (htim->Instance == TIM4) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d113      	bne.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x7c2>
		if (__HAL_TIM_GET_COUNTER(&htim4) > (htim->Init.Period + 1) / 2) { //Underflow
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d905      	bls.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x7b8>
			contOUFlow2--;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	e004      	b.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x7c2>
			contOUFlow2++;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001b70:	6013      	str	r3, [r2, #0]
}
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	2000036c 	.word	0x2000036c
 8001b84:	20000264 	.word	0x20000264

08001b88 <HAL_SPI_TxRxCpltCallback>:

/**
 * @brief  The application entry point.
 * @retval int
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI2) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d149      	bne.n	8001c2e <HAL_SPI_TxRxCpltCallback+0xa6>
		for (int i = 0; i < 14; i++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e03d      	b.n	8001c1c <HAL_SPI_TxRxCpltCallback+0x94>
			switch (in_buffer[i]) {
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b3a      	cmp	r3, #58	; 0x3a
 8001baa:	d002      	beq.n	8001bb2 <HAL_SPI_TxRxCpltCallback+0x2a>
 8001bac:	2b3b      	cmp	r3, #59	; 0x3b
 8001bae:	d007      	beq.n	8001bc0 <HAL_SPI_TxRxCpltCallback+0x38>
 8001bb0:	e016      	b.n	8001be0 <HAL_SPI_TxRxCpltCallback+0x58>
			case ':': //Comienzo de la trama
				flagRx = 1;
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
				indRx = 0;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
				break;
 8001bbe:	e02a      	b.n	8001c16 <HAL_SPI_TxRxCpltCallback+0x8e>
			case ';':  //Fin de trama.
				if (flagRx) {
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_SPI_TxRxCpltCallback+0x88>
					flagRx = 0;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
					buffer[indRx] = 0;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]
					interpreteComando();
 8001bda:	f7fe ffaf 	bl	8000b3c <interpreteComando>
				}
				break;
 8001bde:	e017      	b.n	8001c10 <HAL_SPI_TxRxCpltCallback+0x88>
			default: //Almacenamiento de la trama.
				if (flagRx) {
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_SPI_TxRxCpltCallback+0x8c>
					buffer[indRx] = in_buffer[i];
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001bf8:	545a      	strb	r2, [r3, r1]
					if (indRx < MAX_BUFFER - 1) {
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b26      	cmp	r3, #38	; 0x26
 8001c00:	d808      	bhi.n	8001c14 <HAL_SPI_TxRxCpltCallback+0x8c>
						indRx++;
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001c0c:	701a      	strb	r2, [r3, #0]
					}

				}
				break;
 8001c0e:	e001      	b.n	8001c14 <HAL_SPI_TxRxCpltCallback+0x8c>
				break;
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <HAL_SPI_TxRxCpltCallback+0x8e>
				break;
 8001c14:	bf00      	nop
		for (int i = 0; i < 14; i++) {
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b0d      	cmp	r3, #13
 8001c20:	ddbe      	ble.n	8001ba0 <HAL_SPI_TxRxCpltCallback+0x18>
			}
		}
		HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[0], &in_buffer[0],14);
 8001c22:	230e      	movs	r3, #14
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001c26:	4909      	ldr	r1, [pc, #36]	; (8001c4c <HAL_SPI_TxRxCpltCallback+0xc4>)
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <HAL_SPI_TxRxCpltCallback+0xc8>)
 8001c2a:	f001 fe0f 	bl	800384c <HAL_SPI_TransmitReceive_IT>

	}



}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40003800 	.word	0x40003800
 8001c3c:	200003b8 	.word	0x200003b8
 8001c40:	200003c6 	.word	0x200003c6
 8001c44:	20000254 	.word	0x20000254
 8001c48:	20000414 	.word	0x20000414
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000314 	.word	0x20000314

08001c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c58:	f000 fdf8 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5c:	f000 f87e 	bl	8001d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c60:	f000 fabc 	bl	80021dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001c64:	f000 f8f4 	bl	8001e50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c68:	f000 f990 	bl	8001f8c <MX_TIM2_Init>
  MX_SPI2_Init();
 8001c6c:	f000 f8bc 	bl	8001de8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001c70:	f000 fa0c 	bl	800208c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c74:	f000 fa5e 	bl	8002134 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001c78:	482f      	ldr	r0, [pc, #188]	; (8001d38 <main+0xe4>)
 8001c7a:	f002 f9ff 	bl	800407c <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	482d      	ldr	r0, [pc, #180]	; (8001d38 <main+0xe4>)
 8001c82:	f002 faa5 	bl	80041d0 <HAL_TIM_OC_Start_IT>

	/*Se activan canales para generacion PWM- */
	/*canal 1 para motor 1 */
	/*canal 3 para motor 2*/
	HAL_TIM_Base_Start(&htim2);
 8001c86:	482d      	ldr	r0, [pc, #180]	; (8001d3c <main+0xe8>)
 8001c88:	f002 f9ae 	bl	8003fe8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	482b      	ldr	r0, [pc, #172]	; (8001d3c <main+0xe8>)
 8001c90:	f002 fbde 	bl	8004450 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001c94:	2108      	movs	r1, #8
 8001c96:	4829      	ldr	r0, [pc, #164]	; (8001d3c <main+0xe8>)
 8001c98:	f002 fbda 	bl	8004450 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8001c9c:	4828      	ldr	r0, [pc, #160]	; (8001d40 <main+0xec>)
 8001c9e:	f002 f9ed 	bl	800407c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001ca2:	213c      	movs	r1, #60	; 0x3c
 8001ca4:	4826      	ldr	r0, [pc, #152]	; (8001d40 <main+0xec>)
 8001ca6:	f002 fd5d 	bl	8004764 <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 8001caa:	4826      	ldr	r0, [pc, #152]	; (8001d44 <main+0xf0>)
 8001cac:	f002 f9e6 	bl	800407c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001cb0:	213c      	movs	r1, #60	; 0x3c
 8001cb2:	4824      	ldr	r0, [pc, #144]	; (8001d44 <main+0xf0>)
 8001cb4:	f002 fd56 	bl	8004764 <HAL_TIM_Encoder_Start_IT>

	/*Se activa frenado el motor  1*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2108      	movs	r1, #8
 8001cbc:	4822      	ldr	r0, [pc, #136]	; (8001d48 <main+0xf4>)
 8001cbe:	f001 f93e 	bl	8002f3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	4820      	ldr	r0, [pc, #128]	; (8001d48 <main+0xf4>)
 8001cc8:	f001 f939 	bl	8002f3e <HAL_GPIO_WritePin>

	/*Se activa frenado el motor 2*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd2:	481d      	ldr	r0, [pc, #116]	; (8001d48 <main+0xf4>)
 8001cd4:	f001 f933 	bl	8002f3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cde:	481a      	ldr	r0, [pc, #104]	; (8001d48 <main+0xf4>)
 8001ce0:	f001 f92d 	bl	8002f3e <HAL_GPIO_WritePin>
	/*Se fuerza valor del contador del timer 3 y 4 para lecturas de encoders*/
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <main+0xec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <main+0xf0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24

	/*se inicializa el duty cicle de los motores*/
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <main+0xe8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <main+0xe8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_SPI_TransmitReceive_IT(&hspi2, &out_buffer[0], &in_buffer[0],14);
 8001d04:	230e      	movs	r3, #14
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <main+0xf8>)
 8001d08:	4911      	ldr	r1, [pc, #68]	; (8001d50 <main+0xfc>)
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <main+0x100>)
 8001d0c:	f001 fd9e 	bl	800384c <HAL_SPI_TransmitReceive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d16:	4810      	ldr	r0, [pc, #64]	; (8001d58 <main+0x104>)
 8001d18:	f001 f911 	bl	8002f3e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	f000 fdf7 	bl	8002910 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <main+0x104>)
 8001d2a:	f001 f908 	bl	8002f3e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001d2e:	2064      	movs	r0, #100	; 0x64
 8001d30:	f000 fdee 	bl	8002910 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001d34:	e7ec      	b.n	8001d10 <main+0xbc>
 8001d36:	bf00      	nop
 8001d38:	20000444 	.word	0x20000444
 8001d3c:	20000490 	.word	0x20000490
 8001d40:	200003c8 	.word	0x200003c8
 8001d44:	2000036c 	.word	0x2000036c
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	200003b8 	.word	0x200003b8
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000314 	.word	0x20000314
 8001d58:	40011000 	.word	0x40011000

08001d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b090      	sub	sp, #64	; 0x40
 8001d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	2228      	movs	r2, #40	; 0x28
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fc34 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d90:	2302      	movs	r3, #2
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 f8e3 	bl	8002f70 <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001db0:	f000 fa82 	bl	80022b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db4:	230f      	movs	r3, #15
 8001db6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db8:	2302      	movs	r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fb4e 	bl	8003470 <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dda:	f000 fa6d 	bl	80022b8 <Error_Handler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3740      	adds	r7, #64	; 0x40
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e18:	2238      	movs	r2, #56	; 0x38
 8001e1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e30:	220a      	movs	r2, #10
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	; (8001e48 <MX_SPI2_Init+0x60>)
 8001e36:	f001 fc85 	bl	8003744 <HAL_SPI_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8001e40:	f000 fa3a 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000314 	.word	0x20000314
 8001e4c:	40003800 	.word	0x40003800

08001e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b096      	sub	sp, #88	; 0x58
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2220      	movs	r2, #32
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fba5 	bl	80055d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001e90:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <MX_TIM1_Init+0x138>)
 8001e92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001e96:	220b      	movs	r2, #11
 8001e98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001ea0:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001ea2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eba:	4832      	ldr	r0, [pc, #200]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001ebc:	f002 f844 	bl	8003f48 <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ec6:	f000 f9f7 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ece:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ed0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	482b      	ldr	r0, [pc, #172]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001ed8:	f002 ff10 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ee2:	f000 f9e9 	bl	80022b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001ee6:	4827      	ldr	r0, [pc, #156]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001ee8:	f002 f91a 	bl	8004120 <HAL_TIM_OC_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ef2:	f000 f9e1 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f02:	4619      	mov	r1, r3
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001f06:	f003 fa79 	bl	80053fc <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f10:	f000 f9d2 	bl	80022b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001f3a:	f002 fdc9 	bl	8004ad0 <HAL_TIM_OC_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f44:	f000 f9b8 	bl	80022b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <MX_TIM1_Init+0x134>)
 8001f6c:	f003 faa4 	bl	80054b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001f76:	f000 f99f 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	3758      	adds	r7, #88	; 0x58
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000444 	.word	0x20000444
 8001f88:	40012c00 	.word	0x40012c00

08001f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	; 0x38
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fbc:	4b32      	ldr	r3, [pc, #200]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fd2:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001fd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fe4:	4828      	ldr	r0, [pc, #160]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fe6:	f001 ffaf 	bl	8003f48 <HAL_TIM_Base_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ff0:	f000 f962 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffe:	4619      	mov	r1, r3
 8002000:	4821      	ldr	r0, [pc, #132]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002002:	f002 fe7b 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800200c:	f000 f954 	bl	80022b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002010:	481d      	ldr	r0, [pc, #116]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002012:	f002 f9c5 	bl	80043a0 <HAL_TIM_PWM_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800201c:	f000 f94c 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4619      	mov	r1, r3
 800202e:	4816      	ldr	r0, [pc, #88]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002030:	f003 f9e4 	bl	80053fc <HAL_TIMEx_MasterConfigSynchronization>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800203a:	f000 f93d 	bl	80022b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203e:	2360      	movs	r3, #96	; 0x60
 8002040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002056:	f002 fd93 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002060:	f000 f92a 	bl	80022b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2208      	movs	r2, #8
 8002068:	4619      	mov	r1, r3
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <MX_TIM2_Init+0xfc>)
 800206c:	f002 fd88 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002076:	f000 f91f 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800207a:	4803      	ldr	r0, [pc, #12]	; (8002088 <MX_TIM2_Init+0xfc>)
 800207c:	f000 fa6a 	bl	8002554 <HAL_TIM_MspPostInit>

}
 8002080:	bf00      	nop
 8002082:	3738      	adds	r7, #56	; 0x38
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000490 	.word	0x20000490

0800208c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fa9c 	bl	80055d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <MX_TIM3_Init+0xa0>)
 80020aa:	4a21      	ldr	r2, [pc, #132]	; (8002130 <MX_TIM3_Init+0xa4>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <MX_TIM3_Init+0xa0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MX_TIM3_Init+0xa0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <MX_TIM3_Init+0xa0>)
 80020bc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80020c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_TIM3_Init+0xa0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM3_Init+0xa0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ce:	2303      	movs	r3, #3
 80020d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020d6:	2301      	movs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM3_Init+0xa0>)
 80020fa:	f002 fa91 	bl	8004620 <HAL_TIM_Encoder_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002104:	f000 f8d8 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_TIM3_Init+0xa0>)
 8002116:	f003 f971 	bl	80053fc <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002120:	f000 f8ca 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3730      	adds	r7, #48	; 0x30
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200003c8 	.word	0x200003c8
 8002130:	40000400 	.word	0x40000400

08002134 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fa48 	bl	80055d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <MX_TIM4_Init+0xa0>)
 8002152:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <MX_TIM4_Init+0xa4>)
 8002154:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002156:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <MX_TIM4_Init+0xa0>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <MX_TIM4_Init+0xa0>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8002162:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <MX_TIM4_Init+0xa0>)
 8002164:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002168:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <MX_TIM4_Init+0xa0>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <MX_TIM4_Init+0xa0>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002176:	2303      	movs	r3, #3
 8002178:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800217a:	2302      	movs	r3, #2
 800217c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800217e:	2301      	movs	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800218e:	2301      	movs	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	4619      	mov	r1, r3
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <MX_TIM4_Init+0xa0>)
 80021a2:	f002 fa3d 	bl	8004620 <HAL_TIM_Encoder_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021ac:	f000 f884 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_TIM4_Init+0xa0>)
 80021be:	f003 f91d 	bl	80053fc <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021c8:	f000 f876 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	3730      	adds	r7, #48	; 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000036c 	.word	0x2000036c
 80021d8:	40000800 	.word	0x40000800

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <MX_GPIO_Init+0xd0>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <MX_GPIO_Init+0xd0>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <MX_GPIO_Init+0xd0>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <MX_GPIO_Init+0xd0>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <MX_GPIO_Init+0xd0>)
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <MX_GPIO_Init+0xd0>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <MX_GPIO_Init+0xd0>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a21      	ldr	r2, [pc, #132]	; (80022ac <MX_GPIO_Init+0xd0>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <MX_GPIO_Init+0xd0>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_GPIO_Init+0xd0>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <MX_GPIO_Init+0xd0>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <MX_GPIO_Init+0xd0>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002256:	4816      	ldr	r0, [pc, #88]	; (80022b0 <MX_GPIO_Init+0xd4>)
 8002258:	f000 fe71 	bl	8002f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f640 2118 	movw	r1, #2584	; 0xa18
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <MX_GPIO_Init+0xd8>)
 8002264:	f000 fe6b 	bl	8002f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2302      	movs	r3, #2
 8002278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 0310 	add.w	r3, r7, #16
 800227e:	4619      	mov	r1, r3
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <MX_GPIO_Init+0xd4>)
 8002282:	f000 fceb 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11;
 8002286:	f640 2318 	movw	r3, #2584	; 0xa18
 800228a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2302      	movs	r3, #2
 8002296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4619      	mov	r1, r3
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_GPIO_Init+0xd8>)
 80022a0:	f000 fcdc 	bl	8002c5c <HAL_GPIO_Init>

}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40010800 	.word	0x40010800

080022b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_MspInit+0x5c>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_MspInit+0x5c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6193      	str	r3, [r2, #24]
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_MspInit+0x5c>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_MspInit+0x5c>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_MspInit+0x5c>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_MspInit+0x5c>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_MspInit+0x60>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_MspInit+0x60>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000

08002328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_SPI_MspInit+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d146      	bne.n	80023d6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_SPI_MspInit+0xbc>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <HAL_SPI_MspInit+0xbc>)
 800234e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_SPI_MspInit+0xbc>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_SPI_MspInit+0xbc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_SPI_MspInit+0xbc>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_SPI_MspInit+0xbc>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002382:	2301      	movs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	4816      	ldr	r0, [pc, #88]	; (80023e8 <HAL_SPI_MspInit+0xc0>)
 800238e:	f000 fc65 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002392:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	4619      	mov	r1, r3
 80023a6:	4810      	ldr	r0, [pc, #64]	; (80023e8 <HAL_SPI_MspInit+0xc0>)
 80023a8:	f000 fc58 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	4619      	mov	r1, r3
 80023c0:	4809      	ldr	r0, [pc, #36]	; (80023e8 <HAL_SPI_MspInit+0xc0>)
 80023c2:	f000 fc4b 	bl	8002c5c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2024      	movs	r0, #36	; 0x24
 80023cc:	f000 fb99 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023d0:	2024      	movs	r0, #36	; 0x24
 80023d2:	f000 fbb2 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40003800 	.word	0x40003800
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010c00 	.word	0x40010c00

080023ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_TIM_Base_MspInit+0x68>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_TIM_Base_MspInit+0x6c>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <HAL_TIM_Base_MspInit+0x6c>)
 8002404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002408:	6193      	str	r3, [r2, #24]
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_TIM_Base_MspInit+0x6c>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2101      	movs	r1, #1
 800241a:	2019      	movs	r0, #25
 800241c:	f000 fb71 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002420:	2019      	movs	r0, #25
 8002422:	f000 fb8a 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002426:	e010      	b.n	800244a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d10b      	bne.n	800244a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_TIM_Base_MspInit+0x6c>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_TIM_Base_MspInit+0x6c>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_TIM_Base_MspInit+0x6c>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a32      	ldr	r2, [pc, #200]	; (8002540 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d12c      	bne.n	80024d6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a30      	ldr	r2, [pc, #192]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	61d3      	str	r3, [r2, #28]
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6193      	str	r3, [r2, #24]
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ac:	23c0      	movs	r3, #192	; 0xc0
 80024ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024b4:	2302      	movs	r3, #2
 80024b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	4619      	mov	r1, r3
 80024be:	4822      	ldr	r0, [pc, #136]	; (8002548 <HAL_TIM_Encoder_MspInit+0xec>)
 80024c0:	f000 fbcc 	bl	8002c5c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2102      	movs	r1, #2
 80024c8:	201d      	movs	r0, #29
 80024ca:	f000 fb1a 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024ce:	201d      	movs	r0, #29
 80024d0:	f000 fb33 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024d4:	e030      	b.n	8002538 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_TIM_Encoder_MspInit+0xf0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d12b      	bne.n	8002538 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	61d3      	str	r3, [r2, #28]
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002510:	23c0      	movs	r3, #192	; 0xc0
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002518:	2302      	movs	r3, #2
 800251a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0318 	add.w	r3, r7, #24
 8002520:	4619      	mov	r1, r3
 8002522:	480b      	ldr	r0, [pc, #44]	; (8002550 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002524:	f000 fb9a 	bl	8002c5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2102      	movs	r1, #2
 800252c:	201e      	movs	r0, #30
 800252e:	f000 fae8 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002532:	201e      	movs	r0, #30
 8002534:	f000 fb01 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40000400 	.word	0x40000400
 8002544:	40021000 	.word	0x40021000
 8002548:	40010800 	.word	0x40010800
 800254c:	40000800 	.word	0x40000800
 8002550:	40010c00 	.word	0x40010c00

08002554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002572:	d142      	bne.n	80025fa <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 8002592:	f043 0308 	orr.w	r3, r3, #8
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025a4:	2301      	movs	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2302      	movs	r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	4814      	ldr	r0, [pc, #80]	; (8002608 <HAL_TIM_MspPostInit+0xb4>)
 80025b8:	f000 fb50 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2302      	movs	r3, #2
 80025c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <HAL_TIM_MspPostInit+0xb8>)
 80025d2:	f000 fb43 	bl	8002c5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_TIM_MspPostInit+0xbc>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_TIM_MspPostInit+0xbc>)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3728      	adds	r7, #40	; 0x28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	40010800 	.word	0x40010800
 800260c:	40010c00 	.word	0x40010c00
 8002610:	40010000 	.word	0x40010000

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <NMI_Handler+0x4>

0800261a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <MemManage_Handler+0x4>

08002626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <UsageFault_Handler+0x4>

08002632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265a:	f000 f93d 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM1_UP_IRQHandler+0x10>)
 800266a:	f002 f928 	bl	80048be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000444 	.word	0x20000444

08002678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM3_IRQHandler+0x10>)
 800267e:	f002 f91e 	bl	80048be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200003c8 	.word	0x200003c8

0800268c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM4_IRQHandler+0x10>)
 8002692:	f002 f914 	bl	80048be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000036c 	.word	0x2000036c

080026a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <SPI2_IRQHandler+0x10>)
 80026a6:	f001 f965 	bl	8003974 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000314 	.word	0x20000314

080026b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e00a      	b.n	80026dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026c6:	f3af 8000 	nop.w
 80026ca:	4601      	mov	r1, r0
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	60ba      	str	r2, [r7, #8]
 80026d2:	b2ca      	uxtb	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3301      	adds	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbf0      	blt.n	80026c6 <_read+0x12>
	}

return len;
 80026e4:	687b      	ldr	r3, [r7, #4]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e009      	b.n	8002714 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	60ba      	str	r2, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	dbf1      	blt.n	8002700 <_write+0x12>
	}
	return len;
 800271c:	687b      	ldr	r3, [r7, #4]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_close>:

int _close(int file)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
	return -1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800274c:	605a      	str	r2, [r3, #4]
	return 0;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <_isatty>:

int _isatty(int file)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	return 1;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
	return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
	...

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f002 fee4 	bl	8005584 <__errno>
 80027bc:	4602      	mov	r2, r0
 80027be:	230c      	movs	r3, #12
 80027c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20005000 	.word	0x20005000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	20000308 	.word	0x20000308
 80027f0:	200004e8 	.word	0x200004e8

080027f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002800:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002802:	e003      	b.n	800280c <LoopCopyDataInit>

08002804 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002806:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002808:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800280a:	3104      	adds	r1, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800280c:	480a      	ldr	r0, [pc, #40]	; (8002838 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002810:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002812:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002814:	d3f6      	bcc.n	8002804 <CopyDataInit>
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002818:	e002      	b.n	8002820 <LoopFillZerobss>

0800281a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800281c:	f842 3b04 	str.w	r3, [r2], #4

08002820 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002822:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002824:	d3f9      	bcc.n	800281a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002826:	f7ff ffe5 	bl	80027f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282a:	f002 feb1 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282e:	f7ff fa11 	bl	8001c54 <main>
  bx lr
 8002832:	4770      	bx	lr
  ldr r3, =_sidata
 8002834:	08007d58 	.word	0x08007d58
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800283c:	20000234 	.word	0x20000234
  ldr r2, =_sbss
 8002840:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 8002844:	200004e4 	.word	0x200004e4

08002848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC1_2_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_Init+0x28>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_Init+0x28>)
 8002856:	f043 0310 	orr.w	r3, r3, #16
 800285a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800285c:	2003      	movs	r0, #3
 800285e:	f000 f945 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002862:	2000      	movs	r0, #0
 8002864:	f000 f808 	bl	8002878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002868:	f7ff fd2c 	bl	80022c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000

08002878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x54>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x58>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f95d 	bl	8002b56 <HAL_SYSTICK_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00e      	b.n	80028c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d80a      	bhi.n	80028c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b4:	f000 f925 	bl	8002b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b8:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_InitTick+0x5c>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000058 	.word	0x20000058
 80028d0:	20000060 	.word	0x20000060
 80028d4:	2000005c 	.word	0x2000005c

080028d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_IncTick+0x1c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_IncTick+0x20>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <HAL_IncTick+0x20>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000060 	.word	0x20000060
 80028f8:	200004dc 	.word	0x200004dc

080028fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <HAL_GetTick+0x10>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	200004dc 	.word	0x200004dc

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff fff0 	bl	80028fc <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_Delay+0x40>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002936:	bf00      	nop
 8002938:	f7ff ffe0 	bl	80028fc <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000060 	.word	0x20000060

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <__NVIC_EnableIRQ+0x34>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002acc:	f7ff ff90 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff2d 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff42 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff90 	bl	8002a44 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5f 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff35 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d005      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e051      	b.n	8002c36 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 020e 	bic.w	r2, r2, #14
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_DMA_Abort_IT+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d029      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xa0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_DMA_Abort_IT+0xd4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x9c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_DMA_Abort_IT+0xd8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01a      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x96>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_DMA_Abort_IT+0xdc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d012      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x90>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_DMA_Abort_IT+0xe0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00a      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x8a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_DMA_Abort_IT+0xe4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d102      	bne.n	8002bf4 <HAL_DMA_Abort_IT+0x84>
 8002bee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bf2:	e00e      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf8:	e00b      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfe:	e008      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	e005      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e002      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c10:	2301      	movs	r3, #1
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_DMA_Abort_IT+0xe8>)
 8002c14:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    } 
  }
  return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40020008 	.word	0x40020008
 8002c44:	4002001c 	.word	0x4002001c
 8002c48:	40020030 	.word	0x40020030
 8002c4c:	40020044 	.word	0x40020044
 8002c50:	40020058 	.word	0x40020058
 8002c54:	4002006c 	.word	0x4002006c
 8002c58:	40020000 	.word	0x40020000

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b08b      	sub	sp, #44	; 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6e:	e127      	b.n	8002ec0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c70:	2201      	movs	r2, #1
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8116 	bne.w	8002eba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b12      	cmp	r3, #18
 8002c94:	d034      	beq.n	8002d00 <HAL_GPIO_Init+0xa4>
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d80d      	bhi.n	8002cb6 <HAL_GPIO_Init+0x5a>
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_Init+0x9a>
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d804      	bhi.n	8002cac <HAL_GPIO_Init+0x50>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d031      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d01c      	beq.n	8002ce4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002caa:	e048      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d043      	beq.n	8002d38 <HAL_GPIO_Init+0xdc>
 8002cb0:	2b11      	cmp	r3, #17
 8002cb2:	d01b      	beq.n	8002cec <HAL_GPIO_Init+0x90>
          break;
 8002cb4:	e043      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cb6:	4a89      	ldr	r2, [pc, #548]	; (8002edc <HAL_GPIO_Init+0x280>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d026      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cbc:	4a87      	ldr	r2, [pc, #540]	; (8002edc <HAL_GPIO_Init+0x280>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d806      	bhi.n	8002cd0 <HAL_GPIO_Init+0x74>
 8002cc2:	4a87      	ldr	r2, [pc, #540]	; (8002ee0 <HAL_GPIO_Init+0x284>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d020      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cc8:	4a86      	ldr	r2, [pc, #536]	; (8002ee4 <HAL_GPIO_Init+0x288>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01d      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
          break;
 8002cce:	e036      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cd0:	4a85      	ldr	r2, [pc, #532]	; (8002ee8 <HAL_GPIO_Init+0x28c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d019      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cd6:	4a85      	ldr	r2, [pc, #532]	; (8002eec <HAL_GPIO_Init+0x290>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d016      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cdc:	4a84      	ldr	r2, [pc, #528]	; (8002ef0 <HAL_GPIO_Init+0x294>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
          break;
 8002ce2:	e02c      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	623b      	str	r3, [r7, #32]
          break;
 8002cea:	e028      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	623b      	str	r3, [r7, #32]
          break;
 8002cf4:	e023      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	623b      	str	r3, [r7, #32]
          break;
 8002cfe:	e01e      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	330c      	adds	r3, #12
 8002d06:	623b      	str	r3, [r7, #32]
          break;
 8002d08:	e019      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d12:	2304      	movs	r3, #4
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e012      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d20:	2308      	movs	r3, #8
 8002d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	611a      	str	r2, [r3, #16]
          break;
 8002d2a:	e008      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	615a      	str	r2, [r3, #20]
          break;
 8002d36:	e002      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2bff      	cmp	r3, #255	; 0xff
 8002d42:	d801      	bhi.n	8002d48 <HAL_GPIO_Init+0xec>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	e001      	b.n	8002d4c <HAL_GPIO_Init+0xf0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2bff      	cmp	r3, #255	; 0xff
 8002d52:	d802      	bhi.n	8002d5a <HAL_GPIO_Init+0xfe>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x104>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	3b08      	subs	r3, #8
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	210f      	movs	r1, #15
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	401a      	ands	r2, r3
 8002d72:	6a39      	ldr	r1, [r7, #32]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8096 	beq.w	8002eba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d8e:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_GPIO_Init+0x298>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_GPIO_Init+0x298>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6193      	str	r3, [r2, #24]
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_GPIO_Init+0x298>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002da6:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x29c>)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <HAL_GPIO_Init+0x2a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x19e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4a      	ldr	r2, [pc, #296]	; (8002f00 <HAL_GPIO_Init+0x2a4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x19a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_GPIO_Init+0x2a8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x196>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x192>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e0c:	493a      	ldr	r1, [pc, #232]	; (8002ef8 <HAL_GPIO_Init+0x29c>)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4938      	ldr	r1, [pc, #224]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	4933      	ldr	r1, [pc, #204]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	492e      	ldr	r1, [pc, #184]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
 8002e5a:	e006      	b.n	8002e6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4929      	ldr	r1, [pc, #164]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e76:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	4924      	ldr	r1, [pc, #144]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
 8002e82:	e006      	b.n	8002e92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	491f      	ldr	r1, [pc, #124]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
 8002eaa:	e006      	b.n	8002eba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4915      	ldr	r1, [pc, #84]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f47f aed0 	bne.w	8002c70 <HAL_GPIO_Init+0x14>
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	372c      	adds	r7, #44	; 0x2c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	10210000 	.word	0x10210000
 8002ee0:	10110000 	.word	0x10110000
 8002ee4:	10120000 	.word	0x10120000
 8002ee8:	10310000 	.word	0x10310000
 8002eec:	10320000 	.word	0x10320000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	40010c00 	.word	0x40010c00
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e001      	b.n	8002f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4e:	787b      	ldrb	r3, [r7, #1]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f5a:	e003      	b.n	8002f64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	611a      	str	r2, [r3, #16]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e26c      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8087 	beq.w	800309e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f90:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d112      	bne.n	8002fce <HAL_RCC_OscConfig+0x5e>
 8002fa8:	4b8c      	ldr	r3, [pc, #560]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb6:	4b89      	ldr	r3, [pc, #548]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d06c      	beq.n	800309c <HAL_RCC_OscConfig+0x12c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d168      	bne.n	800309c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e246      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x76>
 8002fd8:	4b80      	ldr	r3, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	e02e      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x98>
 8002fee:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7a      	ldr	r2, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a77      	ldr	r2, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e01d      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0xbc>
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a71      	ldr	r2, [pc, #452]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a67      	ldr	r2, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7ff fc56 	bl	80028fc <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7ff fc52 	bl	80028fc <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1fa      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xe4>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fc42 	bl	80028fc <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7ff fc3e 	bl	80028fc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1e6      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x10c>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030aa:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x18c>
 80030c2:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_RCC_OscConfig+0x176>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1ba      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4939      	ldr	r1, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	e03a      	b.n	8003172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x270>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7ff fbf7 	bl	80028fc <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7ff fbf3 	bl	80028fc <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e19b      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4927      	ldr	r1, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x270>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff fbd6 	bl	80028fc <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7ff fbd2 	bl	80028fc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e17a      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d03a      	beq.n	80031f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d019      	beq.n	80031ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7ff fbb6 	bl	80028fc <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7ff fbb2 	bl	80028fc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e15a      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f000 faa8 	bl	8003708 <RCC_Delay>
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7ff fb9c 	bl	80028fc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c6:	e00f      	b.n	80031e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7ff fb98 	bl	80028fc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d908      	bls.n	80031e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e140      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	42420000 	.word	0x42420000
 80031e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b9e      	ldr	r3, [pc, #632]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e9      	bne.n	80031c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a6 	beq.w	800334e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b97      	ldr	r3, [pc, #604]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b94      	ldr	r3, [pc, #592]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a93      	ldr	r2, [pc, #588]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b91      	ldr	r3, [pc, #580]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b8e      	ldr	r3, [pc, #568]	; (8003468 <HAL_RCC_OscConfig+0x4f8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d118      	bne.n	800326c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x4f8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a8a      	ldr	r2, [pc, #552]	; (8003468 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7ff fb59 	bl	80028fc <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7ff fb55 	bl	80028fc <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b64      	cmp	r3, #100	; 0x64
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0fd      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x312>
 8003274:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a7a      	ldr	r2, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	e02d      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x334>
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a75      	ldr	r2, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	4b73      	ldr	r3, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a72      	ldr	r2, [pc, #456]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	e01c      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x356>
 80032ac:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a69      	ldr	r2, [pc, #420]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6213      	str	r3, [r2, #32]
 80032c4:	e00b      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a66      	ldr	r2, [pc, #408]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	4b64      	ldr	r3, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a63      	ldr	r2, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d015      	beq.n	8003312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7ff fb09 	bl	80028fc <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7ff fb05 	bl	80028fc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0ab      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	4b57      	ldr	r3, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ee      	beq.n	80032ee <HAL_RCC_OscConfig+0x37e>
 8003310:	e014      	b.n	800333c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff faf3 	bl	80028fc <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7ff faef 	bl	80028fc <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e095      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ee      	bne.n	800331a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a47      	ldr	r2, [pc, #284]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8081 	beq.w	800345a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d061      	beq.n	8003428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d146      	bne.n	80033fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_OscConfig+0x4fc>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7ff fac3 	bl	80028fc <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7ff fabf 	bl	80028fc <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e067      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d108      	bne.n	80033b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	492d      	ldr	r1, [pc, #180]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a19      	ldr	r1, [r3, #32]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	430b      	orrs	r3, r1
 80033c6:	4927      	ldr	r1, [pc, #156]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <HAL_RCC_OscConfig+0x4fc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7ff fa93 	bl	80028fc <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033da:	f7ff fa8f 	bl	80028fc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e037      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x46a>
 80033f8:	e02f      	b.n	800345a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_RCC_OscConfig+0x4fc>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff fa7c 	bl	80028fc <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7ff fa78 	bl	80028fc <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e020      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x498>
 8003426:	e018      	b.n	800345a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e013      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x4f4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	429a      	cmp	r2, r3
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	42420060 	.word	0x42420060

08003470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0d0      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003484:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d910      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b67      	ldr	r3, [pc, #412]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	4965      	ldr	r1, [pc, #404]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b8      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034cc:	4b59      	ldr	r3, [pc, #356]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a58      	ldr	r2, [pc, #352]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a52      	ldr	r2, [pc, #328]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	494d      	ldr	r1, [pc, #308]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d040      	beq.n	8003590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d115      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e073      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06b      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f023 0203 	bic.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4936      	ldr	r1, [pc, #216]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003560:	f7ff f9cc 	bl	80028fc <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	e00a      	b.n	800357e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003568:	f7ff f9c8 	bl	80028fc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e053      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 020c 	and.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d1eb      	bne.n	8003568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d210      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	4922      	ldr	r1, [pc, #136]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e032      	b.n	8003626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4916      	ldr	r1, [pc, #88]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fe:	f000 f821 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8003602:	4601      	mov	r1, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	5cd3      	ldrb	r3, [r2, r3]
 8003612:	fa21 f303 	lsr.w	r3, r1, r3
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1cc>)
 8003618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1d0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f92a 	bl	8002878 <HAL_InitTick>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40022000 	.word	0x40022000
 8003634:	40021000 	.word	0x40021000
 8003638:	08007a6c 	.word	0x08007a6c
 800363c:	20000058 	.word	0x20000058
 8003640:	2000005c 	.word	0x2000005c

08003644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b490      	push	{r4, r7}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800364c:	1d3c      	adds	r4, r7, #4
 800364e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003654:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b04      	cmp	r3, #4
 800367c:	d002      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x40>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d003      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x46>
 8003682:	e02d      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003686:	623b      	str	r3, [r7, #32]
      break;
 8003688:	e02d      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	0c9b      	lsrs	r3, r3, #18
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003696:	4413      	add	r3, r2
 8003698:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800369c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	0c5b      	lsrs	r3, r3, #17
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036b6:	4413      	add	r3, r2
 80036b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c2:	fb02 f203 	mul.w	r2, r2, r3
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	e004      	b.n	80036da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	623b      	str	r3, [r7, #32]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e2:	623b      	str	r3, [r7, #32]
      break;
 80036e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e6:	6a3b      	ldr	r3, [r7, #32]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3728      	adds	r7, #40	; 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc90      	pop	{r4, r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	08007a58 	.word	0x08007a58
 80036f8:	08007a68 	.word	0x08007a68
 80036fc:	40021000 	.word	0x40021000
 8003700:	007a1200 	.word	0x007a1200
 8003704:	003d0900 	.word	0x003d0900

08003708 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <RCC_Delay+0x34>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <RCC_Delay+0x38>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003724:	bf00      	nop
  }
  while (Delay --);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	60fa      	str	r2, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <RCC_Delay+0x1c>
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000058 	.word	0x20000058
 8003740:	10624dd3 	.word	0x10624dd3

08003744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e076      	b.n	8003844 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003766:	d009      	beq.n	800377c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
 800376e:	e005      	b.n	800377c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe fdc6 	bl	8002328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	ea42 0103 	orr.w	r1, r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	0c1a      	lsrs	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f002 0204 	and.w	r2, r2, #4
 8003822:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003832:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_SPI_TransmitReceive_IT+0x20>
 8003868:	2302      	movs	r3, #2
 800386a:	e075      	b.n	8003958 <HAL_SPI_TransmitReceive_IT+0x10c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800387a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003882:	7dbb      	ldrb	r3, [r7, #22]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d00d      	beq.n	80038a4 <HAL_SPI_TransmitReceive_IT+0x58>
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388e:	d106      	bne.n	800389e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <HAL_SPI_TransmitReceive_IT+0x52>
 8003898:	7dbb      	ldrb	r3, [r7, #22]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038a2:	e054      	b.n	800394e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038ba:	e048      	b.n	800394e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d003      	beq.n	80038d0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2205      	movs	r2, #5
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	887a      	ldrh	r2, [r7, #2]
 80038e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	887a      	ldrh	r2, [r7, #2]
 80038f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
 800390e:	e005      	b.n	800391c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_SPI_TransmitReceive_IT+0x120>)
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a15      	ldr	r2, [pc, #84]	; (8003970 <HAL_SPI_TransmitReceive_IT+0x124>)
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800392a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d008      	beq.n	800394c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e000      	b.n	800394e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800394c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	08003c55 	.word	0x08003c55
 8003968:	08003cb5 	.word	0x08003cb5
 800396c:	08003b91 	.word	0x08003b91
 8003970:	08003bf5 	.word	0x08003bf5

08003974 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	099b      	lsrs	r3, r3, #6
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
    return;
 80039b6:	e0bf      	b.n	8003b38 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_SPI_IRQHandler+0x66>
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	09db      	lsrs	r3, r3, #7
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
    return;
 80039d8:	e0ae      	b.n	8003b38 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_SPI_IRQHandler+0x80>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a2 	beq.w	8003b38 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 809b 	beq.w	8003b38 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d023      	beq.n	8003a56 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d011      	beq.n	8003a3e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0204 	orr.w	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	e00b      	b.n	8003a56 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
        return;
 8003a54:	e070      	b.n	8003b38 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d050      	beq.n	8003b36 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aa2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_SPI_IRQHandler+0x14c>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d034      	beq.n	8003b2a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0203 	bic.w	r2, r2, #3
 8003ace:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d011      	beq.n	8003afc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <HAL_SPI_IRQHandler+0x1cc>)
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff f843 	bl	8002b70 <HAL_DMA_Abort_IT>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <HAL_SPI_IRQHandler+0x1cc>)
 8003b0a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f82d 	bl	8002b70 <HAL_DMA_Abort_IT>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003b28:	e003      	b.n	8003b32 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f813 	bl	8003b56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b30:	e000      	b.n	8003b34 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003b32:	bf00      	nop
    return;
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
  }
}
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	08003b69 	.word	0x08003b69

08003b44 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff ffe7 	bl	8003b56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f103 020c 	add.w	r2, r3, #12
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	7812      	ldrb	r2, [r2, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10f      	bne.n	8003bec <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f93a 	bl	8003e60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10f      	bne.n	8003c4c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f90a 	bl	8003e60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	b292      	uxth	r2, r2
 8003c68:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8da 	bl	8003e60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8ab 	bl	8003e60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d24:	f7fe fdea 	bl	80028fc <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d34:	f7fe fde2 	bl	80028fc <HAL_GetTick>
 8003d38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	015b      	lsls	r3, r3, #5
 8003d40:	0d1b      	lsrs	r3, r3, #20
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4a:	e054      	b.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d52:	d050      	beq.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d54:	f7fe fdd2 	bl	80028fc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13d      	bne.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d82:	d111      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	d004      	beq.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d107      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d10f      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e017      	b.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d19b      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000058 	.word	0x20000058

08003e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff ff6a 	bl	8003d14 <SPI_WaitFlagStateUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e000      	b.n	8003e58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003e68:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <SPI_CloseRxTx_ISR+0xe0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a35      	ldr	r2, [pc, #212]	; (8003f44 <SPI_CloseRxTx_ISR+0xe4>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0a5b      	lsrs	r3, r3, #9
 8003e74:	2264      	movs	r2, #100	; 0x64
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e7c:	f7fe fd3e 	bl	80028fc <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0220 	bic.w	r2, r2, #32
 8003e90:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ea4:	e009      	b.n	8003eba <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0eb      	beq.n	8003e92 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	2164      	movs	r1, #100	; 0x64
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ffb0 	bl	8003e24 <SPI_EndRxTxTransaction>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d115      	bne.n	8003f28 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d107      	bne.n	8003f18 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fe17 	bl	8003b44 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003f16:	e00e      	b.n	8003f36 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fd fe31 	bl	8001b88 <HAL_SPI_TxRxCpltCallback>
}
 8003f26:	e006      	b.n	8003f36 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff fe10 	bl	8003b56 <HAL_SPI_ErrorCallback>
}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000058 	.word	0x20000058
 8003f44:	057619f1 	.word	0x057619f1

08003f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e041      	b.n	8003fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fe fa3c 	bl	80023ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f000 ff94 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d001      	beq.n	8004000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e032      	b.n	8004066 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <HAL_TIM_Base_Start+0x88>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_TIM_Base_Start+0x48>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d009      	beq.n	8004030 <HAL_TIM_Base_Start+0x48>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <HAL_TIM_Base_Start+0x8c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIM_Base_Start+0x48>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_TIM_Base_Start+0x90>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d111      	bne.n	8004054 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d010      	beq.n	8004064 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	e007      	b.n	8004064 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800

0800407c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d001      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e03a      	b.n	800410a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_TIM_Base_Start_IT+0x98>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x58>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x58>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <HAL_TIM_Base_Start_IT+0x9c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x58>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <HAL_TIM_Base_Start_IT+0xa0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d010      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	e007      	b.n	8004108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800

08004120 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e041      	b.n	80041b6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f839 	bl	80041be <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 fea8 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_OC_Start_IT+0x24>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e022      	b.n	800423a <HAL_TIM_OC_Start_IT+0x6a>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d109      	bne.n	800420e <HAL_TIM_OC_Start_IT+0x3e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e015      	b.n	800423a <HAL_TIM_OC_Start_IT+0x6a>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d109      	bne.n	8004228 <HAL_TIM_OC_Start_IT+0x58>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e008      	b.n	800423a <HAL_TIM_OC_Start_IT+0x6a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0a4      	b.n	800438c <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_TIM_OC_Start_IT+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004250:	e013      	b.n	800427a <HAL_TIM_OC_Start_IT+0xaa>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d104      	bne.n	8004262 <HAL_TIM_OC_Start_IT+0x92>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004260:	e00b      	b.n	800427a <HAL_TIM_OC_Start_IT+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d104      	bne.n	8004272 <HAL_TIM_OC_Start_IT+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	e003      	b.n	800427a <HAL_TIM_OC_Start_IT+0xaa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d841      	bhi.n	8004304 <HAL_TIM_OC_Start_IT+0x134>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <HAL_TIM_OC_Start_IT+0xb8>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042bd 	.word	0x080042bd
 800428c:	08004305 	.word	0x08004305
 8004290:	08004305 	.word	0x08004305
 8004294:	08004305 	.word	0x08004305
 8004298:	080042cf 	.word	0x080042cf
 800429c:	08004305 	.word	0x08004305
 80042a0:	08004305 	.word	0x08004305
 80042a4:	08004305 	.word	0x08004305
 80042a8:	080042e1 	.word	0x080042e1
 80042ac:	08004305 	.word	0x08004305
 80042b0:	08004305 	.word	0x08004305
 80042b4:	08004305 	.word	0x08004305
 80042b8:	080042f3 	.word	0x080042f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0202 	orr.w	r2, r2, #2
 80042ca:	60da      	str	r2, [r3, #12]
      break;
 80042cc:	e01b      	b.n	8004306 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0204 	orr.w	r2, r2, #4
 80042dc:	60da      	str	r2, [r3, #12]
      break;
 80042de:	e012      	b.n	8004306 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0208 	orr.w	r2, r2, #8
 80042ee:	60da      	str	r2, [r3, #12]
      break;
 80042f0:	e009      	b.n	8004306 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0210 	orr.w	r2, r2, #16
 8004300:	60da      	str	r2, [r3, #12]
      break;
 8004302:	e000      	b.n	8004306 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8004304:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f850 	bl	80053b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_TIM_OC_Start_IT+0x1c4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d107      	bne.n	800432e <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_TIM_OC_Start_IT+0x1c4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_TIM_OC_Start_IT+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d009      	beq.n	8004356 <HAL_TIM_OC_Start_IT+0x186>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a14      	ldr	r2, [pc, #80]	; (8004398 <HAL_TIM_OC_Start_IT+0x1c8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIM_OC_Start_IT+0x186>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a12      	ldr	r2, [pc, #72]	; (800439c <HAL_TIM_OC_Start_IT+0x1cc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d111      	bne.n	800437a <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b06      	cmp	r3, #6
 8004366:	d010      	beq.n	800438a <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004378:	e007      	b.n	800438a <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800

080043a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f839 	bl	800443e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fd68 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start_IT+0x24>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e022      	b.n	80044ba <HAL_TIM_PWM_Start_IT+0x6a>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start_IT+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e015      	b.n	80044ba <HAL_TIM_PWM_Start_IT+0x6a>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start_IT+0x58>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e008      	b.n	80044ba <HAL_TIM_PWM_Start_IT+0x6a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0a4      	b.n	800460c <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start_IT+0x82>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	e013      	b.n	80044fa <HAL_TIM_PWM_Start_IT+0xaa>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start_IT+0x92>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_PWM_Start_IT+0xaa>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start_IT+0xa2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	e003      	b.n	80044fa <HAL_TIM_PWM_Start_IT+0xaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	d841      	bhi.n	8004584 <HAL_TIM_PWM_Start_IT+0x134>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	0800453d 	.word	0x0800453d
 800450c:	08004585 	.word	0x08004585
 8004510:	08004585 	.word	0x08004585
 8004514:	08004585 	.word	0x08004585
 8004518:	0800454f 	.word	0x0800454f
 800451c:	08004585 	.word	0x08004585
 8004520:	08004585 	.word	0x08004585
 8004524:	08004585 	.word	0x08004585
 8004528:	08004561 	.word	0x08004561
 800452c:	08004585 	.word	0x08004585
 8004530:	08004585 	.word	0x08004585
 8004534:	08004585 	.word	0x08004585
 8004538:	08004573 	.word	0x08004573
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0202 	orr.w	r2, r2, #2
 800454a:	60da      	str	r2, [r3, #12]
      break;
 800454c:	e01b      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0204 	orr.w	r2, r2, #4
 800455c:	60da      	str	r2, [r3, #12]
      break;
 800455e:	e012      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0208 	orr.w	r2, r2, #8
 800456e:	60da      	str	r2, [r3, #12]
      break;
 8004570:	e009      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0210 	orr.w	r2, r2, #16
 8004580:	60da      	str	r2, [r3, #12]
      break;
 8004582:	e000      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004584:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 ff10 	bl	80053b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d107      	bne.n	80045ae <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a18      	ldr	r2, [pc, #96]	; (8004614 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_PWM_Start_IT+0x186>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_PWM_Start_IT+0x186>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_PWM_Start_IT+0x186>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <HAL_TIM_PWM_Start_IT+0x1cc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800

08004620 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e093      	b.n	800475c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fd ff07 	bl	800245c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004664:	f023 0307 	bic.w	r3, r3, #7
 8004668:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f000 fc1d 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	4313      	orrs	r3, r2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046c0:	f023 030c 	bic.w	r3, r3, #12
 80046c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	4313      	orrs	r3, r2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	011a      	lsls	r2, r3, #4
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	031b      	lsls	r3, r3, #12
 80046f0:	4313      	orrs	r3, r2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	4313      	orrs	r3, r2
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004774:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800477c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004784:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800478c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d110      	bne.n	80047b6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800479a:	7b7b      	ldrb	r3, [r7, #13]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e088      	b.n	80048b6 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	e031      	b.n	800481a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d110      	bne.n	80047de <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047bc:	7bbb      	ldrb	r3, [r7, #14]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047c2:	7b3b      	ldrb	r3, [r7, #12]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e074      	b.n	80048b6 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047dc:	e01d      	b.n	800481a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d108      	bne.n	80047f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e4:	7bbb      	ldrb	r3, [r7, #14]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ea:	7b7b      	ldrb	r3, [r7, #13]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d102      	bne.n	80047f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047f0:	7b3b      	ldrb	r3, [r7, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e05d      	b.n	80048b6 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_TIM_Encoder_Start_IT+0xc2>
 8004820:	2b04      	cmp	r3, #4
 8004822:	d010      	beq.n	8004846 <HAL_TIM_Encoder_Start_IT+0xe2>
 8004824:	e01f      	b.n	8004866 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fdc0 	bl	80053b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0202 	orr.w	r2, r2, #2
 8004842:	60da      	str	r2, [r3, #12]
      break;
 8004844:	e02e      	b.n	80048a4 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2201      	movs	r2, #1
 800484c:	2104      	movs	r1, #4
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fdb0 	bl	80053b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0204 	orr.w	r2, r2, #4
 8004862:	60da      	str	r2, [r3, #12]
      break;
 8004864:	e01e      	b.n	80048a4 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2201      	movs	r2, #1
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fda0 	bl	80053b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2201      	movs	r2, #1
 800487a:	2104      	movs	r1, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fd99 	bl	80053b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0202 	orr.w	r2, r2, #2
 8004890:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0204 	orr.w	r2, r2, #4
 80048a0:	60da      	str	r2, [r3, #12]
      break;
 80048a2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d122      	bne.n	800491a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d11b      	bne.n	800491a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0202 	mvn.w	r2, #2
 80048ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fabb 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004906:	e005      	b.n	8004914 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 faae 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fabd 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d122      	bne.n	800496e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d11b      	bne.n	800496e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f06f 0204 	mvn.w	r2, #4
 800493e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa91 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 800495a:	e005      	b.n	8004968 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa84 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa93 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b08      	cmp	r3, #8
 800497a:	d122      	bne.n	80049c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d11b      	bne.n	80049c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0208 	mvn.w	r2, #8
 8004992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2204      	movs	r2, #4
 8004998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa67 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 80049ae:	e005      	b.n	80049bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa5a 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa69 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d122      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d11b      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f06f 0210 	mvn.w	r2, #16
 80049e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2208      	movs	r2, #8
 80049ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fa3d 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004a02:	e005      	b.n	8004a10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fa30 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa3f 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d10e      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f06f 0201 	mvn.w	r2, #1
 8004a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc fcb7 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b80      	cmp	r3, #128	; 0x80
 8004a4e:	d10e      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fd7f 	bl	800556c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d10e      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d107      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa03 	bl	8004ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d107      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0220 	mvn.w	r2, #32
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fd4a 	bl	800555a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_OC_ConfigChannel+0x1a>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e046      	b.n	8004b78 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	d839      	bhi.n	8004b6c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004b6d 	.word	0x08004b6d
 8004b10:	08004b43 	.word	0x08004b43
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b51 	.word	0x08004b51
 8004b24:	08004b6d 	.word	0x08004b6d
 8004b28:	08004b6d 	.word	0x08004b6d
 8004b2c:	08004b6d 	.word	0x08004b6d
 8004b30:	08004b5f 	.word	0x08004b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa1c 	bl	8004f78 <TIM_OC1_SetConfig>
      break;
 8004b40:	e015      	b.n	8004b6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fa7b 	bl	8005044 <TIM_OC2_SetConfig>
      break;
 8004b4e:	e00e      	b.n	8004b6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fade 	bl	8005118 <TIM_OC3_SetConfig>
      break;
 8004b5c:	e007      	b.n	8004b6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb41 	bl	80051ec <TIM_OC4_SetConfig>
      break;
 8004b6a:	e000      	b.n	8004b6e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0ac      	b.n	8004cf4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	f200 809f 	bhi.w	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004ce9 	.word	0x08004ce9
 8004bb8:	08004ce9 	.word	0x08004ce9
 8004bbc:	08004ce9 	.word	0x08004ce9
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004ce9 	.word	0x08004ce9
 8004bc8:	08004ce9 	.word	0x08004ce9
 8004bcc:	08004ce9 	.word	0x08004ce9
 8004bd0:	08004c67 	.word	0x08004c67
 8004bd4:	08004ce9 	.word	0x08004ce9
 8004bd8:	08004ce9 	.word	0x08004ce9
 8004bdc:	08004ce9 	.word	0x08004ce9
 8004be0:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f9c4 	bl	8004f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]
      break;
 8004c22:	e062      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fa0a 	bl	8005044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	619a      	str	r2, [r3, #24]
      break;
 8004c64:	e041      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fa53 	bl	8005118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0208 	orr.w	r2, r2, #8
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0204 	bic.w	r2, r2, #4
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	61da      	str	r2, [r3, #28]
      break;
 8004ca4:	e021      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fa9d 	bl	80051ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	61da      	str	r2, [r3, #28]
      break;
 8004ce6:	e000      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0a6      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x166>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d067      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0x120>
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d80b      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x6c>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d073      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0x140>
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d802      	bhi.n	8004d5e <HAL_TIM_ConfigClockSource+0x62>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d06f      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d5c:	e078      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d06c      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0x140>
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d06a      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004d66:	e073      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d00d      	beq.n	8004d88 <HAL_TIM_ConfigClockSource+0x8c>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d804      	bhi.n	8004d7a <HAL_TIM_ConfigClockSource+0x7e>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	d033      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0xe0>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d041      	beq.n	8004dfc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004d78:	e06a      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d066      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x152>
 8004d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d84:	d017      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d86:	e063      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f000 faed 	bl	8005376 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004daa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
      break;
 8004db4:	e04c      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6899      	ldr	r1, [r3, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f000 fad6 	bl	8005376 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd8:	609a      	str	r2, [r3, #8]
      break;
 8004dda:	e039      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	461a      	mov	r2, r3
 8004dea:	f000 fa4d 	bl	8005288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2150      	movs	r1, #80	; 0x50
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 faa4 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004dfa:	e029      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f000 fa6b 	bl	80052e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2160      	movs	r1, #96	; 0x60
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa94 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004e1a:	e019      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f000 fa2d 	bl	8005288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2140      	movs	r1, #64	; 0x40
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fa84 	bl	8005342 <TIM_ITRx_SetConfig>
      break;
 8004e3a:	e009      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fa7b 	bl	8005342 <TIM_ITRx_SetConfig>
        break;
 8004e4c:	e000      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr
	...

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_Base_SetConfig+0xb8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0x30>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0x30>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <TIM_Base_SetConfig+0xbc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x30>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <TIM_Base_SetConfig+0xc0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <TIM_Base_SetConfig+0xb8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_Base_SetConfig+0x62>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d007      	beq.n	8004f16 <TIM_Base_SetConfig+0x62>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <TIM_Base_SetConfig+0xbc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_Base_SetConfig+0x62>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <TIM_Base_SetConfig+0xc0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <TIM_Base_SetConfig+0xb8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800

08004f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0302 	bic.w	r3, r3, #2
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <TIM_OC1_SetConfig+0xc8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10c      	bne.n	8004fee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0308 	bic.w	r3, r3, #8
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <TIM_OC1_SetConfig+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00

08005044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0210 	bic.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0320 	bic.w	r3, r3, #32
 800508e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <TIM_OC2_SetConfig+0xd0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10d      	bne.n	80050c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a14      	ldr	r2, [pc, #80]	; (8005114 <TIM_OC2_SetConfig+0xd0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d113      	bne.n	80050f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00

08005118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <TIM_OC3_SetConfig+0xd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10d      	bne.n	8005192 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800517c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <TIM_OC3_SetConfig+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40012c00 	.word	0x40012c00

080051ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	031b      	lsls	r3, r3, #12
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <TIM_OC4_SetConfig+0x98>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d109      	bne.n	8005260 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	019b      	lsls	r3, r3, #6
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	40012c00 	.word	0x40012c00

08005288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0201 	bic.w	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 030a 	bic.w	r3, r3, #10
 80052c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 0210 	bic.w	r2, r3, #16
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800530e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	031b      	lsls	r3, r3, #12
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	f043 0307 	orr.w	r3, r3, #7
 8005364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005376:	b480      	push	{r7}
 8005378:	b087      	sub	sp, #28
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005390:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	021a      	lsls	r2, r3, #8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	431a      	orrs	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	609a      	str	r2, [r3, #8]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2201      	movs	r2, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	401a      	ands	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005410:	2302      	movs	r3, #2
 8005412:	e046      	b.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a16      	ldr	r2, [pc, #88]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d009      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10c      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800

080054b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e03d      	b.n	8005550 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <atof>:
 800557e:	2100      	movs	r1, #0
 8005580:	f000 beba 	b.w	80062f8 <strtod>

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000064 	.word	0x20000064

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	2500      	movs	r5, #0
 8005594:	4e0c      	ldr	r6, [pc, #48]	; (80055c8 <__libc_init_array+0x38>)
 8005596:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005598:	1ba4      	subs	r4, r4, r6
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	42a5      	cmp	r5, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	f002 fa32 	bl	8007a08 <_init>
 80055a4:	2500      	movs	r5, #0
 80055a6:	4e0a      	ldr	r6, [pc, #40]	; (80055d0 <__libc_init_array+0x40>)
 80055a8:	4c0a      	ldr	r4, [pc, #40]	; (80055d4 <__libc_init_array+0x44>)
 80055aa:	1ba4      	subs	r4, r4, r6
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	42a5      	cmp	r5, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055b8:	4798      	blx	r3
 80055ba:	3501      	adds	r5, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c2:	4798      	blx	r3
 80055c4:	3501      	adds	r5, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08007d50 	.word	0x08007d50
 80055cc:	08007d50 	.word	0x08007d50
 80055d0:	08007d50 	.word	0x08007d50
 80055d4:	08007d54 	.word	0x08007d54

080055d8 <memset>:
 80055d8:	4603      	mov	r3, r0
 80055da:	4402      	add	r2, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	f803 1b01 	strb.w	r1, [r3], #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <_puts_r>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	460e      	mov	r6, r1
 80055ec:	4605      	mov	r5, r0
 80055ee:	b118      	cbz	r0, 80055f8 <_puts_r+0x10>
 80055f0:	6983      	ldr	r3, [r0, #24]
 80055f2:	b90b      	cbnz	r3, 80055f8 <_puts_r+0x10>
 80055f4:	f001 f842 	bl	800667c <__sinit>
 80055f8:	69ab      	ldr	r3, [r5, #24]
 80055fa:	68ac      	ldr	r4, [r5, #8]
 80055fc:	b913      	cbnz	r3, 8005604 <_puts_r+0x1c>
 80055fe:	4628      	mov	r0, r5
 8005600:	f001 f83c 	bl	800667c <__sinit>
 8005604:	4b23      	ldr	r3, [pc, #140]	; (8005694 <_puts_r+0xac>)
 8005606:	429c      	cmp	r4, r3
 8005608:	d117      	bne.n	800563a <_puts_r+0x52>
 800560a:	686c      	ldr	r4, [r5, #4]
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	071b      	lsls	r3, r3, #28
 8005610:	d51d      	bpl.n	800564e <_puts_r+0x66>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	b1db      	cbz	r3, 800564e <_puts_r+0x66>
 8005616:	3e01      	subs	r6, #1
 8005618:	68a3      	ldr	r3, [r4, #8]
 800561a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800561e:	3b01      	subs	r3, #1
 8005620:	60a3      	str	r3, [r4, #8]
 8005622:	b9e9      	cbnz	r1, 8005660 <_puts_r+0x78>
 8005624:	2b00      	cmp	r3, #0
 8005626:	da2e      	bge.n	8005686 <_puts_r+0x9e>
 8005628:	4622      	mov	r2, r4
 800562a:	210a      	movs	r1, #10
 800562c:	4628      	mov	r0, r5
 800562e:	f000 fe75 	bl	800631c <__swbuf_r>
 8005632:	3001      	adds	r0, #1
 8005634:	d011      	beq.n	800565a <_puts_r+0x72>
 8005636:	200a      	movs	r0, #10
 8005638:	e011      	b.n	800565e <_puts_r+0x76>
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <_puts_r+0xb0>)
 800563c:	429c      	cmp	r4, r3
 800563e:	d101      	bne.n	8005644 <_puts_r+0x5c>
 8005640:	68ac      	ldr	r4, [r5, #8]
 8005642:	e7e3      	b.n	800560c <_puts_r+0x24>
 8005644:	4b15      	ldr	r3, [pc, #84]	; (800569c <_puts_r+0xb4>)
 8005646:	429c      	cmp	r4, r3
 8005648:	bf08      	it	eq
 800564a:	68ec      	ldreq	r4, [r5, #12]
 800564c:	e7de      	b.n	800560c <_puts_r+0x24>
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f000 feb5 	bl	80063c0 <__swsetup_r>
 8005656:	2800      	cmp	r0, #0
 8005658:	d0dd      	beq.n	8005616 <_puts_r+0x2e>
 800565a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	2b00      	cmp	r3, #0
 8005662:	da04      	bge.n	800566e <_puts_r+0x86>
 8005664:	69a2      	ldr	r2, [r4, #24]
 8005666:	429a      	cmp	r2, r3
 8005668:	dc06      	bgt.n	8005678 <_puts_r+0x90>
 800566a:	290a      	cmp	r1, #10
 800566c:	d004      	beq.n	8005678 <_puts_r+0x90>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	7019      	strb	r1, [r3, #0]
 8005676:	e7cf      	b.n	8005618 <_puts_r+0x30>
 8005678:	4622      	mov	r2, r4
 800567a:	4628      	mov	r0, r5
 800567c:	f000 fe4e 	bl	800631c <__swbuf_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d1c9      	bne.n	8005618 <_puts_r+0x30>
 8005684:	e7e9      	b.n	800565a <_puts_r+0x72>
 8005686:	200a      	movs	r0, #10
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	7018      	strb	r0, [r3, #0]
 8005690:	e7e5      	b.n	800565e <_puts_r+0x76>
 8005692:	bf00      	nop
 8005694:	08007b00 	.word	0x08007b00
 8005698:	08007b20 	.word	0x08007b20
 800569c:	08007ae0 	.word	0x08007ae0

080056a0 <puts>:
 80056a0:	4b02      	ldr	r3, [pc, #8]	; (80056ac <puts+0xc>)
 80056a2:	4601      	mov	r1, r0
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	f7ff bf9f 	b.w	80055e8 <_puts_r>
 80056aa:	bf00      	nop
 80056ac:	20000064 	.word	0x20000064

080056b0 <sulp>:
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	460f      	mov	r7, r1
 80056b6:	4690      	mov	r8, r2
 80056b8:	f001 fee0 	bl	800747c <__ulp>
 80056bc:	4604      	mov	r4, r0
 80056be:	460d      	mov	r5, r1
 80056c0:	f1b8 0f00 	cmp.w	r8, #0
 80056c4:	d011      	beq.n	80056ea <sulp+0x3a>
 80056c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80056ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dd0b      	ble.n	80056ea <sulp+0x3a>
 80056d2:	2400      	movs	r4, #0
 80056d4:	051b      	lsls	r3, r3, #20
 80056d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80056da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80056de:	4622      	mov	r2, r4
 80056e0:	462b      	mov	r3, r5
 80056e2:	f7fa fef9 	bl	80004d8 <__aeabi_dmul>
 80056e6:	4604      	mov	r4, r0
 80056e8:	460d      	mov	r5, r1
 80056ea:	4620      	mov	r0, r4
 80056ec:	4629      	mov	r1, r5
 80056ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f2:	0000      	movs	r0, r0
 80056f4:	0000      	movs	r0, r0
	...

080056f8 <_strtod_l>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	461f      	mov	r7, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	b0a1      	sub	sp, #132	; 0x84
 8005702:	4683      	mov	fp, r0
 8005704:	4638      	mov	r0, r7
 8005706:	460e      	mov	r6, r1
 8005708:	9217      	str	r2, [sp, #92]	; 0x5c
 800570a:	931c      	str	r3, [sp, #112]	; 0x70
 800570c:	f001 fb68 	bl	8006de0 <__localeconv_l>
 8005710:	4680      	mov	r8, r0
 8005712:	6800      	ldr	r0, [r0, #0]
 8005714:	f7fa fd1c 	bl	8000150 <strlen>
 8005718:	f04f 0900 	mov.w	r9, #0
 800571c:	4604      	mov	r4, r0
 800571e:	f04f 0a00 	mov.w	sl, #0
 8005722:	961b      	str	r6, [sp, #108]	; 0x6c
 8005724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	2a0d      	cmp	r2, #13
 800572a:	d832      	bhi.n	8005792 <_strtod_l+0x9a>
 800572c:	2a09      	cmp	r2, #9
 800572e:	d236      	bcs.n	800579e <_strtod_l+0xa6>
 8005730:	2a00      	cmp	r2, #0
 8005732:	d03e      	beq.n	80057b2 <_strtod_l+0xba>
 8005734:	2300      	movs	r3, #0
 8005736:	930d      	str	r3, [sp, #52]	; 0x34
 8005738:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800573a:	782b      	ldrb	r3, [r5, #0]
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	f040 80ac 	bne.w	800589a <_strtod_l+0x1a2>
 8005742:	786b      	ldrb	r3, [r5, #1]
 8005744:	2b58      	cmp	r3, #88	; 0x58
 8005746:	d001      	beq.n	800574c <_strtod_l+0x54>
 8005748:	2b78      	cmp	r3, #120	; 0x78
 800574a:	d167      	bne.n	800581c <_strtod_l+0x124>
 800574c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574e:	9702      	str	r7, [sp, #8]
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	ab1c      	add	r3, sp, #112	; 0x70
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4a89      	ldr	r2, [pc, #548]	; (800597c <_strtod_l+0x284>)
 8005758:	ab1d      	add	r3, sp, #116	; 0x74
 800575a:	a91b      	add	r1, sp, #108	; 0x6c
 800575c:	4658      	mov	r0, fp
 800575e:	f001 f867 	bl	8006830 <__gethex>
 8005762:	f010 0407 	ands.w	r4, r0, #7
 8005766:	4606      	mov	r6, r0
 8005768:	d005      	beq.n	8005776 <_strtod_l+0x7e>
 800576a:	2c06      	cmp	r4, #6
 800576c:	d12b      	bne.n	80057c6 <_strtod_l+0xce>
 800576e:	2300      	movs	r3, #0
 8005770:	3501      	adds	r5, #1
 8005772:	951b      	str	r5, [sp, #108]	; 0x6c
 8005774:	930d      	str	r3, [sp, #52]	; 0x34
 8005776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005778:	2b00      	cmp	r3, #0
 800577a:	f040 85a6 	bne.w	80062ca <_strtod_l+0xbd2>
 800577e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005780:	b1e3      	cbz	r3, 80057bc <_strtod_l+0xc4>
 8005782:	464a      	mov	r2, r9
 8005784:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	b021      	add	sp, #132	; 0x84
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	2a2b      	cmp	r2, #43	; 0x2b
 8005794:	d015      	beq.n	80057c2 <_strtod_l+0xca>
 8005796:	2a2d      	cmp	r2, #45	; 0x2d
 8005798:	d004      	beq.n	80057a4 <_strtod_l+0xac>
 800579a:	2a20      	cmp	r2, #32
 800579c:	d1ca      	bne.n	8005734 <_strtod_l+0x3c>
 800579e:	3301      	adds	r3, #1
 80057a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80057a2:	e7bf      	b.n	8005724 <_strtod_l+0x2c>
 80057a4:	2201      	movs	r2, #1
 80057a6:	920d      	str	r2, [sp, #52]	; 0x34
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1c2      	bne.n	8005738 <_strtod_l+0x40>
 80057b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 8585 	bne.w	80062c6 <_strtod_l+0xbce>
 80057bc:	464a      	mov	r2, r9
 80057be:	4653      	mov	r3, sl
 80057c0:	e7e2      	b.n	8005788 <_strtod_l+0x90>
 80057c2:	2200      	movs	r2, #0
 80057c4:	e7ef      	b.n	80057a6 <_strtod_l+0xae>
 80057c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057c8:	b13a      	cbz	r2, 80057da <_strtod_l+0xe2>
 80057ca:	2135      	movs	r1, #53	; 0x35
 80057cc:	a81e      	add	r0, sp, #120	; 0x78
 80057ce:	f001 ff48 	bl	8007662 <__copybits>
 80057d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057d4:	4658      	mov	r0, fp
 80057d6:	f001 fbba 	bl	8006f4e <_Bfree>
 80057da:	3c01      	subs	r4, #1
 80057dc:	2c04      	cmp	r4, #4
 80057de:	d806      	bhi.n	80057ee <_strtod_l+0xf6>
 80057e0:	e8df f004 	tbb	[pc, r4]
 80057e4:	1714030a 	.word	0x1714030a
 80057e8:	0a          	.byte	0x0a
 80057e9:	00          	.byte	0x00
 80057ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80057ee:	0731      	lsls	r1, r6, #28
 80057f0:	d5c1      	bpl.n	8005776 <_strtod_l+0x7e>
 80057f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80057f6:	e7be      	b.n	8005776 <_strtod_l+0x7e>
 80057f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80057fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80057fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005802:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005806:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800580a:	e7f0      	b.n	80057ee <_strtod_l+0xf6>
 800580c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005980 <_strtod_l+0x288>
 8005810:	e7ed      	b.n	80057ee <_strtod_l+0xf6>
 8005812:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005816:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800581a:	e7e8      	b.n	80057ee <_strtod_l+0xf6>
 800581c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	921b      	str	r2, [sp, #108]	; 0x6c
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d0f9      	beq.n	800581c <_strtod_l+0x124>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0a4      	beq.n	8005776 <_strtod_l+0x7e>
 800582c:	2301      	movs	r3, #1
 800582e:	2500      	movs	r5, #0
 8005830:	220a      	movs	r2, #10
 8005832:	9307      	str	r3, [sp, #28]
 8005834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005836:	9506      	str	r5, [sp, #24]
 8005838:	9308      	str	r3, [sp, #32]
 800583a:	9504      	str	r5, [sp, #16]
 800583c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800583e:	7807      	ldrb	r7, [r0, #0]
 8005840:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005844:	b2d9      	uxtb	r1, r3
 8005846:	2909      	cmp	r1, #9
 8005848:	d929      	bls.n	800589e <_strtod_l+0x1a6>
 800584a:	4622      	mov	r2, r4
 800584c:	f8d8 1000 	ldr.w	r1, [r8]
 8005850:	f002 f849 	bl	80078e6 <strncmp>
 8005854:	2800      	cmp	r0, #0
 8005856:	d031      	beq.n	80058bc <_strtod_l+0x1c4>
 8005858:	2000      	movs	r0, #0
 800585a:	463b      	mov	r3, r7
 800585c:	4602      	mov	r2, r0
 800585e:	9c04      	ldr	r4, [sp, #16]
 8005860:	9005      	str	r0, [sp, #20]
 8005862:	2b65      	cmp	r3, #101	; 0x65
 8005864:	d001      	beq.n	800586a <_strtod_l+0x172>
 8005866:	2b45      	cmp	r3, #69	; 0x45
 8005868:	d114      	bne.n	8005894 <_strtod_l+0x19c>
 800586a:	b924      	cbnz	r4, 8005876 <_strtod_l+0x17e>
 800586c:	b910      	cbnz	r0, 8005874 <_strtod_l+0x17c>
 800586e:	9b07      	ldr	r3, [sp, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d09e      	beq.n	80057b2 <_strtod_l+0xba>
 8005874:	2400      	movs	r4, #0
 8005876:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005878:	1c73      	adds	r3, r6, #1
 800587a:	931b      	str	r3, [sp, #108]	; 0x6c
 800587c:	7873      	ldrb	r3, [r6, #1]
 800587e:	2b2b      	cmp	r3, #43	; 0x2b
 8005880:	d078      	beq.n	8005974 <_strtod_l+0x27c>
 8005882:	2b2d      	cmp	r3, #45	; 0x2d
 8005884:	d070      	beq.n	8005968 <_strtod_l+0x270>
 8005886:	f04f 0c00 	mov.w	ip, #0
 800588a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800588e:	2f09      	cmp	r7, #9
 8005890:	d97c      	bls.n	800598c <_strtod_l+0x294>
 8005892:	961b      	str	r6, [sp, #108]	; 0x6c
 8005894:	f04f 0e00 	mov.w	lr, #0
 8005898:	e09a      	b.n	80059d0 <_strtod_l+0x2d8>
 800589a:	2300      	movs	r3, #0
 800589c:	e7c7      	b.n	800582e <_strtod_l+0x136>
 800589e:	9904      	ldr	r1, [sp, #16]
 80058a0:	3001      	adds	r0, #1
 80058a2:	2908      	cmp	r1, #8
 80058a4:	bfd7      	itett	le
 80058a6:	9906      	ldrle	r1, [sp, #24]
 80058a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80058ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80058b0:	9306      	strle	r3, [sp, #24]
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80058b6:	3301      	adds	r3, #1
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	e7bf      	b.n	800583c <_strtod_l+0x144>
 80058bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058be:	191a      	adds	r2, r3, r4
 80058c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80058c2:	9a04      	ldr	r2, [sp, #16]
 80058c4:	5d1b      	ldrb	r3, [r3, r4]
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d037      	beq.n	800593a <_strtod_l+0x242>
 80058ca:	4602      	mov	r2, r0
 80058cc:	9c04      	ldr	r4, [sp, #16]
 80058ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80058d2:	2909      	cmp	r1, #9
 80058d4:	d913      	bls.n	80058fe <_strtod_l+0x206>
 80058d6:	2101      	movs	r1, #1
 80058d8:	9105      	str	r1, [sp, #20]
 80058da:	e7c2      	b.n	8005862 <_strtod_l+0x16a>
 80058dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058de:	3001      	adds	r0, #1
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d0f8      	beq.n	80058dc <_strtod_l+0x1e4>
 80058ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80058ee:	2a08      	cmp	r2, #8
 80058f0:	f200 84f0 	bhi.w	80062d4 <_strtod_l+0xbdc>
 80058f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80058f6:	9208      	str	r2, [sp, #32]
 80058f8:	4602      	mov	r2, r0
 80058fa:	2000      	movs	r0, #0
 80058fc:	4604      	mov	r4, r0
 80058fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005902:	f100 0101 	add.w	r1, r0, #1
 8005906:	d012      	beq.n	800592e <_strtod_l+0x236>
 8005908:	440a      	add	r2, r1
 800590a:	270a      	movs	r7, #10
 800590c:	4621      	mov	r1, r4
 800590e:	eb00 0c04 	add.w	ip, r0, r4
 8005912:	458c      	cmp	ip, r1
 8005914:	d113      	bne.n	800593e <_strtod_l+0x246>
 8005916:	1821      	adds	r1, r4, r0
 8005918:	2908      	cmp	r1, #8
 800591a:	f104 0401 	add.w	r4, r4, #1
 800591e:	4404      	add	r4, r0
 8005920:	dc19      	bgt.n	8005956 <_strtod_l+0x25e>
 8005922:	210a      	movs	r1, #10
 8005924:	9b06      	ldr	r3, [sp, #24]
 8005926:	fb01 e303 	mla	r3, r1, r3, lr
 800592a:	9306      	str	r3, [sp, #24]
 800592c:	2100      	movs	r1, #0
 800592e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005930:	1c58      	adds	r0, r3, #1
 8005932:	901b      	str	r0, [sp, #108]	; 0x6c
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	4608      	mov	r0, r1
 8005938:	e7c9      	b.n	80058ce <_strtod_l+0x1d6>
 800593a:	9804      	ldr	r0, [sp, #16]
 800593c:	e7d3      	b.n	80058e6 <_strtod_l+0x1ee>
 800593e:	2908      	cmp	r1, #8
 8005940:	f101 0101 	add.w	r1, r1, #1
 8005944:	dc03      	bgt.n	800594e <_strtod_l+0x256>
 8005946:	9b06      	ldr	r3, [sp, #24]
 8005948:	437b      	muls	r3, r7
 800594a:	9306      	str	r3, [sp, #24]
 800594c:	e7e1      	b.n	8005912 <_strtod_l+0x21a>
 800594e:	2910      	cmp	r1, #16
 8005950:	bfd8      	it	le
 8005952:	437d      	mulle	r5, r7
 8005954:	e7dd      	b.n	8005912 <_strtod_l+0x21a>
 8005956:	2c10      	cmp	r4, #16
 8005958:	bfdc      	itt	le
 800595a:	210a      	movle	r1, #10
 800595c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005960:	e7e4      	b.n	800592c <_strtod_l+0x234>
 8005962:	2301      	movs	r3, #1
 8005964:	9305      	str	r3, [sp, #20]
 8005966:	e781      	b.n	800586c <_strtod_l+0x174>
 8005968:	f04f 0c01 	mov.w	ip, #1
 800596c:	1cb3      	adds	r3, r6, #2
 800596e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005970:	78b3      	ldrb	r3, [r6, #2]
 8005972:	e78a      	b.n	800588a <_strtod_l+0x192>
 8005974:	f04f 0c00 	mov.w	ip, #0
 8005978:	e7f8      	b.n	800596c <_strtod_l+0x274>
 800597a:	bf00      	nop
 800597c:	08007a8c 	.word	0x08007a8c
 8005980:	7ff00000 	.word	0x7ff00000
 8005984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005986:	1c5f      	adds	r7, r3, #1
 8005988:	971b      	str	r7, [sp, #108]	; 0x6c
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d0f9      	beq.n	8005984 <_strtod_l+0x28c>
 8005990:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005994:	2f08      	cmp	r7, #8
 8005996:	f63f af7d 	bhi.w	8005894 <_strtod_l+0x19c>
 800599a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800599e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a0:	9309      	str	r3, [sp, #36]	; 0x24
 80059a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a4:	1c5f      	adds	r7, r3, #1
 80059a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80059ae:	f1b8 0f09 	cmp.w	r8, #9
 80059b2:	d937      	bls.n	8005a24 <_strtod_l+0x32c>
 80059b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059b6:	1a7f      	subs	r7, r7, r1
 80059b8:	2f08      	cmp	r7, #8
 80059ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80059be:	dc37      	bgt.n	8005a30 <_strtod_l+0x338>
 80059c0:	45be      	cmp	lr, r7
 80059c2:	bfa8      	it	ge
 80059c4:	46be      	movge	lr, r7
 80059c6:	f1bc 0f00 	cmp.w	ip, #0
 80059ca:	d001      	beq.n	80059d0 <_strtod_l+0x2d8>
 80059cc:	f1ce 0e00 	rsb	lr, lr, #0
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	d151      	bne.n	8005a78 <_strtod_l+0x380>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f47f aece 	bne.w	8005776 <_strtod_l+0x7e>
 80059da:	9a07      	ldr	r2, [sp, #28]
 80059dc:	2a00      	cmp	r2, #0
 80059de:	f47f aeca 	bne.w	8005776 <_strtod_l+0x7e>
 80059e2:	9a05      	ldr	r2, [sp, #20]
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	f47f aee4 	bne.w	80057b2 <_strtod_l+0xba>
 80059ea:	2b4e      	cmp	r3, #78	; 0x4e
 80059ec:	d027      	beq.n	8005a3e <_strtod_l+0x346>
 80059ee:	dc21      	bgt.n	8005a34 <_strtod_l+0x33c>
 80059f0:	2b49      	cmp	r3, #73	; 0x49
 80059f2:	f47f aede 	bne.w	80057b2 <_strtod_l+0xba>
 80059f6:	49a4      	ldr	r1, [pc, #656]	; (8005c88 <_strtod_l+0x590>)
 80059f8:	a81b      	add	r0, sp, #108	; 0x6c
 80059fa:	f001 f94d 	bl	8006c98 <__match>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f43f aed7 	beq.w	80057b2 <_strtod_l+0xba>
 8005a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a06:	49a1      	ldr	r1, [pc, #644]	; (8005c8c <_strtod_l+0x594>)
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	a81b      	add	r0, sp, #108	; 0x6c
 8005a0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a0e:	f001 f943 	bl	8006c98 <__match>
 8005a12:	b910      	cbnz	r0, 8005a1a <_strtod_l+0x322>
 8005a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a16:	3301      	adds	r3, #1
 8005a18:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a1a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005ca0 <_strtod_l+0x5a8>
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	e6a8      	b.n	8005776 <_strtod_l+0x7e>
 8005a24:	210a      	movs	r1, #10
 8005a26:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005a2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a2e:	e7b8      	b.n	80059a2 <_strtod_l+0x2aa>
 8005a30:	46be      	mov	lr, r7
 8005a32:	e7c8      	b.n	80059c6 <_strtod_l+0x2ce>
 8005a34:	2b69      	cmp	r3, #105	; 0x69
 8005a36:	d0de      	beq.n	80059f6 <_strtod_l+0x2fe>
 8005a38:	2b6e      	cmp	r3, #110	; 0x6e
 8005a3a:	f47f aeba 	bne.w	80057b2 <_strtod_l+0xba>
 8005a3e:	4994      	ldr	r1, [pc, #592]	; (8005c90 <_strtod_l+0x598>)
 8005a40:	a81b      	add	r0, sp, #108	; 0x6c
 8005a42:	f001 f929 	bl	8006c98 <__match>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f43f aeb3 	beq.w	80057b2 <_strtod_l+0xba>
 8005a4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b28      	cmp	r3, #40	; 0x28
 8005a52:	d10e      	bne.n	8005a72 <_strtod_l+0x37a>
 8005a54:	aa1e      	add	r2, sp, #120	; 0x78
 8005a56:	498f      	ldr	r1, [pc, #572]	; (8005c94 <_strtod_l+0x59c>)
 8005a58:	a81b      	add	r0, sp, #108	; 0x6c
 8005a5a:	f001 f931 	bl	8006cc0 <__hexnan>
 8005a5e:	2805      	cmp	r0, #5
 8005a60:	d107      	bne.n	8005a72 <_strtod_l+0x37a>
 8005a62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a64:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005a68:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005a6c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005a70:	e681      	b.n	8005776 <_strtod_l+0x7e>
 8005a72:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005ca8 <_strtod_l+0x5b0>
 8005a76:	e7d2      	b.n	8005a1e <_strtod_l+0x326>
 8005a78:	ebae 0302 	sub.w	r3, lr, r2
 8005a7c:	9307      	str	r3, [sp, #28]
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	9806      	ldr	r0, [sp, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf08      	it	eq
 8005a86:	4623      	moveq	r3, r4
 8005a88:	2c10      	cmp	r4, #16
 8005a8a:	9304      	str	r3, [sp, #16]
 8005a8c:	46a0      	mov	r8, r4
 8005a8e:	bfa8      	it	ge
 8005a90:	f04f 0810 	movge.w	r8, #16
 8005a94:	f7fa fca6 	bl	80003e4 <__aeabi_ui2d>
 8005a98:	2c09      	cmp	r4, #9
 8005a9a:	4681      	mov	r9, r0
 8005a9c:	468a      	mov	sl, r1
 8005a9e:	dc13      	bgt.n	8005ac8 <_strtod_l+0x3d0>
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f43f ae67 	beq.w	8005776 <_strtod_l+0x7e>
 8005aa8:	9b07      	ldr	r3, [sp, #28]
 8005aaa:	dd7e      	ble.n	8005baa <_strtod_l+0x4b2>
 8005aac:	2b16      	cmp	r3, #22
 8005aae:	dc65      	bgt.n	8005b7c <_strtod_l+0x484>
 8005ab0:	4a79      	ldr	r2, [pc, #484]	; (8005c98 <_strtod_l+0x5a0>)
 8005ab2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005ab6:	464a      	mov	r2, r9
 8005ab8:	e9de 0100 	ldrd	r0, r1, [lr]
 8005abc:	4653      	mov	r3, sl
 8005abe:	f7fa fd0b 	bl	80004d8 <__aeabi_dmul>
 8005ac2:	4681      	mov	r9, r0
 8005ac4:	468a      	mov	sl, r1
 8005ac6:	e656      	b.n	8005776 <_strtod_l+0x7e>
 8005ac8:	4b73      	ldr	r3, [pc, #460]	; (8005c98 <_strtod_l+0x5a0>)
 8005aca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ace:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	4628      	mov	r0, r5
 8005ada:	460f      	mov	r7, r1
 8005adc:	f7fa fc82 	bl	80003e4 <__aeabi_ui2d>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fb40 	bl	800016c <__adddf3>
 8005aec:	2c0f      	cmp	r4, #15
 8005aee:	4681      	mov	r9, r0
 8005af0:	468a      	mov	sl, r1
 8005af2:	ddd5      	ble.n	8005aa0 <_strtod_l+0x3a8>
 8005af4:	9b07      	ldr	r3, [sp, #28]
 8005af6:	eba4 0808 	sub.w	r8, r4, r8
 8005afa:	4498      	add	r8, r3
 8005afc:	f1b8 0f00 	cmp.w	r8, #0
 8005b00:	f340 809a 	ble.w	8005c38 <_strtod_l+0x540>
 8005b04:	f018 030f 	ands.w	r3, r8, #15
 8005b08:	d00a      	beq.n	8005b20 <_strtod_l+0x428>
 8005b0a:	4963      	ldr	r1, [pc, #396]	; (8005c98 <_strtod_l+0x5a0>)
 8005b0c:	464a      	mov	r2, r9
 8005b0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b16:	4653      	mov	r3, sl
 8005b18:	f7fa fcde 	bl	80004d8 <__aeabi_dmul>
 8005b1c:	4681      	mov	r9, r0
 8005b1e:	468a      	mov	sl, r1
 8005b20:	f038 080f 	bics.w	r8, r8, #15
 8005b24:	d077      	beq.n	8005c16 <_strtod_l+0x51e>
 8005b26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b2a:	dd4b      	ble.n	8005bc4 <_strtod_l+0x4cc>
 8005b2c:	f04f 0800 	mov.w	r8, #0
 8005b30:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b34:	f8cd 8020 	str.w	r8, [sp, #32]
 8005b38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b3c:	2322      	movs	r3, #34	; 0x22
 8005b3e:	f04f 0900 	mov.w	r9, #0
 8005b42:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005ca0 <_strtod_l+0x5a8>
 8005b46:	f8cb 3000 	str.w	r3, [fp]
 8005b4a:	9b08      	ldr	r3, [sp, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f43f ae12 	beq.w	8005776 <_strtod_l+0x7e>
 8005b52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b54:	4658      	mov	r0, fp
 8005b56:	f001 f9fa 	bl	8006f4e <_Bfree>
 8005b5a:	9906      	ldr	r1, [sp, #24]
 8005b5c:	4658      	mov	r0, fp
 8005b5e:	f001 f9f6 	bl	8006f4e <_Bfree>
 8005b62:	9904      	ldr	r1, [sp, #16]
 8005b64:	4658      	mov	r0, fp
 8005b66:	f001 f9f2 	bl	8006f4e <_Bfree>
 8005b6a:	9908      	ldr	r1, [sp, #32]
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f001 f9ee 	bl	8006f4e <_Bfree>
 8005b72:	4641      	mov	r1, r8
 8005b74:	4658      	mov	r0, fp
 8005b76:	f001 f9ea 	bl	8006f4e <_Bfree>
 8005b7a:	e5fc      	b.n	8005776 <_strtod_l+0x7e>
 8005b7c:	9a07      	ldr	r2, [sp, #28]
 8005b7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005b82:	4293      	cmp	r3, r2
 8005b84:	dbb6      	blt.n	8005af4 <_strtod_l+0x3fc>
 8005b86:	4d44      	ldr	r5, [pc, #272]	; (8005c98 <_strtod_l+0x5a0>)
 8005b88:	f1c4 040f 	rsb	r4, r4, #15
 8005b8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005b90:	464a      	mov	r2, r9
 8005b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b96:	4653      	mov	r3, sl
 8005b98:	f7fa fc9e 	bl	80004d8 <__aeabi_dmul>
 8005b9c:	9b07      	ldr	r3, [sp, #28]
 8005b9e:	1b1c      	subs	r4, r3, r4
 8005ba0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005ba4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ba8:	e789      	b.n	8005abe <_strtod_l+0x3c6>
 8005baa:	f113 0f16 	cmn.w	r3, #22
 8005bae:	dba1      	blt.n	8005af4 <_strtod_l+0x3fc>
 8005bb0:	4a39      	ldr	r2, [pc, #228]	; (8005c98 <_strtod_l+0x5a0>)
 8005bb2:	4648      	mov	r0, r9
 8005bb4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005bb8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	f7fa fdb5 	bl	800072c <__aeabi_ddiv>
 8005bc2:	e77e      	b.n	8005ac2 <_strtod_l+0x3ca>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4648      	mov	r0, r9
 8005bc8:	4651      	mov	r1, sl
 8005bca:	461d      	mov	r5, r3
 8005bcc:	4e33      	ldr	r6, [pc, #204]	; (8005c9c <_strtod_l+0x5a4>)
 8005bce:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005bd2:	f1b8 0f01 	cmp.w	r8, #1
 8005bd6:	dc21      	bgt.n	8005c1c <_strtod_l+0x524>
 8005bd8:	b10b      	cbz	r3, 8005bde <_strtod_l+0x4e6>
 8005bda:	4681      	mov	r9, r0
 8005bdc:	468a      	mov	sl, r1
 8005bde:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <_strtod_l+0x5a4>)
 8005be0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005be4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005be8:	464a      	mov	r2, r9
 8005bea:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005bee:	4653      	mov	r3, sl
 8005bf0:	f7fa fc72 	bl	80004d8 <__aeabi_dmul>
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <_strtod_l+0x5a8>)
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	492a      	ldr	r1, [pc, #168]	; (8005ca4 <_strtod_l+0x5ac>)
 8005bfc:	4681      	mov	r9, r0
 8005bfe:	428b      	cmp	r3, r1
 8005c00:	d894      	bhi.n	8005b2c <_strtod_l+0x434>
 8005c02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c06:	428b      	cmp	r3, r1
 8005c08:	bf86      	itte	hi
 8005c0a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005c0e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005cac <_strtod_l+0x5b4>
 8005c12:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005c16:	2300      	movs	r3, #0
 8005c18:	9305      	str	r3, [sp, #20]
 8005c1a:	e07b      	b.n	8005d14 <_strtod_l+0x61c>
 8005c1c:	f018 0f01 	tst.w	r8, #1
 8005c20:	d006      	beq.n	8005c30 <_strtod_l+0x538>
 8005c22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fc55 	bl	80004d8 <__aeabi_dmul>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	3501      	adds	r5, #1
 8005c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c36:	e7cc      	b.n	8005bd2 <_strtod_l+0x4da>
 8005c38:	d0ed      	beq.n	8005c16 <_strtod_l+0x51e>
 8005c3a:	f1c8 0800 	rsb	r8, r8, #0
 8005c3e:	f018 020f 	ands.w	r2, r8, #15
 8005c42:	d00a      	beq.n	8005c5a <_strtod_l+0x562>
 8005c44:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <_strtod_l+0x5a0>)
 8005c46:	4648      	mov	r0, r9
 8005c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f7fa fd6b 	bl	800072c <__aeabi_ddiv>
 8005c56:	4681      	mov	r9, r0
 8005c58:	468a      	mov	sl, r1
 8005c5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c5e:	d0da      	beq.n	8005c16 <_strtod_l+0x51e>
 8005c60:	f1b8 0f1f 	cmp.w	r8, #31
 8005c64:	dd24      	ble.n	8005cb0 <_strtod_l+0x5b8>
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c6e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005c72:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c76:	2322      	movs	r3, #34	; 0x22
 8005c78:	f04f 0900 	mov.w	r9, #0
 8005c7c:	f04f 0a00 	mov.w	sl, #0
 8005c80:	f8cb 3000 	str.w	r3, [fp]
 8005c84:	e761      	b.n	8005b4a <_strtod_l+0x452>
 8005c86:	bf00      	nop
 8005c88:	08007a80 	.word	0x08007a80
 8005c8c:	08007a83 	.word	0x08007a83
 8005c90:	08007a89 	.word	0x08007a89
 8005c94:	08007aa0 	.word	0x08007aa0
 8005c98:	08007b78 	.word	0x08007b78
 8005c9c:	08007b50 	.word	0x08007b50
 8005ca0:	7ff00000 	.word	0x7ff00000
 8005ca4:	7ca00000 	.word	0x7ca00000
 8005ca8:	fff80000 	.word	0xfff80000
 8005cac:	7fefffff 	.word	0x7fefffff
 8005cb0:	f018 0310 	ands.w	r3, r8, #16
 8005cb4:	bf18      	it	ne
 8005cb6:	236a      	movne	r3, #106	; 0x6a
 8005cb8:	4648      	mov	r0, r9
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4da1      	ldr	r5, [pc, #644]	; (8005f48 <_strtod_l+0x850>)
 8005cc2:	f1b8 0f00 	cmp.w	r8, #0
 8005cc6:	f300 8113 	bgt.w	8005ef0 <_strtod_l+0x7f8>
 8005cca:	b10b      	cbz	r3, 8005cd0 <_strtod_l+0x5d8>
 8005ccc:	4681      	mov	r9, r0
 8005cce:	468a      	mov	sl, r1
 8005cd0:	9b05      	ldr	r3, [sp, #20]
 8005cd2:	b1bb      	cbz	r3, 8005d04 <_strtod_l+0x60c>
 8005cd4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005cd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	4651      	mov	r1, sl
 8005ce0:	dd10      	ble.n	8005d04 <_strtod_l+0x60c>
 8005ce2:	2b1f      	cmp	r3, #31
 8005ce4:	f340 8110 	ble.w	8005f08 <_strtod_l+0x810>
 8005ce8:	2b34      	cmp	r3, #52	; 0x34
 8005cea:	bfd8      	it	le
 8005cec:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005cf0:	f04f 0900 	mov.w	r9, #0
 8005cf4:	bfcf      	iteee	gt
 8005cf6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005cfa:	3b20      	suble	r3, #32
 8005cfc:	fa02 f303 	lslle.w	r3, r2, r3
 8005d00:	ea03 0a01 	andle.w	sl, r3, r1
 8005d04:	2200      	movs	r2, #0
 8005d06:	2300      	movs	r3, #0
 8005d08:	4648      	mov	r0, r9
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	f7fa fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d1a8      	bne.n	8005c66 <_strtod_l+0x56e>
 8005d14:	9b06      	ldr	r3, [sp, #24]
 8005d16:	9a04      	ldr	r2, [sp, #16]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	9908      	ldr	r1, [sp, #32]
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	4658      	mov	r0, fp
 8005d20:	f001 f967 	bl	8006ff2 <__s2b>
 8005d24:	9008      	str	r0, [sp, #32]
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f af00 	beq.w	8005b2c <_strtod_l+0x434>
 8005d2c:	9a07      	ldr	r2, [sp, #28]
 8005d2e:	9b07      	ldr	r3, [sp, #28]
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	f1c3 0300 	rsb	r3, r3, #0
 8005d36:	bfa8      	it	ge
 8005d38:	2300      	movge	r3, #0
 8005d3a:	f04f 0800 	mov.w	r8, #0
 8005d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8005d40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d44:	9316      	str	r3, [sp, #88]	; 0x58
 8005d46:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d4a:	9b08      	ldr	r3, [sp, #32]
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	6859      	ldr	r1, [r3, #4]
 8005d50:	f001 f8c9 	bl	8006ee6 <_Balloc>
 8005d54:	9006      	str	r0, [sp, #24]
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f43f aef0 	beq.w	8005b3c <_strtod_l+0x444>
 8005d5c:	9b08      	ldr	r3, [sp, #32]
 8005d5e:	300c      	adds	r0, #12
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	f103 010c 	add.w	r1, r3, #12
 8005d66:	3202      	adds	r2, #2
 8005d68:	0092      	lsls	r2, r2, #2
 8005d6a:	f001 f8b1 	bl	8006ed0 <memcpy>
 8005d6e:	ab1e      	add	r3, sp, #120	; 0x78
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	ab1d      	add	r3, sp, #116	; 0x74
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	464a      	mov	r2, r9
 8005d78:	4653      	mov	r3, sl
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005d80:	f001 fbf2 	bl	8007568 <__d2b>
 8005d84:	901c      	str	r0, [sp, #112]	; 0x70
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f43f aed8 	beq.w	8005b3c <_strtod_l+0x444>
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	4658      	mov	r0, fp
 8005d90:	f001 f9bb 	bl	800710a <__i2b>
 8005d94:	9004      	str	r0, [sp, #16]
 8005d96:	4603      	mov	r3, r0
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f43f aecf 	beq.w	8005b3c <_strtod_l+0x444>
 8005d9e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005da0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	bfab      	itete	ge
 8005da6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005da8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005daa:	18ee      	addge	r6, r5, r3
 8005dac:	1b5c      	sublt	r4, r3, r5
 8005dae:	9b05      	ldr	r3, [sp, #20]
 8005db0:	bfa8      	it	ge
 8005db2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005db4:	eba5 0503 	sub.w	r5, r5, r3
 8005db8:	4415      	add	r5, r2
 8005dba:	4b64      	ldr	r3, [pc, #400]	; (8005f4c <_strtod_l+0x854>)
 8005dbc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005dc0:	bfb8      	it	lt
 8005dc2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005dc4:	429d      	cmp	r5, r3
 8005dc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005dca:	f280 80af 	bge.w	8005f2c <_strtod_l+0x834>
 8005dce:	1b5b      	subs	r3, r3, r5
 8005dd0:	2b1f      	cmp	r3, #31
 8005dd2:	eba2 0203 	sub.w	r2, r2, r3
 8005dd6:	f04f 0701 	mov.w	r7, #1
 8005dda:	f300 809c 	bgt.w	8005f16 <_strtod_l+0x81e>
 8005dde:	2500      	movs	r5, #0
 8005de0:	fa07 f303 	lsl.w	r3, r7, r3
 8005de4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005de6:	18b7      	adds	r7, r6, r2
 8005de8:	9b05      	ldr	r3, [sp, #20]
 8005dea:	42be      	cmp	r6, r7
 8005dec:	4414      	add	r4, r2
 8005dee:	441c      	add	r4, r3
 8005df0:	4633      	mov	r3, r6
 8005df2:	bfa8      	it	ge
 8005df4:	463b      	movge	r3, r7
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	bfa8      	it	ge
 8005dfa:	4623      	movge	r3, r4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfc2      	ittt	gt
 8005e00:	1aff      	subgt	r7, r7, r3
 8005e02:	1ae4      	subgt	r4, r4, r3
 8005e04:	1af6      	subgt	r6, r6, r3
 8005e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e08:	b1bb      	cbz	r3, 8005e3a <_strtod_l+0x742>
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	9904      	ldr	r1, [sp, #16]
 8005e0e:	4658      	mov	r0, fp
 8005e10:	f001 fa1a 	bl	8007248 <__pow5mult>
 8005e14:	9004      	str	r0, [sp, #16]
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f ae90 	beq.w	8005b3c <_strtod_l+0x444>
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e20:	4658      	mov	r0, fp
 8005e22:	f001 f97b 	bl	800711c <__multiply>
 8005e26:	9009      	str	r0, [sp, #36]	; 0x24
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f43f ae87 	beq.w	8005b3c <_strtod_l+0x444>
 8005e2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e30:	4658      	mov	r0, fp
 8005e32:	f001 f88c 	bl	8006f4e <_Bfree>
 8005e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e38:	931c      	str	r3, [sp, #112]	; 0x70
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	dc7a      	bgt.n	8005f34 <_strtod_l+0x83c>
 8005e3e:	9b07      	ldr	r3, [sp, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dd08      	ble.n	8005e56 <_strtod_l+0x75e>
 8005e44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005e46:	9906      	ldr	r1, [sp, #24]
 8005e48:	4658      	mov	r0, fp
 8005e4a:	f001 f9fd 	bl	8007248 <__pow5mult>
 8005e4e:	9006      	str	r0, [sp, #24]
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f43f ae73 	beq.w	8005b3c <_strtod_l+0x444>
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	dd08      	ble.n	8005e6c <_strtod_l+0x774>
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	9906      	ldr	r1, [sp, #24]
 8005e5e:	4658      	mov	r0, fp
 8005e60:	f001 fa40 	bl	80072e4 <__lshift>
 8005e64:	9006      	str	r0, [sp, #24]
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f43f ae68 	beq.w	8005b3c <_strtod_l+0x444>
 8005e6c:	2e00      	cmp	r6, #0
 8005e6e:	dd08      	ble.n	8005e82 <_strtod_l+0x78a>
 8005e70:	4632      	mov	r2, r6
 8005e72:	9904      	ldr	r1, [sp, #16]
 8005e74:	4658      	mov	r0, fp
 8005e76:	f001 fa35 	bl	80072e4 <__lshift>
 8005e7a:	9004      	str	r0, [sp, #16]
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f43f ae5d 	beq.w	8005b3c <_strtod_l+0x444>
 8005e82:	9a06      	ldr	r2, [sp, #24]
 8005e84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e86:	4658      	mov	r0, fp
 8005e88:	f001 fa9a 	bl	80073c0 <__mdiff>
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f43f ae54 	beq.w	8005b3c <_strtod_l+0x444>
 8005e94:	2400      	movs	r4, #0
 8005e96:	68c3      	ldr	r3, [r0, #12]
 8005e98:	9904      	ldr	r1, [sp, #16]
 8005e9a:	60c4      	str	r4, [r0, #12]
 8005e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e9e:	f001 fa75 	bl	800738c <__mcmp>
 8005ea2:	42a0      	cmp	r0, r4
 8005ea4:	da54      	bge.n	8005f50 <_strtod_l+0x858>
 8005ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ea8:	b9f3      	cbnz	r3, 8005ee8 <_strtod_l+0x7f0>
 8005eaa:	f1b9 0f00 	cmp.w	r9, #0
 8005eae:	d11b      	bne.n	8005ee8 <_strtod_l+0x7f0>
 8005eb0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005eb4:	b9c3      	cbnz	r3, 8005ee8 <_strtod_l+0x7f0>
 8005eb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005eba:	0d1b      	lsrs	r3, r3, #20
 8005ebc:	051b      	lsls	r3, r3, #20
 8005ebe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ec2:	d911      	bls.n	8005ee8 <_strtod_l+0x7f0>
 8005ec4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005ec8:	b91b      	cbnz	r3, 8005ed2 <_strtod_l+0x7da>
 8005eca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	dd0a      	ble.n	8005ee8 <_strtod_l+0x7f0>
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	4658      	mov	r0, fp
 8005ed8:	f001 fa04 	bl	80072e4 <__lshift>
 8005edc:	9904      	ldr	r1, [sp, #16]
 8005ede:	4680      	mov	r8, r0
 8005ee0:	f001 fa54 	bl	800738c <__mcmp>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	dc68      	bgt.n	8005fba <_strtod_l+0x8c2>
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d172      	bne.n	8005fd4 <_strtod_l+0x8dc>
 8005eee:	e630      	b.n	8005b52 <_strtod_l+0x45a>
 8005ef0:	f018 0f01 	tst.w	r8, #1
 8005ef4:	d004      	beq.n	8005f00 <_strtod_l+0x808>
 8005ef6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005efa:	f7fa faed 	bl	80004d8 <__aeabi_dmul>
 8005efe:	2301      	movs	r3, #1
 8005f00:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f04:	3508      	adds	r5, #8
 8005f06:	e6dc      	b.n	8005cc2 <_strtod_l+0x5ca>
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	ea03 0909 	and.w	r9, r3, r9
 8005f14:	e6f6      	b.n	8005d04 <_strtod_l+0x60c>
 8005f16:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005f1a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005f1e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005f22:	35e2      	adds	r5, #226	; 0xe2
 8005f24:	fa07 f505 	lsl.w	r5, r7, r5
 8005f28:	970f      	str	r7, [sp, #60]	; 0x3c
 8005f2a:	e75c      	b.n	8005de6 <_strtod_l+0x6ee>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	2500      	movs	r5, #0
 8005f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f32:	e758      	b.n	8005de6 <_strtod_l+0x6ee>
 8005f34:	463a      	mov	r2, r7
 8005f36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f38:	4658      	mov	r0, fp
 8005f3a:	f001 f9d3 	bl	80072e4 <__lshift>
 8005f3e:	901c      	str	r0, [sp, #112]	; 0x70
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f47f af7c 	bne.w	8005e3e <_strtod_l+0x746>
 8005f46:	e5f9      	b.n	8005b3c <_strtod_l+0x444>
 8005f48:	08007ab8 	.word	0x08007ab8
 8005f4c:	fffffc02 	.word	0xfffffc02
 8005f50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005f54:	f040 8089 	bne.w	800606a <_strtod_l+0x972>
 8005f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005f5e:	b342      	cbz	r2, 8005fb2 <_strtod_l+0x8ba>
 8005f60:	4aaf      	ldr	r2, [pc, #700]	; (8006220 <_strtod_l+0xb28>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d156      	bne.n	8006014 <_strtod_l+0x91c>
 8005f66:	9b05      	ldr	r3, [sp, #20]
 8005f68:	4648      	mov	r0, r9
 8005f6a:	b1eb      	cbz	r3, 8005fa8 <_strtod_l+0x8b0>
 8005f6c:	4653      	mov	r3, sl
 8005f6e:	4aad      	ldr	r2, [pc, #692]	; (8006224 <_strtod_l+0xb2c>)
 8005f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f74:	401a      	ands	r2, r3
 8005f76:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005f7a:	d818      	bhi.n	8005fae <_strtod_l+0x8b6>
 8005f7c:	0d12      	lsrs	r2, r2, #20
 8005f7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	4298      	cmp	r0, r3
 8005f88:	d144      	bne.n	8006014 <_strtod_l+0x91c>
 8005f8a:	4ba7      	ldr	r3, [pc, #668]	; (8006228 <_strtod_l+0xb30>)
 8005f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d102      	bne.n	8005f98 <_strtod_l+0x8a0>
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f add2 	beq.w	8005b3c <_strtod_l+0x444>
 8005f98:	4ba2      	ldr	r3, [pc, #648]	; (8006224 <_strtod_l+0xb2c>)
 8005f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f9c:	f04f 0900 	mov.w	r9, #0
 8005fa0:	401a      	ands	r2, r3
 8005fa2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005fa6:	e79f      	b.n	8005ee8 <_strtod_l+0x7f0>
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fac:	e7eb      	b.n	8005f86 <_strtod_l+0x88e>
 8005fae:	460b      	mov	r3, r1
 8005fb0:	e7e9      	b.n	8005f86 <_strtod_l+0x88e>
 8005fb2:	bb7b      	cbnz	r3, 8006014 <_strtod_l+0x91c>
 8005fb4:	f1b9 0f00 	cmp.w	r9, #0
 8005fb8:	d12c      	bne.n	8006014 <_strtod_l+0x91c>
 8005fba:	9905      	ldr	r1, [sp, #20]
 8005fbc:	4653      	mov	r3, sl
 8005fbe:	4a99      	ldr	r2, [pc, #612]	; (8006224 <_strtod_l+0xb2c>)
 8005fc0:	b1f1      	cbz	r1, 8006000 <_strtod_l+0x908>
 8005fc2:	ea02 010a 	and.w	r1, r2, sl
 8005fc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005fca:	dc19      	bgt.n	8006000 <_strtod_l+0x908>
 8005fcc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005fd0:	f77f ae51 	ble.w	8005c76 <_strtod_l+0x57e>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4a95      	ldr	r2, [pc, #596]	; (800622c <_strtod_l+0xb34>)
 8005fd8:	4648      	mov	r0, r9
 8005fda:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005fde:	4651      	mov	r1, sl
 8005fe0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005fe4:	f7fa fa78 	bl	80004d8 <__aeabi_dmul>
 8005fe8:	4681      	mov	r9, r0
 8005fea:	468a      	mov	sl, r1
 8005fec:	2900      	cmp	r1, #0
 8005fee:	f47f adb0 	bne.w	8005b52 <_strtod_l+0x45a>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f47f adad 	bne.w	8005b52 <_strtod_l+0x45a>
 8005ff8:	2322      	movs	r3, #34	; 0x22
 8005ffa:	f8cb 3000 	str.w	r3, [fp]
 8005ffe:	e5a8      	b.n	8005b52 <_strtod_l+0x45a>
 8006000:	4013      	ands	r3, r2
 8006002:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006006:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800600a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800600e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006012:	e769      	b.n	8005ee8 <_strtod_l+0x7f0>
 8006014:	b19d      	cbz	r5, 800603e <_strtod_l+0x946>
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	421d      	tst	r5, r3
 800601a:	f43f af65 	beq.w	8005ee8 <_strtod_l+0x7f0>
 800601e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006020:	9a05      	ldr	r2, [sp, #20]
 8006022:	4648      	mov	r0, r9
 8006024:	4651      	mov	r1, sl
 8006026:	b173      	cbz	r3, 8006046 <_strtod_l+0x94e>
 8006028:	f7ff fb42 	bl	80056b0 <sulp>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006034:	f7fa f89a 	bl	800016c <__adddf3>
 8006038:	4681      	mov	r9, r0
 800603a:	468a      	mov	sl, r1
 800603c:	e754      	b.n	8005ee8 <_strtod_l+0x7f0>
 800603e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006040:	ea13 0f09 	tst.w	r3, r9
 8006044:	e7e9      	b.n	800601a <_strtod_l+0x922>
 8006046:	f7ff fb33 	bl	80056b0 <sulp>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006052:	f7fa f889 	bl	8000168 <__aeabi_dsub>
 8006056:	2200      	movs	r2, #0
 8006058:	2300      	movs	r3, #0
 800605a:	4681      	mov	r9, r0
 800605c:	468a      	mov	sl, r1
 800605e:	f7fa fca3 	bl	80009a8 <__aeabi_dcmpeq>
 8006062:	2800      	cmp	r0, #0
 8006064:	f47f ae07 	bne.w	8005c76 <_strtod_l+0x57e>
 8006068:	e73e      	b.n	8005ee8 <_strtod_l+0x7f0>
 800606a:	9904      	ldr	r1, [sp, #16]
 800606c:	4640      	mov	r0, r8
 800606e:	f001 faca 	bl	8007606 <__ratio>
 8006072:	2200      	movs	r2, #0
 8006074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	f7fa fca8 	bl	80009d0 <__aeabi_dcmple>
 8006080:	2800      	cmp	r0, #0
 8006082:	d075      	beq.n	8006170 <_strtod_l+0xa78>
 8006084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006086:	2b00      	cmp	r3, #0
 8006088:	d047      	beq.n	800611a <_strtod_l+0xa22>
 800608a:	2600      	movs	r6, #0
 800608c:	4f68      	ldr	r7, [pc, #416]	; (8006230 <_strtod_l+0xb38>)
 800608e:	4d68      	ldr	r5, [pc, #416]	; (8006230 <_strtod_l+0xb38>)
 8006090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006096:	0d1b      	lsrs	r3, r3, #20
 8006098:	051b      	lsls	r3, r3, #20
 800609a:	930f      	str	r3, [sp, #60]	; 0x3c
 800609c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800609e:	4b65      	ldr	r3, [pc, #404]	; (8006234 <_strtod_l+0xb3c>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	f040 80cf 	bne.w	8006244 <_strtod_l+0xb4c>
 80060a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060aa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80060ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b0:	4648      	mov	r0, r9
 80060b2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80060b6:	4651      	mov	r1, sl
 80060b8:	f001 f9e0 	bl	800747c <__ulp>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7fa fa08 	bl	80004d8 <__aeabi_dmul>
 80060c8:	464a      	mov	r2, r9
 80060ca:	4653      	mov	r3, sl
 80060cc:	f7fa f84e 	bl	800016c <__adddf3>
 80060d0:	460b      	mov	r3, r1
 80060d2:	4954      	ldr	r1, [pc, #336]	; (8006224 <_strtod_l+0xb2c>)
 80060d4:	4a58      	ldr	r2, [pc, #352]	; (8006238 <_strtod_l+0xb40>)
 80060d6:	4019      	ands	r1, r3
 80060d8:	4291      	cmp	r1, r2
 80060da:	4681      	mov	r9, r0
 80060dc:	d95e      	bls.n	800619c <_strtod_l+0xaa4>
 80060de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <_strtod_l+0x9f8>
 80060e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ea:	3301      	adds	r3, #1
 80060ec:	f43f ad26 	beq.w	8005b3c <_strtod_l+0x444>
 80060f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80060f4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006228 <_strtod_l+0xb30>
 80060f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060fa:	4658      	mov	r0, fp
 80060fc:	f000 ff27 	bl	8006f4e <_Bfree>
 8006100:	9906      	ldr	r1, [sp, #24]
 8006102:	4658      	mov	r0, fp
 8006104:	f000 ff23 	bl	8006f4e <_Bfree>
 8006108:	9904      	ldr	r1, [sp, #16]
 800610a:	4658      	mov	r0, fp
 800610c:	f000 ff1f 	bl	8006f4e <_Bfree>
 8006110:	4641      	mov	r1, r8
 8006112:	4658      	mov	r0, fp
 8006114:	f000 ff1b 	bl	8006f4e <_Bfree>
 8006118:	e617      	b.n	8005d4a <_strtod_l+0x652>
 800611a:	f1b9 0f00 	cmp.w	r9, #0
 800611e:	d119      	bne.n	8006154 <_strtod_l+0xa5c>
 8006120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006126:	b9e3      	cbnz	r3, 8006162 <_strtod_l+0xa6a>
 8006128:	2200      	movs	r2, #0
 800612a:	4b41      	ldr	r3, [pc, #260]	; (8006230 <_strtod_l+0xb38>)
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa fc44 	bl	80009bc <__aeabi_dcmplt>
 8006134:	b9c8      	cbnz	r0, 800616a <_strtod_l+0xa72>
 8006136:	2200      	movs	r2, #0
 8006138:	4b40      	ldr	r3, [pc, #256]	; (800623c <_strtod_l+0xb44>)
 800613a:	4630      	mov	r0, r6
 800613c:	4639      	mov	r1, r7
 800613e:	f7fa f9cb 	bl	80004d8 <__aeabi_dmul>
 8006142:	4604      	mov	r4, r0
 8006144:	460d      	mov	r5, r1
 8006146:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800614a:	9418      	str	r4, [sp, #96]	; 0x60
 800614c:	9319      	str	r3, [sp, #100]	; 0x64
 800614e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006152:	e79d      	b.n	8006090 <_strtod_l+0x998>
 8006154:	f1b9 0f01 	cmp.w	r9, #1
 8006158:	d103      	bne.n	8006162 <_strtod_l+0xa6a>
 800615a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	f43f ad8a 	beq.w	8005c76 <_strtod_l+0x57e>
 8006162:	2600      	movs	r6, #0
 8006164:	4f36      	ldr	r7, [pc, #216]	; (8006240 <_strtod_l+0xb48>)
 8006166:	2400      	movs	r4, #0
 8006168:	e791      	b.n	800608e <_strtod_l+0x996>
 800616a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800616c:	4d33      	ldr	r5, [pc, #204]	; (800623c <_strtod_l+0xb44>)
 800616e:	e7ea      	b.n	8006146 <_strtod_l+0xa4e>
 8006170:	4b32      	ldr	r3, [pc, #200]	; (800623c <_strtod_l+0xb44>)
 8006172:	2200      	movs	r2, #0
 8006174:	4630      	mov	r0, r6
 8006176:	4639      	mov	r1, r7
 8006178:	f7fa f9ae 	bl	80004d8 <__aeabi_dmul>
 800617c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800617e:	4604      	mov	r4, r0
 8006180:	460d      	mov	r5, r1
 8006182:	b933      	cbnz	r3, 8006192 <_strtod_l+0xa9a>
 8006184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006188:	9010      	str	r0, [sp, #64]	; 0x40
 800618a:	9311      	str	r3, [sp, #68]	; 0x44
 800618c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006190:	e77e      	b.n	8006090 <_strtod_l+0x998>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800619a:	e7f7      	b.n	800618c <_strtod_l+0xa94>
 800619c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80061a0:	9b05      	ldr	r3, [sp, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1a8      	bne.n	80060f8 <_strtod_l+0xa00>
 80061a6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80061aa:	0d1b      	lsrs	r3, r3, #20
 80061ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ae:	051b      	lsls	r3, r3, #20
 80061b0:	429a      	cmp	r2, r3
 80061b2:	4656      	mov	r6, sl
 80061b4:	d1a0      	bne.n	80060f8 <_strtod_l+0xa00>
 80061b6:	4629      	mov	r1, r5
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7fa fc27 	bl	8000a0c <__aeabi_d2iz>
 80061be:	f7fa f921 	bl	8000404 <__aeabi_i2d>
 80061c2:	460b      	mov	r3, r1
 80061c4:	4602      	mov	r2, r0
 80061c6:	4629      	mov	r1, r5
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7f9 ffcd 	bl	8000168 <__aeabi_dsub>
 80061ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061d0:	4604      	mov	r4, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	b933      	cbnz	r3, 80061e4 <_strtod_l+0xaec>
 80061d6:	f1b9 0f00 	cmp.w	r9, #0
 80061da:	d103      	bne.n	80061e4 <_strtod_l+0xaec>
 80061dc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	d06a      	beq.n	80062ba <_strtod_l+0xbc2>
 80061e4:	a30a      	add	r3, pc, #40	; (adr r3, 8006210 <_strtod_l+0xb18>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7fa fbe5 	bl	80009bc <__aeabi_dcmplt>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f47f acad 	bne.w	8005b52 <_strtod_l+0x45a>
 80061f8:	a307      	add	r3, pc, #28	; (adr r3, 8006218 <_strtod_l+0xb20>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7fa fbf9 	bl	80009f8 <__aeabi_dcmpgt>
 8006206:	2800      	cmp	r0, #0
 8006208:	f43f af76 	beq.w	80060f8 <_strtod_l+0xa00>
 800620c:	e4a1      	b.n	8005b52 <_strtod_l+0x45a>
 800620e:	bf00      	nop
 8006210:	94a03595 	.word	0x94a03595
 8006214:	3fdfffff 	.word	0x3fdfffff
 8006218:	35afe535 	.word	0x35afe535
 800621c:	3fe00000 	.word	0x3fe00000
 8006220:	000fffff 	.word	0x000fffff
 8006224:	7ff00000 	.word	0x7ff00000
 8006228:	7fefffff 	.word	0x7fefffff
 800622c:	39500000 	.word	0x39500000
 8006230:	3ff00000 	.word	0x3ff00000
 8006234:	7fe00000 	.word	0x7fe00000
 8006238:	7c9fffff 	.word	0x7c9fffff
 800623c:	3fe00000 	.word	0x3fe00000
 8006240:	bff00000 	.word	0xbff00000
 8006244:	9b05      	ldr	r3, [sp, #20]
 8006246:	b313      	cbz	r3, 800628e <_strtod_l+0xb96>
 8006248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800624a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800624e:	d81e      	bhi.n	800628e <_strtod_l+0xb96>
 8006250:	a325      	add	r3, pc, #148	; (adr r3, 80062e8 <_strtod_l+0xbf0>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa fbb9 	bl	80009d0 <__aeabi_dcmple>
 800625e:	b190      	cbz	r0, 8006286 <_strtod_l+0xb8e>
 8006260:	4629      	mov	r1, r5
 8006262:	4620      	mov	r0, r4
 8006264:	f7fa fbfa 	bl	8000a5c <__aeabi_d2uiz>
 8006268:	2800      	cmp	r0, #0
 800626a:	bf08      	it	eq
 800626c:	2001      	moveq	r0, #1
 800626e:	f7fa f8b9 	bl	80003e4 <__aeabi_ui2d>
 8006272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	b9d3      	cbnz	r3, 80062b0 <_strtod_l+0xbb8>
 800627a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800627e:	9012      	str	r0, [sp, #72]	; 0x48
 8006280:	9313      	str	r3, [sp, #76]	; 0x4c
 8006282:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006288:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800628c:	1a9f      	subs	r7, r3, r2
 800628e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006292:	f001 f8f3 	bl	800747c <__ulp>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062a6:	f7f9 ff61 	bl	800016c <__adddf3>
 80062aa:	4681      	mov	r9, r0
 80062ac:	468a      	mov	sl, r1
 80062ae:	e777      	b.n	80061a0 <_strtod_l+0xaa8>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80062b8:	e7e3      	b.n	8006282 <_strtod_l+0xb8a>
 80062ba:	a30d      	add	r3, pc, #52	; (adr r3, 80062f0 <_strtod_l+0xbf8>)
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f7fa fb7c 	bl	80009bc <__aeabi_dcmplt>
 80062c4:	e79f      	b.n	8006206 <_strtod_l+0xb0e>
 80062c6:	2300      	movs	r3, #0
 80062c8:	930d      	str	r3, [sp, #52]	; 0x34
 80062ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	f7ff ba55 	b.w	800577e <_strtod_l+0x86>
 80062d4:	2b65      	cmp	r3, #101	; 0x65
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f43f ab42 	beq.w	8005962 <_strtod_l+0x26a>
 80062de:	2101      	movs	r1, #1
 80062e0:	4614      	mov	r4, r2
 80062e2:	9105      	str	r1, [sp, #20]
 80062e4:	f7ff babf 	b.w	8005866 <_strtod_l+0x16e>
 80062e8:	ffc00000 	.word	0xffc00000
 80062ec:	41dfffff 	.word	0x41dfffff
 80062f0:	94a03595 	.word	0x94a03595
 80062f4:	3fcfffff 	.word	0x3fcfffff

080062f8 <strtod>:
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <strtod+0x1c>)
 80062fa:	b410      	push	{r4}
 80062fc:	681c      	ldr	r4, [r3, #0]
 80062fe:	4a06      	ldr	r2, [pc, #24]	; (8006318 <strtod+0x20>)
 8006300:	6a23      	ldr	r3, [r4, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf08      	it	eq
 8006306:	4613      	moveq	r3, r2
 8006308:	460a      	mov	r2, r1
 800630a:	4601      	mov	r1, r0
 800630c:	4620      	mov	r0, r4
 800630e:	bc10      	pop	{r4}
 8006310:	f7ff b9f2 	b.w	80056f8 <_strtod_l>
 8006314:	20000064 	.word	0x20000064
 8006318:	200000c8 	.word	0x200000c8

0800631c <__swbuf_r>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	460e      	mov	r6, r1
 8006320:	4614      	mov	r4, r2
 8006322:	4605      	mov	r5, r0
 8006324:	b118      	cbz	r0, 800632e <__swbuf_r+0x12>
 8006326:	6983      	ldr	r3, [r0, #24]
 8006328:	b90b      	cbnz	r3, 800632e <__swbuf_r+0x12>
 800632a:	f000 f9a7 	bl	800667c <__sinit>
 800632e:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <__swbuf_r+0x98>)
 8006330:	429c      	cmp	r4, r3
 8006332:	d12a      	bne.n	800638a <__swbuf_r+0x6e>
 8006334:	686c      	ldr	r4, [r5, #4]
 8006336:	69a3      	ldr	r3, [r4, #24]
 8006338:	60a3      	str	r3, [r4, #8]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	071a      	lsls	r2, r3, #28
 800633e:	d52e      	bpl.n	800639e <__swbuf_r+0x82>
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	b363      	cbz	r3, 800639e <__swbuf_r+0x82>
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	b2f6      	uxtb	r6, r6
 800634a:	1ac0      	subs	r0, r0, r3
 800634c:	6963      	ldr	r3, [r4, #20]
 800634e:	4637      	mov	r7, r6
 8006350:	4283      	cmp	r3, r0
 8006352:	dc04      	bgt.n	800635e <__swbuf_r+0x42>
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f926 	bl	80065a8 <_fflush_r>
 800635c:	bb28      	cbnz	r0, 80063aa <__swbuf_r+0x8e>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	3001      	adds	r0, #1
 8006362:	3b01      	subs	r3, #1
 8006364:	60a3      	str	r3, [r4, #8]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	6022      	str	r2, [r4, #0]
 800636c:	701e      	strb	r6, [r3, #0]
 800636e:	6963      	ldr	r3, [r4, #20]
 8006370:	4283      	cmp	r3, r0
 8006372:	d004      	beq.n	800637e <__swbuf_r+0x62>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d519      	bpl.n	80063ae <__swbuf_r+0x92>
 800637a:	2e0a      	cmp	r6, #10
 800637c:	d117      	bne.n	80063ae <__swbuf_r+0x92>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f911 	bl	80065a8 <_fflush_r>
 8006386:	b190      	cbz	r0, 80063ae <__swbuf_r+0x92>
 8006388:	e00f      	b.n	80063aa <__swbuf_r+0x8e>
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <__swbuf_r+0x9c>)
 800638c:	429c      	cmp	r4, r3
 800638e:	d101      	bne.n	8006394 <__swbuf_r+0x78>
 8006390:	68ac      	ldr	r4, [r5, #8]
 8006392:	e7d0      	b.n	8006336 <__swbuf_r+0x1a>
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <__swbuf_r+0xa0>)
 8006396:	429c      	cmp	r4, r3
 8006398:	bf08      	it	eq
 800639a:	68ec      	ldreq	r4, [r5, #12]
 800639c:	e7cb      	b.n	8006336 <__swbuf_r+0x1a>
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f80d 	bl	80063c0 <__swsetup_r>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d0cc      	beq.n	8006344 <__swbuf_r+0x28>
 80063aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80063ae:	4638      	mov	r0, r7
 80063b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	08007b00 	.word	0x08007b00
 80063b8:	08007b20 	.word	0x08007b20
 80063bc:	08007ae0 	.word	0x08007ae0

080063c0 <__swsetup_r>:
 80063c0:	4b32      	ldr	r3, [pc, #200]	; (800648c <__swsetup_r+0xcc>)
 80063c2:	b570      	push	{r4, r5, r6, lr}
 80063c4:	681d      	ldr	r5, [r3, #0]
 80063c6:	4606      	mov	r6, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	b125      	cbz	r5, 80063d6 <__swsetup_r+0x16>
 80063cc:	69ab      	ldr	r3, [r5, #24]
 80063ce:	b913      	cbnz	r3, 80063d6 <__swsetup_r+0x16>
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f953 	bl	800667c <__sinit>
 80063d6:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <__swsetup_r+0xd0>)
 80063d8:	429c      	cmp	r4, r3
 80063da:	d10f      	bne.n	80063fc <__swsetup_r+0x3c>
 80063dc:	686c      	ldr	r4, [r5, #4]
 80063de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	0715      	lsls	r5, r2, #28
 80063e6:	d42c      	bmi.n	8006442 <__swsetup_r+0x82>
 80063e8:	06d0      	lsls	r0, r2, #27
 80063ea:	d411      	bmi.n	8006410 <__swsetup_r+0x50>
 80063ec:	2209      	movs	r2, #9
 80063ee:	6032      	str	r2, [r6, #0]
 80063f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063fa:	e03e      	b.n	800647a <__swsetup_r+0xba>
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <__swsetup_r+0xd4>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d101      	bne.n	8006406 <__swsetup_r+0x46>
 8006402:	68ac      	ldr	r4, [r5, #8]
 8006404:	e7eb      	b.n	80063de <__swsetup_r+0x1e>
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <__swsetup_r+0xd8>)
 8006408:	429c      	cmp	r4, r3
 800640a:	bf08      	it	eq
 800640c:	68ec      	ldreq	r4, [r5, #12]
 800640e:	e7e6      	b.n	80063de <__swsetup_r+0x1e>
 8006410:	0751      	lsls	r1, r2, #29
 8006412:	d512      	bpl.n	800643a <__swsetup_r+0x7a>
 8006414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006416:	b141      	cbz	r1, 800642a <__swsetup_r+0x6a>
 8006418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800641c:	4299      	cmp	r1, r3
 800641e:	d002      	beq.n	8006426 <__swsetup_r+0x66>
 8006420:	4630      	mov	r0, r6
 8006422:	f001 f967 	bl	80076f4 <_free_r>
 8006426:	2300      	movs	r3, #0
 8006428:	6363      	str	r3, [r4, #52]	; 0x34
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	2300      	movs	r3, #0
 8006434:	6063      	str	r3, [r4, #4]
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	b94b      	cbnz	r3, 800645a <__swsetup_r+0x9a>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d003      	beq.n	800645a <__swsetup_r+0x9a>
 8006452:	4621      	mov	r1, r4
 8006454:	4630      	mov	r0, r6
 8006456:	f000 fce9 	bl	8006e2c <__smakebuf_r>
 800645a:	89a2      	ldrh	r2, [r4, #12]
 800645c:	f012 0301 	ands.w	r3, r2, #1
 8006460:	d00c      	beq.n	800647c <__swsetup_r+0xbc>
 8006462:	2300      	movs	r3, #0
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	6963      	ldr	r3, [r4, #20]
 8006468:	425b      	negs	r3, r3
 800646a:	61a3      	str	r3, [r4, #24]
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	b953      	cbnz	r3, 8006486 <__swsetup_r+0xc6>
 8006470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006474:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006478:	d1ba      	bne.n	80063f0 <__swsetup_r+0x30>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	0792      	lsls	r2, r2, #30
 800647e:	bf58      	it	pl
 8006480:	6963      	ldrpl	r3, [r4, #20]
 8006482:	60a3      	str	r3, [r4, #8]
 8006484:	e7f2      	b.n	800646c <__swsetup_r+0xac>
 8006486:	2000      	movs	r0, #0
 8006488:	e7f7      	b.n	800647a <__swsetup_r+0xba>
 800648a:	bf00      	nop
 800648c:	20000064 	.word	0x20000064
 8006490:	08007b00 	.word	0x08007b00
 8006494:	08007b20 	.word	0x08007b20
 8006498:	08007ae0 	.word	0x08007ae0

0800649c <__sflush_r>:
 800649c:	898a      	ldrh	r2, [r1, #12]
 800649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a2:	4605      	mov	r5, r0
 80064a4:	0710      	lsls	r0, r2, #28
 80064a6:	460c      	mov	r4, r1
 80064a8:	d458      	bmi.n	800655c <__sflush_r+0xc0>
 80064aa:	684b      	ldr	r3, [r1, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dc05      	bgt.n	80064bc <__sflush_r+0x20>
 80064b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dc02      	bgt.n	80064bc <__sflush_r+0x20>
 80064b6:	2000      	movs	r0, #0
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064be:	2e00      	cmp	r6, #0
 80064c0:	d0f9      	beq.n	80064b6 <__sflush_r+0x1a>
 80064c2:	2300      	movs	r3, #0
 80064c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064c8:	682f      	ldr	r7, [r5, #0]
 80064ca:	6a21      	ldr	r1, [r4, #32]
 80064cc:	602b      	str	r3, [r5, #0]
 80064ce:	d032      	beq.n	8006536 <__sflush_r+0x9a>
 80064d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	075a      	lsls	r2, r3, #29
 80064d6:	d505      	bpl.n	80064e4 <__sflush_r+0x48>
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	1ac0      	subs	r0, r0, r3
 80064dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064de:	b10b      	cbz	r3, 80064e4 <__sflush_r+0x48>
 80064e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064e2:	1ac0      	subs	r0, r0, r3
 80064e4:	2300      	movs	r3, #0
 80064e6:	4602      	mov	r2, r0
 80064e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ea:	6a21      	ldr	r1, [r4, #32]
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b0      	blx	r6
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	d106      	bne.n	8006504 <__sflush_r+0x68>
 80064f6:	6829      	ldr	r1, [r5, #0]
 80064f8:	291d      	cmp	r1, #29
 80064fa:	d848      	bhi.n	800658e <__sflush_r+0xf2>
 80064fc:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <__sflush_r+0x108>)
 80064fe:	40ca      	lsrs	r2, r1
 8006500:	07d6      	lsls	r6, r2, #31
 8006502:	d544      	bpl.n	800658e <__sflush_r+0xf2>
 8006504:	2200      	movs	r2, #0
 8006506:	6062      	str	r2, [r4, #4]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	04d9      	lsls	r1, r3, #19
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	d504      	bpl.n	800651a <__sflush_r+0x7e>
 8006510:	1c42      	adds	r2, r0, #1
 8006512:	d101      	bne.n	8006518 <__sflush_r+0x7c>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b903      	cbnz	r3, 800651a <__sflush_r+0x7e>
 8006518:	6560      	str	r0, [r4, #84]	; 0x54
 800651a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800651c:	602f      	str	r7, [r5, #0]
 800651e:	2900      	cmp	r1, #0
 8006520:	d0c9      	beq.n	80064b6 <__sflush_r+0x1a>
 8006522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006526:	4299      	cmp	r1, r3
 8006528:	d002      	beq.n	8006530 <__sflush_r+0x94>
 800652a:	4628      	mov	r0, r5
 800652c:	f001 f8e2 	bl	80076f4 <_free_r>
 8006530:	2000      	movs	r0, #0
 8006532:	6360      	str	r0, [r4, #52]	; 0x34
 8006534:	e7c0      	b.n	80064b8 <__sflush_r+0x1c>
 8006536:	2301      	movs	r3, #1
 8006538:	4628      	mov	r0, r5
 800653a:	47b0      	blx	r6
 800653c:	1c41      	adds	r1, r0, #1
 800653e:	d1c8      	bne.n	80064d2 <__sflush_r+0x36>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0c5      	beq.n	80064d2 <__sflush_r+0x36>
 8006546:	2b1d      	cmp	r3, #29
 8006548:	d001      	beq.n	800654e <__sflush_r+0xb2>
 800654a:	2b16      	cmp	r3, #22
 800654c:	d101      	bne.n	8006552 <__sflush_r+0xb6>
 800654e:	602f      	str	r7, [r5, #0]
 8006550:	e7b1      	b.n	80064b6 <__sflush_r+0x1a>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	e7ad      	b.n	80064b8 <__sflush_r+0x1c>
 800655c:	690f      	ldr	r7, [r1, #16]
 800655e:	2f00      	cmp	r7, #0
 8006560:	d0a9      	beq.n	80064b6 <__sflush_r+0x1a>
 8006562:	0793      	lsls	r3, r2, #30
 8006564:	bf18      	it	ne
 8006566:	2300      	movne	r3, #0
 8006568:	680e      	ldr	r6, [r1, #0]
 800656a:	bf08      	it	eq
 800656c:	694b      	ldreq	r3, [r1, #20]
 800656e:	eba6 0807 	sub.w	r8, r6, r7
 8006572:	600f      	str	r7, [r1, #0]
 8006574:	608b      	str	r3, [r1, #8]
 8006576:	f1b8 0f00 	cmp.w	r8, #0
 800657a:	dd9c      	ble.n	80064b6 <__sflush_r+0x1a>
 800657c:	4643      	mov	r3, r8
 800657e:	463a      	mov	r2, r7
 8006580:	6a21      	ldr	r1, [r4, #32]
 8006582:	4628      	mov	r0, r5
 8006584:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006586:	47b0      	blx	r6
 8006588:	2800      	cmp	r0, #0
 800658a:	dc06      	bgt.n	800659a <__sflush_r+0xfe>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006598:	e78e      	b.n	80064b8 <__sflush_r+0x1c>
 800659a:	4407      	add	r7, r0
 800659c:	eba8 0800 	sub.w	r8, r8, r0
 80065a0:	e7e9      	b.n	8006576 <__sflush_r+0xda>
 80065a2:	bf00      	nop
 80065a4:	20400001 	.word	0x20400001

080065a8 <_fflush_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	690b      	ldr	r3, [r1, #16]
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	b1db      	cbz	r3, 80065ea <_fflush_r+0x42>
 80065b2:	b118      	cbz	r0, 80065bc <_fflush_r+0x14>
 80065b4:	6983      	ldr	r3, [r0, #24]
 80065b6:	b90b      	cbnz	r3, 80065bc <_fflush_r+0x14>
 80065b8:	f000 f860 	bl	800667c <__sinit>
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <_fflush_r+0x48>)
 80065be:	429c      	cmp	r4, r3
 80065c0:	d109      	bne.n	80065d6 <_fflush_r+0x2e>
 80065c2:	686c      	ldr	r4, [r5, #4]
 80065c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c8:	b17b      	cbz	r3, 80065ea <_fflush_r+0x42>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4628      	mov	r0, r5
 80065ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065d2:	f7ff bf63 	b.w	800649c <__sflush_r>
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <_fflush_r+0x4c>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d101      	bne.n	80065e0 <_fflush_r+0x38>
 80065dc:	68ac      	ldr	r4, [r5, #8]
 80065de:	e7f1      	b.n	80065c4 <_fflush_r+0x1c>
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <_fflush_r+0x50>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	bf08      	it	eq
 80065e6:	68ec      	ldreq	r4, [r5, #12]
 80065e8:	e7ec      	b.n	80065c4 <_fflush_r+0x1c>
 80065ea:	2000      	movs	r0, #0
 80065ec:	bd38      	pop	{r3, r4, r5, pc}
 80065ee:	bf00      	nop
 80065f0:	08007b00 	.word	0x08007b00
 80065f4:	08007b20 	.word	0x08007b20
 80065f8:	08007ae0 	.word	0x08007ae0

080065fc <std>:
 80065fc:	2300      	movs	r3, #0
 80065fe:	b510      	push	{r4, lr}
 8006600:	4604      	mov	r4, r0
 8006602:	e9c0 3300 	strd	r3, r3, [r0]
 8006606:	6083      	str	r3, [r0, #8]
 8006608:	8181      	strh	r1, [r0, #12]
 800660a:	6643      	str	r3, [r0, #100]	; 0x64
 800660c:	81c2      	strh	r2, [r0, #14]
 800660e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006612:	6183      	str	r3, [r0, #24]
 8006614:	4619      	mov	r1, r3
 8006616:	2208      	movs	r2, #8
 8006618:	305c      	adds	r0, #92	; 0x5c
 800661a:	f7fe ffdd 	bl	80055d8 <memset>
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <std+0x38>)
 8006620:	6224      	str	r4, [r4, #32]
 8006622:	6263      	str	r3, [r4, #36]	; 0x24
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <std+0x3c>)
 8006626:	62a3      	str	r3, [r4, #40]	; 0x28
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <std+0x40>)
 800662a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <std+0x44>)
 800662e:	6323      	str	r3, [r4, #48]	; 0x30
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	08007861 	.word	0x08007861
 8006638:	08007883 	.word	0x08007883
 800663c:	080078bb 	.word	0x080078bb
 8006640:	080078df 	.word	0x080078df

08006644 <_cleanup_r>:
 8006644:	4901      	ldr	r1, [pc, #4]	; (800664c <_cleanup_r+0x8>)
 8006646:	f000 b885 	b.w	8006754 <_fwalk_reent>
 800664a:	bf00      	nop
 800664c:	080065a9 	.word	0x080065a9

08006650 <__sfmoreglue>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	2568      	movs	r5, #104	; 0x68
 8006654:	1e4a      	subs	r2, r1, #1
 8006656:	4355      	muls	r5, r2
 8006658:	460e      	mov	r6, r1
 800665a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800665e:	f001 f895 	bl	800778c <_malloc_r>
 8006662:	4604      	mov	r4, r0
 8006664:	b140      	cbz	r0, 8006678 <__sfmoreglue+0x28>
 8006666:	2100      	movs	r1, #0
 8006668:	e9c0 1600 	strd	r1, r6, [r0]
 800666c:	300c      	adds	r0, #12
 800666e:	60a0      	str	r0, [r4, #8]
 8006670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006674:	f7fe ffb0 	bl	80055d8 <memset>
 8006678:	4620      	mov	r0, r4
 800667a:	bd70      	pop	{r4, r5, r6, pc}

0800667c <__sinit>:
 800667c:	6983      	ldr	r3, [r0, #24]
 800667e:	b510      	push	{r4, lr}
 8006680:	4604      	mov	r4, r0
 8006682:	bb33      	cbnz	r3, 80066d2 <__sinit+0x56>
 8006684:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006688:	6503      	str	r3, [r0, #80]	; 0x50
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <__sinit+0x58>)
 800668c:	4a12      	ldr	r2, [pc, #72]	; (80066d8 <__sinit+0x5c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6282      	str	r2, [r0, #40]	; 0x28
 8006692:	4298      	cmp	r0, r3
 8006694:	bf04      	itt	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	6183      	streq	r3, [r0, #24]
 800669a:	f000 f81f 	bl	80066dc <__sfp>
 800669e:	6060      	str	r0, [r4, #4]
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 f81b 	bl	80066dc <__sfp>
 80066a6:	60a0      	str	r0, [r4, #8]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 f817 	bl	80066dc <__sfp>
 80066ae:	2200      	movs	r2, #0
 80066b0:	60e0      	str	r0, [r4, #12]
 80066b2:	2104      	movs	r1, #4
 80066b4:	6860      	ldr	r0, [r4, #4]
 80066b6:	f7ff ffa1 	bl	80065fc <std>
 80066ba:	2201      	movs	r2, #1
 80066bc:	2109      	movs	r1, #9
 80066be:	68a0      	ldr	r0, [r4, #8]
 80066c0:	f7ff ff9c 	bl	80065fc <std>
 80066c4:	2202      	movs	r2, #2
 80066c6:	2112      	movs	r1, #18
 80066c8:	68e0      	ldr	r0, [r4, #12]
 80066ca:	f7ff ff97 	bl	80065fc <std>
 80066ce:	2301      	movs	r3, #1
 80066d0:	61a3      	str	r3, [r4, #24]
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	08007a7c 	.word	0x08007a7c
 80066d8:	08006645 	.word	0x08006645

080066dc <__sfp>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	4b1b      	ldr	r3, [pc, #108]	; (800674c <__sfp+0x70>)
 80066e0:	4607      	mov	r7, r0
 80066e2:	681e      	ldr	r6, [r3, #0]
 80066e4:	69b3      	ldr	r3, [r6, #24]
 80066e6:	b913      	cbnz	r3, 80066ee <__sfp+0x12>
 80066e8:	4630      	mov	r0, r6
 80066ea:	f7ff ffc7 	bl	800667c <__sinit>
 80066ee:	3648      	adds	r6, #72	; 0x48
 80066f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	d503      	bpl.n	8006700 <__sfp+0x24>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	b133      	cbz	r3, 800670a <__sfp+0x2e>
 80066fc:	6836      	ldr	r6, [r6, #0]
 80066fe:	e7f7      	b.n	80066f0 <__sfp+0x14>
 8006700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006704:	b16d      	cbz	r5, 8006722 <__sfp+0x46>
 8006706:	3468      	adds	r4, #104	; 0x68
 8006708:	e7f4      	b.n	80066f4 <__sfp+0x18>
 800670a:	2104      	movs	r1, #4
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff ff9f 	bl	8006650 <__sfmoreglue>
 8006712:	6030      	str	r0, [r6, #0]
 8006714:	2800      	cmp	r0, #0
 8006716:	d1f1      	bne.n	80066fc <__sfp+0x20>
 8006718:	230c      	movs	r3, #12
 800671a:	4604      	mov	r4, r0
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4620      	mov	r0, r4
 8006720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <__sfp+0x74>)
 8006724:	6665      	str	r5, [r4, #100]	; 0x64
 8006726:	e9c4 5500 	strd	r5, r5, [r4]
 800672a:	60a5      	str	r5, [r4, #8]
 800672c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006730:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006734:	2208      	movs	r2, #8
 8006736:	4629      	mov	r1, r5
 8006738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800673c:	f7fe ff4c 	bl	80055d8 <memset>
 8006740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006748:	e7e9      	b.n	800671e <__sfp+0x42>
 800674a:	bf00      	nop
 800674c:	08007a7c 	.word	0x08007a7c
 8006750:	ffff0001 	.word	0xffff0001

08006754 <_fwalk_reent>:
 8006754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006758:	4680      	mov	r8, r0
 800675a:	4689      	mov	r9, r1
 800675c:	2600      	movs	r6, #0
 800675e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006762:	b914      	cbnz	r4, 800676a <_fwalk_reent+0x16>
 8006764:	4630      	mov	r0, r6
 8006766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800676e:	3f01      	subs	r7, #1
 8006770:	d501      	bpl.n	8006776 <_fwalk_reent+0x22>
 8006772:	6824      	ldr	r4, [r4, #0]
 8006774:	e7f5      	b.n	8006762 <_fwalk_reent+0xe>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d907      	bls.n	800678c <_fwalk_reent+0x38>
 800677c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006780:	3301      	adds	r3, #1
 8006782:	d003      	beq.n	800678c <_fwalk_reent+0x38>
 8006784:	4629      	mov	r1, r5
 8006786:	4640      	mov	r0, r8
 8006788:	47c8      	blx	r9
 800678a:	4306      	orrs	r6, r0
 800678c:	3568      	adds	r5, #104	; 0x68
 800678e:	e7ee      	b.n	800676e <_fwalk_reent+0x1a>

08006790 <rshift>:
 8006790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006792:	6906      	ldr	r6, [r0, #16]
 8006794:	114b      	asrs	r3, r1, #5
 8006796:	429e      	cmp	r6, r3
 8006798:	f100 0414 	add.w	r4, r0, #20
 800679c:	dd31      	ble.n	8006802 <rshift+0x72>
 800679e:	f011 011f 	ands.w	r1, r1, #31
 80067a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80067a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80067aa:	d108      	bne.n	80067be <rshift+0x2e>
 80067ac:	4621      	mov	r1, r4
 80067ae:	42b2      	cmp	r2, r6
 80067b0:	460b      	mov	r3, r1
 80067b2:	d211      	bcs.n	80067d8 <rshift+0x48>
 80067b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80067b8:	f841 3b04 	str.w	r3, [r1], #4
 80067bc:	e7f7      	b.n	80067ae <rshift+0x1e>
 80067be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80067c2:	4623      	mov	r3, r4
 80067c4:	f1c1 0c20 	rsb	ip, r1, #32
 80067c8:	40cd      	lsrs	r5, r1
 80067ca:	3204      	adds	r2, #4
 80067cc:	42b2      	cmp	r2, r6
 80067ce:	4617      	mov	r7, r2
 80067d0:	d30d      	bcc.n	80067ee <rshift+0x5e>
 80067d2:	601d      	str	r5, [r3, #0]
 80067d4:	b105      	cbz	r5, 80067d8 <rshift+0x48>
 80067d6:	3304      	adds	r3, #4
 80067d8:	42a3      	cmp	r3, r4
 80067da:	eba3 0204 	sub.w	r2, r3, r4
 80067de:	bf08      	it	eq
 80067e0:	2300      	moveq	r3, #0
 80067e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80067e6:	6102      	str	r2, [r0, #16]
 80067e8:	bf08      	it	eq
 80067ea:	6143      	streq	r3, [r0, #20]
 80067ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ee:	683f      	ldr	r7, [r7, #0]
 80067f0:	fa07 f70c 	lsl.w	r7, r7, ip
 80067f4:	433d      	orrs	r5, r7
 80067f6:	f843 5b04 	str.w	r5, [r3], #4
 80067fa:	f852 5b04 	ldr.w	r5, [r2], #4
 80067fe:	40cd      	lsrs	r5, r1
 8006800:	e7e4      	b.n	80067cc <rshift+0x3c>
 8006802:	4623      	mov	r3, r4
 8006804:	e7e8      	b.n	80067d8 <rshift+0x48>

08006806 <__hexdig_fun>:
 8006806:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800680a:	2b09      	cmp	r3, #9
 800680c:	d802      	bhi.n	8006814 <__hexdig_fun+0xe>
 800680e:	3820      	subs	r0, #32
 8006810:	b2c0      	uxtb	r0, r0
 8006812:	4770      	bx	lr
 8006814:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006818:	2b05      	cmp	r3, #5
 800681a:	d801      	bhi.n	8006820 <__hexdig_fun+0x1a>
 800681c:	3847      	subs	r0, #71	; 0x47
 800681e:	e7f7      	b.n	8006810 <__hexdig_fun+0xa>
 8006820:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006824:	2b05      	cmp	r3, #5
 8006826:	d801      	bhi.n	800682c <__hexdig_fun+0x26>
 8006828:	3827      	subs	r0, #39	; 0x27
 800682a:	e7f1      	b.n	8006810 <__hexdig_fun+0xa>
 800682c:	2000      	movs	r0, #0
 800682e:	4770      	bx	lr

08006830 <__gethex>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	b08b      	sub	sp, #44	; 0x2c
 8006836:	9002      	str	r0, [sp, #8]
 8006838:	9816      	ldr	r0, [sp, #88]	; 0x58
 800683a:	468a      	mov	sl, r1
 800683c:	4690      	mov	r8, r2
 800683e:	9306      	str	r3, [sp, #24]
 8006840:	f000 face 	bl	8006de0 <__localeconv_l>
 8006844:	6803      	ldr	r3, [r0, #0]
 8006846:	f04f 0b00 	mov.w	fp, #0
 800684a:	4618      	mov	r0, r3
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	f7f9 fc7f 	bl	8000150 <strlen>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	9001      	str	r0, [sp, #4]
 8006856:	4403      	add	r3, r0
 8006858:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800685c:	9307      	str	r3, [sp, #28]
 800685e:	f8da 3000 	ldr.w	r3, [sl]
 8006862:	3302      	adds	r3, #2
 8006864:	461f      	mov	r7, r3
 8006866:	f813 0b01 	ldrb.w	r0, [r3], #1
 800686a:	2830      	cmp	r0, #48	; 0x30
 800686c:	d06c      	beq.n	8006948 <__gethex+0x118>
 800686e:	f7ff ffca 	bl	8006806 <__hexdig_fun>
 8006872:	4604      	mov	r4, r0
 8006874:	2800      	cmp	r0, #0
 8006876:	d16a      	bne.n	800694e <__gethex+0x11e>
 8006878:	9a01      	ldr	r2, [sp, #4]
 800687a:	9903      	ldr	r1, [sp, #12]
 800687c:	4638      	mov	r0, r7
 800687e:	f001 f832 	bl	80078e6 <strncmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	d166      	bne.n	8006954 <__gethex+0x124>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	5cf8      	ldrb	r0, [r7, r3]
 800688a:	18fe      	adds	r6, r7, r3
 800688c:	f7ff ffbb 	bl	8006806 <__hexdig_fun>
 8006890:	2800      	cmp	r0, #0
 8006892:	d062      	beq.n	800695a <__gethex+0x12a>
 8006894:	4633      	mov	r3, r6
 8006896:	7818      	ldrb	r0, [r3, #0]
 8006898:	461f      	mov	r7, r3
 800689a:	2830      	cmp	r0, #48	; 0x30
 800689c:	f103 0301 	add.w	r3, r3, #1
 80068a0:	d0f9      	beq.n	8006896 <__gethex+0x66>
 80068a2:	f7ff ffb0 	bl	8006806 <__hexdig_fun>
 80068a6:	fab0 f580 	clz	r5, r0
 80068aa:	4634      	mov	r4, r6
 80068ac:	f04f 0b01 	mov.w	fp, #1
 80068b0:	096d      	lsrs	r5, r5, #5
 80068b2:	463a      	mov	r2, r7
 80068b4:	4616      	mov	r6, r2
 80068b6:	7830      	ldrb	r0, [r6, #0]
 80068b8:	3201      	adds	r2, #1
 80068ba:	f7ff ffa4 	bl	8006806 <__hexdig_fun>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d1f8      	bne.n	80068b4 <__gethex+0x84>
 80068c2:	9a01      	ldr	r2, [sp, #4]
 80068c4:	9903      	ldr	r1, [sp, #12]
 80068c6:	4630      	mov	r0, r6
 80068c8:	f001 f80d 	bl	80078e6 <strncmp>
 80068cc:	b950      	cbnz	r0, 80068e4 <__gethex+0xb4>
 80068ce:	b954      	cbnz	r4, 80068e6 <__gethex+0xb6>
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	18f4      	adds	r4, r6, r3
 80068d4:	4622      	mov	r2, r4
 80068d6:	4616      	mov	r6, r2
 80068d8:	7830      	ldrb	r0, [r6, #0]
 80068da:	3201      	adds	r2, #1
 80068dc:	f7ff ff93 	bl	8006806 <__hexdig_fun>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d1f8      	bne.n	80068d6 <__gethex+0xa6>
 80068e4:	b10c      	cbz	r4, 80068ea <__gethex+0xba>
 80068e6:	1ba4      	subs	r4, r4, r6
 80068e8:	00a4      	lsls	r4, r4, #2
 80068ea:	7833      	ldrb	r3, [r6, #0]
 80068ec:	2b50      	cmp	r3, #80	; 0x50
 80068ee:	d001      	beq.n	80068f4 <__gethex+0xc4>
 80068f0:	2b70      	cmp	r3, #112	; 0x70
 80068f2:	d140      	bne.n	8006976 <__gethex+0x146>
 80068f4:	7873      	ldrb	r3, [r6, #1]
 80068f6:	2b2b      	cmp	r3, #43	; 0x2b
 80068f8:	d031      	beq.n	800695e <__gethex+0x12e>
 80068fa:	2b2d      	cmp	r3, #45	; 0x2d
 80068fc:	d033      	beq.n	8006966 <__gethex+0x136>
 80068fe:	f04f 0900 	mov.w	r9, #0
 8006902:	1c71      	adds	r1, r6, #1
 8006904:	7808      	ldrb	r0, [r1, #0]
 8006906:	f7ff ff7e 	bl	8006806 <__hexdig_fun>
 800690a:	1e43      	subs	r3, r0, #1
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b18      	cmp	r3, #24
 8006910:	d831      	bhi.n	8006976 <__gethex+0x146>
 8006912:	f1a0 0210 	sub.w	r2, r0, #16
 8006916:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800691a:	f7ff ff74 	bl	8006806 <__hexdig_fun>
 800691e:	1e43      	subs	r3, r0, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b18      	cmp	r3, #24
 8006924:	d922      	bls.n	800696c <__gethex+0x13c>
 8006926:	f1b9 0f00 	cmp.w	r9, #0
 800692a:	d000      	beq.n	800692e <__gethex+0xfe>
 800692c:	4252      	negs	r2, r2
 800692e:	4414      	add	r4, r2
 8006930:	f8ca 1000 	str.w	r1, [sl]
 8006934:	b30d      	cbz	r5, 800697a <__gethex+0x14a>
 8006936:	f1bb 0f00 	cmp.w	fp, #0
 800693a:	bf0c      	ite	eq
 800693c:	2706      	moveq	r7, #6
 800693e:	2700      	movne	r7, #0
 8006940:	4638      	mov	r0, r7
 8006942:	b00b      	add	sp, #44	; 0x2c
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	f10b 0b01 	add.w	fp, fp, #1
 800694c:	e78a      	b.n	8006864 <__gethex+0x34>
 800694e:	2500      	movs	r5, #0
 8006950:	462c      	mov	r4, r5
 8006952:	e7ae      	b.n	80068b2 <__gethex+0x82>
 8006954:	463e      	mov	r6, r7
 8006956:	2501      	movs	r5, #1
 8006958:	e7c7      	b.n	80068ea <__gethex+0xba>
 800695a:	4604      	mov	r4, r0
 800695c:	e7fb      	b.n	8006956 <__gethex+0x126>
 800695e:	f04f 0900 	mov.w	r9, #0
 8006962:	1cb1      	adds	r1, r6, #2
 8006964:	e7ce      	b.n	8006904 <__gethex+0xd4>
 8006966:	f04f 0901 	mov.w	r9, #1
 800696a:	e7fa      	b.n	8006962 <__gethex+0x132>
 800696c:	230a      	movs	r3, #10
 800696e:	fb03 0202 	mla	r2, r3, r2, r0
 8006972:	3a10      	subs	r2, #16
 8006974:	e7cf      	b.n	8006916 <__gethex+0xe6>
 8006976:	4631      	mov	r1, r6
 8006978:	e7da      	b.n	8006930 <__gethex+0x100>
 800697a:	4629      	mov	r1, r5
 800697c:	1bf3      	subs	r3, r6, r7
 800697e:	3b01      	subs	r3, #1
 8006980:	2b07      	cmp	r3, #7
 8006982:	dc49      	bgt.n	8006a18 <__gethex+0x1e8>
 8006984:	9802      	ldr	r0, [sp, #8]
 8006986:	f000 faae 	bl	8006ee6 <_Balloc>
 800698a:	f04f 0b00 	mov.w	fp, #0
 800698e:	4605      	mov	r5, r0
 8006990:	46da      	mov	sl, fp
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	f100 0914 	add.w	r9, r0, #20
 8006998:	f1c3 0301 	rsb	r3, r3, #1
 800699c:	f8cd 9010 	str.w	r9, [sp, #16]
 80069a0:	9308      	str	r3, [sp, #32]
 80069a2:	42b7      	cmp	r7, r6
 80069a4:	d33b      	bcc.n	8006a1e <__gethex+0x1ee>
 80069a6:	9804      	ldr	r0, [sp, #16]
 80069a8:	f840 ab04 	str.w	sl, [r0], #4
 80069ac:	eba0 0009 	sub.w	r0, r0, r9
 80069b0:	1080      	asrs	r0, r0, #2
 80069b2:	6128      	str	r0, [r5, #16]
 80069b4:	0147      	lsls	r7, r0, #5
 80069b6:	4650      	mov	r0, sl
 80069b8:	f000 fb59 	bl	800706e <__hi0bits>
 80069bc:	f8d8 6000 	ldr.w	r6, [r8]
 80069c0:	1a3f      	subs	r7, r7, r0
 80069c2:	42b7      	cmp	r7, r6
 80069c4:	dd64      	ble.n	8006a90 <__gethex+0x260>
 80069c6:	1bbf      	subs	r7, r7, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fe63 	bl	8007696 <__any_on>
 80069d0:	4682      	mov	sl, r0
 80069d2:	b178      	cbz	r0, 80069f4 <__gethex+0x1c4>
 80069d4:	f04f 0a01 	mov.w	sl, #1
 80069d8:	1e7b      	subs	r3, r7, #1
 80069da:	1159      	asrs	r1, r3, #5
 80069dc:	f003 021f 	and.w	r2, r3, #31
 80069e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80069e4:	fa0a f202 	lsl.w	r2, sl, r2
 80069e8:	420a      	tst	r2, r1
 80069ea:	d003      	beq.n	80069f4 <__gethex+0x1c4>
 80069ec:	4553      	cmp	r3, sl
 80069ee:	dc46      	bgt.n	8006a7e <__gethex+0x24e>
 80069f0:	f04f 0a02 	mov.w	sl, #2
 80069f4:	4639      	mov	r1, r7
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7ff feca 	bl	8006790 <rshift>
 80069fc:	443c      	add	r4, r7
 80069fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	da52      	bge.n	8006aac <__gethex+0x27c>
 8006a06:	4629      	mov	r1, r5
 8006a08:	9802      	ldr	r0, [sp, #8]
 8006a0a:	f000 faa0 	bl	8006f4e <_Bfree>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a12:	27a3      	movs	r7, #163	; 0xa3
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e793      	b.n	8006940 <__gethex+0x110>
 8006a18:	3101      	adds	r1, #1
 8006a1a:	105b      	asrs	r3, r3, #1
 8006a1c:	e7b0      	b.n	8006980 <__gethex+0x150>
 8006a1e:	1e73      	subs	r3, r6, #1
 8006a20:	9305      	str	r3, [sp, #20]
 8006a22:	9a07      	ldr	r2, [sp, #28]
 8006a24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d018      	beq.n	8006a5e <__gethex+0x22e>
 8006a2c:	f1bb 0f20 	cmp.w	fp, #32
 8006a30:	d107      	bne.n	8006a42 <__gethex+0x212>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	f8c3 a000 	str.w	sl, [r3]
 8006a38:	f04f 0a00 	mov.w	sl, #0
 8006a3c:	46d3      	mov	fp, sl
 8006a3e:	3304      	adds	r3, #4
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006a46:	f7ff fede 	bl	8006806 <__hexdig_fun>
 8006a4a:	f000 000f 	and.w	r0, r0, #15
 8006a4e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006a52:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a56:	f10b 0b04 	add.w	fp, fp, #4
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	e00d      	b.n	8006a7a <__gethex+0x24a>
 8006a5e:	9b05      	ldr	r3, [sp, #20]
 8006a60:	9a08      	ldr	r2, [sp, #32]
 8006a62:	4413      	add	r3, r2
 8006a64:	42bb      	cmp	r3, r7
 8006a66:	d3e1      	bcc.n	8006a2c <__gethex+0x1fc>
 8006a68:	4618      	mov	r0, r3
 8006a6a:	9a01      	ldr	r2, [sp, #4]
 8006a6c:	9903      	ldr	r1, [sp, #12]
 8006a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a70:	f000 ff39 	bl	80078e6 <strncmp>
 8006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d1d8      	bne.n	8006a2c <__gethex+0x1fc>
 8006a7a:	461e      	mov	r6, r3
 8006a7c:	e791      	b.n	80069a2 <__gethex+0x172>
 8006a7e:	1eb9      	subs	r1, r7, #2
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fe08 	bl	8007696 <__any_on>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0b2      	beq.n	80069f0 <__gethex+0x1c0>
 8006a8a:	f04f 0a03 	mov.w	sl, #3
 8006a8e:	e7b1      	b.n	80069f4 <__gethex+0x1c4>
 8006a90:	da09      	bge.n	8006aa6 <__gethex+0x276>
 8006a92:	1bf7      	subs	r7, r6, r7
 8006a94:	4629      	mov	r1, r5
 8006a96:	463a      	mov	r2, r7
 8006a98:	9802      	ldr	r0, [sp, #8]
 8006a9a:	f000 fc23 	bl	80072e4 <__lshift>
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	1be4      	subs	r4, r4, r7
 8006aa2:	f100 0914 	add.w	r9, r0, #20
 8006aa6:	f04f 0a00 	mov.w	sl, #0
 8006aaa:	e7a8      	b.n	80069fe <__gethex+0x1ce>
 8006aac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ab0:	42a0      	cmp	r0, r4
 8006ab2:	dd6b      	ble.n	8006b8c <__gethex+0x35c>
 8006ab4:	1b04      	subs	r4, r0, r4
 8006ab6:	42a6      	cmp	r6, r4
 8006ab8:	dc2e      	bgt.n	8006b18 <__gethex+0x2e8>
 8006aba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d022      	beq.n	8006b08 <__gethex+0x2d8>
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d024      	beq.n	8006b10 <__gethex+0x2e0>
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d115      	bne.n	8006af6 <__gethex+0x2c6>
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	d113      	bne.n	8006af6 <__gethex+0x2c6>
 8006ace:	2e01      	cmp	r6, #1
 8006ad0:	dc0b      	bgt.n	8006aea <__gethex+0x2ba>
 8006ad2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ad6:	9a06      	ldr	r2, [sp, #24]
 8006ad8:	2762      	movs	r7, #98	; 0x62
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	2301      	movs	r3, #1
 8006ade:	612b      	str	r3, [r5, #16]
 8006ae0:	f8c9 3000 	str.w	r3, [r9]
 8006ae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ae6:	601d      	str	r5, [r3, #0]
 8006ae8:	e72a      	b.n	8006940 <__gethex+0x110>
 8006aea:	1e71      	subs	r1, r6, #1
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fdd2 	bl	8007696 <__any_on>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d1ed      	bne.n	8006ad2 <__gethex+0x2a2>
 8006af6:	4629      	mov	r1, r5
 8006af8:	9802      	ldr	r0, [sp, #8]
 8006afa:	f000 fa28 	bl	8006f4e <_Bfree>
 8006afe:	2300      	movs	r3, #0
 8006b00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b02:	2750      	movs	r7, #80	; 0x50
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e71b      	b.n	8006940 <__gethex+0x110>
 8006b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e1      	beq.n	8006ad2 <__gethex+0x2a2>
 8006b0e:	e7f2      	b.n	8006af6 <__gethex+0x2c6>
 8006b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1dd      	bne.n	8006ad2 <__gethex+0x2a2>
 8006b16:	e7ee      	b.n	8006af6 <__gethex+0x2c6>
 8006b18:	1e67      	subs	r7, r4, #1
 8006b1a:	f1ba 0f00 	cmp.w	sl, #0
 8006b1e:	d132      	bne.n	8006b86 <__gethex+0x356>
 8006b20:	b127      	cbz	r7, 8006b2c <__gethex+0x2fc>
 8006b22:	4639      	mov	r1, r7
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 fdb6 	bl	8007696 <__any_on>
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	117a      	asrs	r2, r7, #5
 8006b30:	f007 071f 	and.w	r7, r7, #31
 8006b34:	fa03 f707 	lsl.w	r7, r3, r7
 8006b38:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	421f      	tst	r7, r3
 8006b40:	f04f 0702 	mov.w	r7, #2
 8006b44:	4628      	mov	r0, r5
 8006b46:	bf18      	it	ne
 8006b48:	f04a 0a02 	orrne.w	sl, sl, #2
 8006b4c:	1b36      	subs	r6, r6, r4
 8006b4e:	f7ff fe1f 	bl	8006790 <rshift>
 8006b52:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006b56:	f1ba 0f00 	cmp.w	sl, #0
 8006b5a:	d048      	beq.n	8006bee <__gethex+0x3be>
 8006b5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d015      	beq.n	8006b90 <__gethex+0x360>
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d017      	beq.n	8006b98 <__gethex+0x368>
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d109      	bne.n	8006b80 <__gethex+0x350>
 8006b6c:	f01a 0f02 	tst.w	sl, #2
 8006b70:	d006      	beq.n	8006b80 <__gethex+0x350>
 8006b72:	f8d9 3000 	ldr.w	r3, [r9]
 8006b76:	ea4a 0a03 	orr.w	sl, sl, r3
 8006b7a:	f01a 0f01 	tst.w	sl, #1
 8006b7e:	d10e      	bne.n	8006b9e <__gethex+0x36e>
 8006b80:	f047 0710 	orr.w	r7, r7, #16
 8006b84:	e033      	b.n	8006bee <__gethex+0x3be>
 8006b86:	f04f 0a01 	mov.w	sl, #1
 8006b8a:	e7cf      	b.n	8006b2c <__gethex+0x2fc>
 8006b8c:	2701      	movs	r7, #1
 8006b8e:	e7e2      	b.n	8006b56 <__gethex+0x326>
 8006b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b92:	f1c3 0301 	rsb	r3, r3, #1
 8006b96:	9315      	str	r3, [sp, #84]	; 0x54
 8006b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <__gethex+0x350>
 8006b9e:	f04f 0c00 	mov.w	ip, #0
 8006ba2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006ba6:	f105 0314 	add.w	r3, r5, #20
 8006baa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006bae:	eb03 010a 	add.w	r1, r3, sl
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006bbc:	d01c      	beq.n	8006bf8 <__gethex+0x3c8>
 8006bbe:	3201      	adds	r2, #1
 8006bc0:	6002      	str	r2, [r0, #0]
 8006bc2:	2f02      	cmp	r7, #2
 8006bc4:	f105 0314 	add.w	r3, r5, #20
 8006bc8:	d138      	bne.n	8006c3c <__gethex+0x40c>
 8006bca:	f8d8 2000 	ldr.w	r2, [r8]
 8006bce:	3a01      	subs	r2, #1
 8006bd0:	42b2      	cmp	r2, r6
 8006bd2:	d10a      	bne.n	8006bea <__gethex+0x3ba>
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	1171      	asrs	r1, r6, #5
 8006bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bdc:	f006 061f 	and.w	r6, r6, #31
 8006be0:	fa02 f606 	lsl.w	r6, r2, r6
 8006be4:	421e      	tst	r6, r3
 8006be6:	bf18      	it	ne
 8006be8:	4617      	movne	r7, r2
 8006bea:	f047 0720 	orr.w	r7, r7, #32
 8006bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bf0:	601d      	str	r5, [r3, #0]
 8006bf2:	9b06      	ldr	r3, [sp, #24]
 8006bf4:	601c      	str	r4, [r3, #0]
 8006bf6:	e6a3      	b.n	8006940 <__gethex+0x110>
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	f843 cc04 	str.w	ip, [r3, #-4]
 8006bfe:	d8d8      	bhi.n	8006bb2 <__gethex+0x382>
 8006c00:	68ab      	ldr	r3, [r5, #8]
 8006c02:	4599      	cmp	r9, r3
 8006c04:	db12      	blt.n	8006c2c <__gethex+0x3fc>
 8006c06:	6869      	ldr	r1, [r5, #4]
 8006c08:	9802      	ldr	r0, [sp, #8]
 8006c0a:	3101      	adds	r1, #1
 8006c0c:	f000 f96b 	bl	8006ee6 <_Balloc>
 8006c10:	4683      	mov	fp, r0
 8006c12:	692a      	ldr	r2, [r5, #16]
 8006c14:	f105 010c 	add.w	r1, r5, #12
 8006c18:	3202      	adds	r2, #2
 8006c1a:	0092      	lsls	r2, r2, #2
 8006c1c:	300c      	adds	r0, #12
 8006c1e:	f000 f957 	bl	8006ed0 <memcpy>
 8006c22:	4629      	mov	r1, r5
 8006c24:	9802      	ldr	r0, [sp, #8]
 8006c26:	f000 f992 	bl	8006f4e <_Bfree>
 8006c2a:	465d      	mov	r5, fp
 8006c2c:	692b      	ldr	r3, [r5, #16]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	612a      	str	r2, [r5, #16]
 8006c32:	2201      	movs	r2, #1
 8006c34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006c38:	615a      	str	r2, [r3, #20]
 8006c3a:	e7c2      	b.n	8006bc2 <__gethex+0x392>
 8006c3c:	692a      	ldr	r2, [r5, #16]
 8006c3e:	454a      	cmp	r2, r9
 8006c40:	dd0b      	ble.n	8006c5a <__gethex+0x42a>
 8006c42:	2101      	movs	r1, #1
 8006c44:	4628      	mov	r0, r5
 8006c46:	f7ff fda3 	bl	8006790 <rshift>
 8006c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c4e:	3401      	adds	r4, #1
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	f6ff aed8 	blt.w	8006a06 <__gethex+0x1d6>
 8006c56:	2701      	movs	r7, #1
 8006c58:	e7c7      	b.n	8006bea <__gethex+0x3ba>
 8006c5a:	f016 061f 	ands.w	r6, r6, #31
 8006c5e:	d0fa      	beq.n	8006c56 <__gethex+0x426>
 8006c60:	449a      	add	sl, r3
 8006c62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006c66:	f000 fa02 	bl	800706e <__hi0bits>
 8006c6a:	f1c6 0620 	rsb	r6, r6, #32
 8006c6e:	42b0      	cmp	r0, r6
 8006c70:	dbe7      	blt.n	8006c42 <__gethex+0x412>
 8006c72:	e7f0      	b.n	8006c56 <__gethex+0x426>

08006c74 <L_shift>:
 8006c74:	f1c2 0208 	rsb	r2, r2, #8
 8006c78:	0092      	lsls	r2, r2, #2
 8006c7a:	b570      	push	{r4, r5, r6, lr}
 8006c7c:	f1c2 0620 	rsb	r6, r2, #32
 8006c80:	6843      	ldr	r3, [r0, #4]
 8006c82:	6804      	ldr	r4, [r0, #0]
 8006c84:	fa03 f506 	lsl.w	r5, r3, r6
 8006c88:	432c      	orrs	r4, r5
 8006c8a:	40d3      	lsrs	r3, r2
 8006c8c:	6004      	str	r4, [r0, #0]
 8006c8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c92:	4288      	cmp	r0, r1
 8006c94:	d3f4      	bcc.n	8006c80 <L_shift+0xc>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}

08006c98 <__match>:
 8006c98:	b530      	push	{r4, r5, lr}
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca2:	b914      	cbnz	r4, 8006caa <__match+0x12>
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	bd30      	pop	{r4, r5, pc}
 8006caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006cb2:	2d19      	cmp	r5, #25
 8006cb4:	bf98      	it	ls
 8006cb6:	3220      	addls	r2, #32
 8006cb8:	42a2      	cmp	r2, r4
 8006cba:	d0f0      	beq.n	8006c9e <__match+0x6>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e7f3      	b.n	8006ca8 <__match+0x10>

08006cc0 <__hexnan>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	680b      	ldr	r3, [r1, #0]
 8006cc8:	4682      	mov	sl, r0
 8006cca:	115f      	asrs	r7, r3, #5
 8006ccc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006cd0:	f013 031f 	ands.w	r3, r3, #31
 8006cd4:	bf18      	it	ne
 8006cd6:	3704      	addne	r7, #4
 8006cd8:	1f3e      	subs	r6, r7, #4
 8006cda:	4690      	mov	r8, r2
 8006cdc:	46b1      	mov	r9, r6
 8006cde:	4634      	mov	r4, r6
 8006ce0:	46ab      	mov	fp, r5
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	6801      	ldr	r1, [r0, #0]
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	f847 5c04 	str.w	r5, [r7, #-4]
 8006cec:	9502      	str	r5, [sp, #8]
 8006cee:	784a      	ldrb	r2, [r1, #1]
 8006cf0:	1c4b      	adds	r3, r1, #1
 8006cf2:	9303      	str	r3, [sp, #12]
 8006cf4:	b342      	cbz	r2, 8006d48 <__hexnan+0x88>
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	9105      	str	r1, [sp, #20]
 8006cfa:	9204      	str	r2, [sp, #16]
 8006cfc:	f7ff fd83 	bl	8006806 <__hexdig_fun>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d143      	bne.n	8006d8c <__hexnan+0xcc>
 8006d04:	9a04      	ldr	r2, [sp, #16]
 8006d06:	9905      	ldr	r1, [sp, #20]
 8006d08:	2a20      	cmp	r2, #32
 8006d0a:	d818      	bhi.n	8006d3e <__hexnan+0x7e>
 8006d0c:	9b02      	ldr	r3, [sp, #8]
 8006d0e:	459b      	cmp	fp, r3
 8006d10:	dd13      	ble.n	8006d3a <__hexnan+0x7a>
 8006d12:	454c      	cmp	r4, r9
 8006d14:	d206      	bcs.n	8006d24 <__hexnan+0x64>
 8006d16:	2d07      	cmp	r5, #7
 8006d18:	dc04      	bgt.n	8006d24 <__hexnan+0x64>
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff ffa8 	bl	8006c74 <L_shift>
 8006d24:	4544      	cmp	r4, r8
 8006d26:	d944      	bls.n	8006db2 <__hexnan+0xf2>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f1a4 0904 	sub.w	r9, r4, #4
 8006d2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d32:	461d      	mov	r5, r3
 8006d34:	464c      	mov	r4, r9
 8006d36:	f8cd b008 	str.w	fp, [sp, #8]
 8006d3a:	9903      	ldr	r1, [sp, #12]
 8006d3c:	e7d7      	b.n	8006cee <__hexnan+0x2e>
 8006d3e:	2a29      	cmp	r2, #41	; 0x29
 8006d40:	d14a      	bne.n	8006dd8 <__hexnan+0x118>
 8006d42:	3102      	adds	r1, #2
 8006d44:	f8ca 1000 	str.w	r1, [sl]
 8006d48:	f1bb 0f00 	cmp.w	fp, #0
 8006d4c:	d044      	beq.n	8006dd8 <__hexnan+0x118>
 8006d4e:	454c      	cmp	r4, r9
 8006d50:	d206      	bcs.n	8006d60 <__hexnan+0xa0>
 8006d52:	2d07      	cmp	r5, #7
 8006d54:	dc04      	bgt.n	8006d60 <__hexnan+0xa0>
 8006d56:	462a      	mov	r2, r5
 8006d58:	4649      	mov	r1, r9
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ff8a 	bl	8006c74 <L_shift>
 8006d60:	4544      	cmp	r4, r8
 8006d62:	d928      	bls.n	8006db6 <__hexnan+0xf6>
 8006d64:	4643      	mov	r3, r8
 8006d66:	f854 2b04 	ldr.w	r2, [r4], #4
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	f843 2b04 	str.w	r2, [r3], #4
 8006d70:	d2f9      	bcs.n	8006d66 <__hexnan+0xa6>
 8006d72:	2200      	movs	r2, #0
 8006d74:	f843 2b04 	str.w	r2, [r3], #4
 8006d78:	429e      	cmp	r6, r3
 8006d7a:	d2fb      	bcs.n	8006d74 <__hexnan+0xb4>
 8006d7c:	6833      	ldr	r3, [r6, #0]
 8006d7e:	b91b      	cbnz	r3, 8006d88 <__hexnan+0xc8>
 8006d80:	4546      	cmp	r6, r8
 8006d82:	d127      	bne.n	8006dd4 <__hexnan+0x114>
 8006d84:	2301      	movs	r3, #1
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	2005      	movs	r0, #5
 8006d8a:	e026      	b.n	8006dda <__hexnan+0x11a>
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	2d08      	cmp	r5, #8
 8006d90:	f10b 0b01 	add.w	fp, fp, #1
 8006d94:	dd06      	ble.n	8006da4 <__hexnan+0xe4>
 8006d96:	4544      	cmp	r4, r8
 8006d98:	d9cf      	bls.n	8006d3a <__hexnan+0x7a>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2501      	movs	r5, #1
 8006d9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006da2:	3c04      	subs	r4, #4
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	f000 000f 	and.w	r0, r0, #15
 8006daa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	e7c3      	b.n	8006d3a <__hexnan+0x7a>
 8006db2:	2508      	movs	r5, #8
 8006db4:	e7c1      	b.n	8006d3a <__hexnan+0x7a>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0df      	beq.n	8006d7c <__hexnan+0xbc>
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc0:	f1c3 0320 	rsb	r3, r3, #32
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006dcc:	401a      	ands	r2, r3
 8006dce:	f847 2c04 	str.w	r2, [r7, #-4]
 8006dd2:	e7d3      	b.n	8006d7c <__hexnan+0xbc>
 8006dd4:	3e04      	subs	r6, #4
 8006dd6:	e7d1      	b.n	8006d7c <__hexnan+0xbc>
 8006dd8:	2004      	movs	r0, #4
 8006dda:	b007      	add	sp, #28
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006de0 <__localeconv_l>:
 8006de0:	30f0      	adds	r0, #240	; 0xf0
 8006de2:	4770      	bx	lr

08006de4 <__swhatbuf_r>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	460e      	mov	r6, r1
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	b096      	sub	sp, #88	; 0x58
 8006dee:	2900      	cmp	r1, #0
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	da07      	bge.n	8006e06 <__swhatbuf_r+0x22>
 8006df6:	2300      	movs	r3, #0
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	89b3      	ldrh	r3, [r6, #12]
 8006dfc:	061a      	lsls	r2, r3, #24
 8006dfe:	d410      	bmi.n	8006e22 <__swhatbuf_r+0x3e>
 8006e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e04:	e00e      	b.n	8006e24 <__swhatbuf_r+0x40>
 8006e06:	466a      	mov	r2, sp
 8006e08:	f000 fdae 	bl	8007968 <_fstat_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	dbf2      	blt.n	8006df6 <__swhatbuf_r+0x12>
 8006e10:	9a01      	ldr	r2, [sp, #4]
 8006e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e1a:	425a      	negs	r2, r3
 8006e1c:	415a      	adcs	r2, r3
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	e7ee      	b.n	8006e00 <__swhatbuf_r+0x1c>
 8006e22:	2340      	movs	r3, #64	; 0x40
 8006e24:	2000      	movs	r0, #0
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	b016      	add	sp, #88	; 0x58
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}

08006e2c <__smakebuf_r>:
 8006e2c:	898b      	ldrh	r3, [r1, #12]
 8006e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e30:	079d      	lsls	r5, r3, #30
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	d507      	bpl.n	8006e48 <__smakebuf_r+0x1c>
 8006e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	2301      	movs	r3, #1
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	b002      	add	sp, #8
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	ab01      	add	r3, sp, #4
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	f7ff ffca 	bl	8006de4 <__swhatbuf_r>
 8006e50:	9900      	ldr	r1, [sp, #0]
 8006e52:	4605      	mov	r5, r0
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 fc99 	bl	800778c <_malloc_r>
 8006e5a:	b948      	cbnz	r0, 8006e70 <__smakebuf_r+0x44>
 8006e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e60:	059a      	lsls	r2, r3, #22
 8006e62:	d4ef      	bmi.n	8006e44 <__smakebuf_r+0x18>
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	e7e3      	b.n	8006e38 <__smakebuf_r+0xc>
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <__smakebuf_r+0x7c>)
 8006e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	6020      	str	r0, [r4, #0]
 8006e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	6120      	str	r0, [r4, #16]
 8006e82:	6163      	str	r3, [r4, #20]
 8006e84:	9b01      	ldr	r3, [sp, #4]
 8006e86:	b15b      	cbz	r3, 8006ea0 <__smakebuf_r+0x74>
 8006e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 fd7d 	bl	800798c <_isatty_r>
 8006e92:	b128      	cbz	r0, 8006ea0 <__smakebuf_r+0x74>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	431d      	orrs	r5, r3
 8006ea4:	81a5      	strh	r5, [r4, #12]
 8006ea6:	e7cd      	b.n	8006e44 <__smakebuf_r+0x18>
 8006ea8:	08006645 	.word	0x08006645

08006eac <__ascii_mbtowc>:
 8006eac:	b082      	sub	sp, #8
 8006eae:	b901      	cbnz	r1, 8006eb2 <__ascii_mbtowc+0x6>
 8006eb0:	a901      	add	r1, sp, #4
 8006eb2:	b142      	cbz	r2, 8006ec6 <__ascii_mbtowc+0x1a>
 8006eb4:	b14b      	cbz	r3, 8006eca <__ascii_mbtowc+0x1e>
 8006eb6:	7813      	ldrb	r3, [r2, #0]
 8006eb8:	600b      	str	r3, [r1, #0]
 8006eba:	7812      	ldrb	r2, [r2, #0]
 8006ebc:	1c10      	adds	r0, r2, #0
 8006ebe:	bf18      	it	ne
 8006ec0:	2001      	movne	r0, #1
 8006ec2:	b002      	add	sp, #8
 8006ec4:	4770      	bx	lr
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	e7fb      	b.n	8006ec2 <__ascii_mbtowc+0x16>
 8006eca:	f06f 0001 	mvn.w	r0, #1
 8006ece:	e7f8      	b.n	8006ec2 <__ascii_mbtowc+0x16>

08006ed0 <memcpy>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	1e43      	subs	r3, r0, #1
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	bd10      	pop	{r4, pc}
 8006edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee4:	e7f7      	b.n	8006ed6 <memcpy+0x6>

08006ee6 <_Balloc>:
 8006ee6:	b570      	push	{r4, r5, r6, lr}
 8006ee8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006eea:	4604      	mov	r4, r0
 8006eec:	460e      	mov	r6, r1
 8006eee:	b93d      	cbnz	r5, 8006f00 <_Balloc+0x1a>
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f000 fd6d 	bl	80079d0 <malloc>
 8006ef6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ef8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006efc:	6005      	str	r5, [r0, #0]
 8006efe:	60c5      	str	r5, [r0, #12]
 8006f00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f02:	68eb      	ldr	r3, [r5, #12]
 8006f04:	b183      	cbz	r3, 8006f28 <_Balloc+0x42>
 8006f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f0e:	b9b8      	cbnz	r0, 8006f40 <_Balloc+0x5a>
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f506 	lsl.w	r5, r1, r6
 8006f16:	1d6a      	adds	r2, r5, #5
 8006f18:	0092      	lsls	r2, r2, #2
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fbdc 	bl	80076d8 <_calloc_r>
 8006f20:	b160      	cbz	r0, 8006f3c <_Balloc+0x56>
 8006f22:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006f26:	e00e      	b.n	8006f46 <_Balloc+0x60>
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	2104      	movs	r1, #4
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fbd3 	bl	80076d8 <_calloc_r>
 8006f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f34:	60e8      	str	r0, [r5, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e4      	bne.n	8006f06 <_Balloc+0x20>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	6802      	ldr	r2, [r0, #0]
 8006f42:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006f46:	2300      	movs	r3, #0
 8006f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f4c:	e7f7      	b.n	8006f3e <_Balloc+0x58>

08006f4e <_Bfree>:
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f52:	4606      	mov	r6, r0
 8006f54:	460d      	mov	r5, r1
 8006f56:	b93c      	cbnz	r4, 8006f68 <_Bfree+0x1a>
 8006f58:	2010      	movs	r0, #16
 8006f5a:	f000 fd39 	bl	80079d0 <malloc>
 8006f5e:	6270      	str	r0, [r6, #36]	; 0x24
 8006f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f64:	6004      	str	r4, [r0, #0]
 8006f66:	60c4      	str	r4, [r0, #12]
 8006f68:	b13d      	cbz	r5, 8006f7a <_Bfree+0x2c>
 8006f6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f6c:	686a      	ldr	r2, [r5, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f74:	6029      	str	r1, [r5, #0]
 8006f76:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}

08006f7c <__multadd>:
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	461f      	mov	r7, r3
 8006f82:	4606      	mov	r6, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	2300      	movs	r3, #0
 8006f88:	690d      	ldr	r5, [r1, #16]
 8006f8a:	f101 0c14 	add.w	ip, r1, #20
 8006f8e:	f8dc 0000 	ldr.w	r0, [ip]
 8006f92:	3301      	adds	r3, #1
 8006f94:	b281      	uxth	r1, r0
 8006f96:	fb02 7101 	mla	r1, r2, r1, r7
 8006f9a:	0c00      	lsrs	r0, r0, #16
 8006f9c:	0c0f      	lsrs	r7, r1, #16
 8006f9e:	fb02 7000 	mla	r0, r2, r0, r7
 8006fa2:	b289      	uxth	r1, r1
 8006fa4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006fa8:	429d      	cmp	r5, r3
 8006faa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006fae:	f84c 1b04 	str.w	r1, [ip], #4
 8006fb2:	dcec      	bgt.n	8006f8e <__multadd+0x12>
 8006fb4:	b1d7      	cbz	r7, 8006fec <__multadd+0x70>
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	42ab      	cmp	r3, r5
 8006fba:	dc12      	bgt.n	8006fe2 <__multadd+0x66>
 8006fbc:	6861      	ldr	r1, [r4, #4]
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	3101      	adds	r1, #1
 8006fc2:	f7ff ff90 	bl	8006ee6 <_Balloc>
 8006fc6:	4680      	mov	r8, r0
 8006fc8:	6922      	ldr	r2, [r4, #16]
 8006fca:	f104 010c 	add.w	r1, r4, #12
 8006fce:	3202      	adds	r2, #2
 8006fd0:	0092      	lsls	r2, r2, #2
 8006fd2:	300c      	adds	r0, #12
 8006fd4:	f7ff ff7c 	bl	8006ed0 <memcpy>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ffb7 	bl	8006f4e <_Bfree>
 8006fe0:	4644      	mov	r4, r8
 8006fe2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fe6:	3501      	adds	r5, #1
 8006fe8:	615f      	str	r7, [r3, #20]
 8006fea:	6125      	str	r5, [r4, #16]
 8006fec:	4620      	mov	r0, r4
 8006fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ff2 <__s2b>:
 8006ff2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff6:	4615      	mov	r5, r2
 8006ff8:	2209      	movs	r2, #9
 8006ffa:	461f      	mov	r7, r3
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	460c      	mov	r4, r1
 8007000:	fb93 f3f2 	sdiv	r3, r3, r2
 8007004:	4606      	mov	r6, r0
 8007006:	2201      	movs	r2, #1
 8007008:	2100      	movs	r1, #0
 800700a:	429a      	cmp	r2, r3
 800700c:	db20      	blt.n	8007050 <__s2b+0x5e>
 800700e:	4630      	mov	r0, r6
 8007010:	f7ff ff69 	bl	8006ee6 <_Balloc>
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	2d09      	cmp	r5, #9
 8007018:	6143      	str	r3, [r0, #20]
 800701a:	f04f 0301 	mov.w	r3, #1
 800701e:	6103      	str	r3, [r0, #16]
 8007020:	dd19      	ble.n	8007056 <__s2b+0x64>
 8007022:	f104 0809 	add.w	r8, r4, #9
 8007026:	46c1      	mov	r9, r8
 8007028:	442c      	add	r4, r5
 800702a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800702e:	4601      	mov	r1, r0
 8007030:	3b30      	subs	r3, #48	; 0x30
 8007032:	220a      	movs	r2, #10
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff ffa1 	bl	8006f7c <__multadd>
 800703a:	45a1      	cmp	r9, r4
 800703c:	d1f5      	bne.n	800702a <__s2b+0x38>
 800703e:	eb08 0405 	add.w	r4, r8, r5
 8007042:	3c08      	subs	r4, #8
 8007044:	1b2d      	subs	r5, r5, r4
 8007046:	1963      	adds	r3, r4, r5
 8007048:	42bb      	cmp	r3, r7
 800704a:	db07      	blt.n	800705c <__s2b+0x6a>
 800704c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007050:	0052      	lsls	r2, r2, #1
 8007052:	3101      	adds	r1, #1
 8007054:	e7d9      	b.n	800700a <__s2b+0x18>
 8007056:	340a      	adds	r4, #10
 8007058:	2509      	movs	r5, #9
 800705a:	e7f3      	b.n	8007044 <__s2b+0x52>
 800705c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007060:	4601      	mov	r1, r0
 8007062:	3b30      	subs	r3, #48	; 0x30
 8007064:	220a      	movs	r2, #10
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ff88 	bl	8006f7c <__multadd>
 800706c:	e7eb      	b.n	8007046 <__s2b+0x54>

0800706e <__hi0bits>:
 800706e:	0c02      	lsrs	r2, r0, #16
 8007070:	0412      	lsls	r2, r2, #16
 8007072:	4603      	mov	r3, r0
 8007074:	b9b2      	cbnz	r2, 80070a4 <__hi0bits+0x36>
 8007076:	0403      	lsls	r3, r0, #16
 8007078:	2010      	movs	r0, #16
 800707a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800707e:	bf04      	itt	eq
 8007080:	021b      	lsleq	r3, r3, #8
 8007082:	3008      	addeq	r0, #8
 8007084:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007088:	bf04      	itt	eq
 800708a:	011b      	lsleq	r3, r3, #4
 800708c:	3004      	addeq	r0, #4
 800708e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007092:	bf04      	itt	eq
 8007094:	009b      	lsleq	r3, r3, #2
 8007096:	3002      	addeq	r0, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	db06      	blt.n	80070aa <__hi0bits+0x3c>
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	d503      	bpl.n	80070a8 <__hi0bits+0x3a>
 80070a0:	3001      	adds	r0, #1
 80070a2:	4770      	bx	lr
 80070a4:	2000      	movs	r0, #0
 80070a6:	e7e8      	b.n	800707a <__hi0bits+0xc>
 80070a8:	2020      	movs	r0, #32
 80070aa:	4770      	bx	lr

080070ac <__lo0bits>:
 80070ac:	6803      	ldr	r3, [r0, #0]
 80070ae:	4601      	mov	r1, r0
 80070b0:	f013 0207 	ands.w	r2, r3, #7
 80070b4:	d00b      	beq.n	80070ce <__lo0bits+0x22>
 80070b6:	07da      	lsls	r2, r3, #31
 80070b8:	d423      	bmi.n	8007102 <__lo0bits+0x56>
 80070ba:	0798      	lsls	r0, r3, #30
 80070bc:	bf49      	itett	mi
 80070be:	085b      	lsrmi	r3, r3, #1
 80070c0:	089b      	lsrpl	r3, r3, #2
 80070c2:	2001      	movmi	r0, #1
 80070c4:	600b      	strmi	r3, [r1, #0]
 80070c6:	bf5c      	itt	pl
 80070c8:	600b      	strpl	r3, [r1, #0]
 80070ca:	2002      	movpl	r0, #2
 80070cc:	4770      	bx	lr
 80070ce:	b298      	uxth	r0, r3
 80070d0:	b9a8      	cbnz	r0, 80070fe <__lo0bits+0x52>
 80070d2:	2010      	movs	r0, #16
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070da:	bf04      	itt	eq
 80070dc:	0a1b      	lsreq	r3, r3, #8
 80070de:	3008      	addeq	r0, #8
 80070e0:	071a      	lsls	r2, r3, #28
 80070e2:	bf04      	itt	eq
 80070e4:	091b      	lsreq	r3, r3, #4
 80070e6:	3004      	addeq	r0, #4
 80070e8:	079a      	lsls	r2, r3, #30
 80070ea:	bf04      	itt	eq
 80070ec:	089b      	lsreq	r3, r3, #2
 80070ee:	3002      	addeq	r0, #2
 80070f0:	07da      	lsls	r2, r3, #31
 80070f2:	d402      	bmi.n	80070fa <__lo0bits+0x4e>
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	d006      	beq.n	8007106 <__lo0bits+0x5a>
 80070f8:	3001      	adds	r0, #1
 80070fa:	600b      	str	r3, [r1, #0]
 80070fc:	4770      	bx	lr
 80070fe:	4610      	mov	r0, r2
 8007100:	e7e9      	b.n	80070d6 <__lo0bits+0x2a>
 8007102:	2000      	movs	r0, #0
 8007104:	4770      	bx	lr
 8007106:	2020      	movs	r0, #32
 8007108:	4770      	bx	lr

0800710a <__i2b>:
 800710a:	b510      	push	{r4, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	2101      	movs	r1, #1
 8007110:	f7ff fee9 	bl	8006ee6 <_Balloc>
 8007114:	2201      	movs	r2, #1
 8007116:	6144      	str	r4, [r0, #20]
 8007118:	6102      	str	r2, [r0, #16]
 800711a:	bd10      	pop	{r4, pc}

0800711c <__multiply>:
 800711c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	4614      	mov	r4, r2
 8007122:	690a      	ldr	r2, [r1, #16]
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	4688      	mov	r8, r1
 8007128:	429a      	cmp	r2, r3
 800712a:	bfbe      	ittt	lt
 800712c:	460b      	movlt	r3, r1
 800712e:	46a0      	movlt	r8, r4
 8007130:	461c      	movlt	r4, r3
 8007132:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007136:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800713a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800713e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007142:	eb07 0609 	add.w	r6, r7, r9
 8007146:	42b3      	cmp	r3, r6
 8007148:	bfb8      	it	lt
 800714a:	3101      	addlt	r1, #1
 800714c:	f7ff fecb 	bl	8006ee6 <_Balloc>
 8007150:	f100 0514 	add.w	r5, r0, #20
 8007154:	462b      	mov	r3, r5
 8007156:	2200      	movs	r2, #0
 8007158:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800715c:	4573      	cmp	r3, lr
 800715e:	d316      	bcc.n	800718e <__multiply+0x72>
 8007160:	f104 0214 	add.w	r2, r4, #20
 8007164:	f108 0114 	add.w	r1, r8, #20
 8007168:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800716c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	9b00      	ldr	r3, [sp, #0]
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	4293      	cmp	r3, r2
 8007178:	d80c      	bhi.n	8007194 <__multiply+0x78>
 800717a:	2e00      	cmp	r6, #0
 800717c:	dd03      	ble.n	8007186 <__multiply+0x6a>
 800717e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007182:	2b00      	cmp	r3, #0
 8007184:	d05d      	beq.n	8007242 <__multiply+0x126>
 8007186:	6106      	str	r6, [r0, #16]
 8007188:	b003      	add	sp, #12
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	f843 2b04 	str.w	r2, [r3], #4
 8007192:	e7e3      	b.n	800715c <__multiply+0x40>
 8007194:	f8b2 b000 	ldrh.w	fp, [r2]
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	d023      	beq.n	80071e6 <__multiply+0xca>
 800719e:	4689      	mov	r9, r1
 80071a0:	46ac      	mov	ip, r5
 80071a2:	f04f 0800 	mov.w	r8, #0
 80071a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80071aa:	f8dc a000 	ldr.w	sl, [ip]
 80071ae:	b2a3      	uxth	r3, r4
 80071b0:	fa1f fa8a 	uxth.w	sl, sl
 80071b4:	fb0b a303 	mla	r3, fp, r3, sl
 80071b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071bc:	f8dc 4000 	ldr.w	r4, [ip]
 80071c0:	4443      	add	r3, r8
 80071c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80071ca:	46e2      	mov	sl, ip
 80071cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071d6:	454f      	cmp	r7, r9
 80071d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071dc:	f84a 3b04 	str.w	r3, [sl], #4
 80071e0:	d82b      	bhi.n	800723a <__multiply+0x11e>
 80071e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80071e6:	9b01      	ldr	r3, [sp, #4]
 80071e8:	3204      	adds	r2, #4
 80071ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80071ee:	f1ba 0f00 	cmp.w	sl, #0
 80071f2:	d020      	beq.n	8007236 <__multiply+0x11a>
 80071f4:	4689      	mov	r9, r1
 80071f6:	46a8      	mov	r8, r5
 80071f8:	f04f 0b00 	mov.w	fp, #0
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8007202:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007206:	b29b      	uxth	r3, r3
 8007208:	fb0a 440c 	mla	r4, sl, ip, r4
 800720c:	46c4      	mov	ip, r8
 800720e:	445c      	add	r4, fp
 8007210:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007214:	f84c 3b04 	str.w	r3, [ip], #4
 8007218:	f859 3b04 	ldr.w	r3, [r9], #4
 800721c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	fb0a b303 	mla	r3, sl, r3, fp
 8007226:	454f      	cmp	r7, r9
 8007228:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800722c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007230:	d805      	bhi.n	800723e <__multiply+0x122>
 8007232:	f8c8 3004 	str.w	r3, [r8, #4]
 8007236:	3504      	adds	r5, #4
 8007238:	e79b      	b.n	8007172 <__multiply+0x56>
 800723a:	46d4      	mov	ip, sl
 800723c:	e7b3      	b.n	80071a6 <__multiply+0x8a>
 800723e:	46e0      	mov	r8, ip
 8007240:	e7dd      	b.n	80071fe <__multiply+0xe2>
 8007242:	3e01      	subs	r6, #1
 8007244:	e799      	b.n	800717a <__multiply+0x5e>
	...

08007248 <__pow5mult>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	4615      	mov	r5, r2
 800724e:	f012 0203 	ands.w	r2, r2, #3
 8007252:	4606      	mov	r6, r0
 8007254:	460f      	mov	r7, r1
 8007256:	d007      	beq.n	8007268 <__pow5mult+0x20>
 8007258:	4c21      	ldr	r4, [pc, #132]	; (80072e0 <__pow5mult+0x98>)
 800725a:	3a01      	subs	r2, #1
 800725c:	2300      	movs	r3, #0
 800725e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007262:	f7ff fe8b 	bl	8006f7c <__multadd>
 8007266:	4607      	mov	r7, r0
 8007268:	10ad      	asrs	r5, r5, #2
 800726a:	d035      	beq.n	80072d8 <__pow5mult+0x90>
 800726c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800726e:	b93c      	cbnz	r4, 8007280 <__pow5mult+0x38>
 8007270:	2010      	movs	r0, #16
 8007272:	f000 fbad 	bl	80079d0 <malloc>
 8007276:	6270      	str	r0, [r6, #36]	; 0x24
 8007278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800727c:	6004      	str	r4, [r0, #0]
 800727e:	60c4      	str	r4, [r0, #12]
 8007280:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007288:	b94c      	cbnz	r4, 800729e <__pow5mult+0x56>
 800728a:	f240 2171 	movw	r1, #625	; 0x271
 800728e:	4630      	mov	r0, r6
 8007290:	f7ff ff3b 	bl	800710a <__i2b>
 8007294:	2300      	movs	r3, #0
 8007296:	4604      	mov	r4, r0
 8007298:	f8c8 0008 	str.w	r0, [r8, #8]
 800729c:	6003      	str	r3, [r0, #0]
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	07eb      	lsls	r3, r5, #31
 80072a4:	d50a      	bpl.n	80072bc <__pow5mult+0x74>
 80072a6:	4639      	mov	r1, r7
 80072a8:	4622      	mov	r2, r4
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff ff36 	bl	800711c <__multiply>
 80072b0:	4681      	mov	r9, r0
 80072b2:	4639      	mov	r1, r7
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff fe4a 	bl	8006f4e <_Bfree>
 80072ba:	464f      	mov	r7, r9
 80072bc:	106d      	asrs	r5, r5, #1
 80072be:	d00b      	beq.n	80072d8 <__pow5mult+0x90>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	b938      	cbnz	r0, 80072d4 <__pow5mult+0x8c>
 80072c4:	4622      	mov	r2, r4
 80072c6:	4621      	mov	r1, r4
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7ff ff27 	bl	800711c <__multiply>
 80072ce:	6020      	str	r0, [r4, #0]
 80072d0:	f8c0 8000 	str.w	r8, [r0]
 80072d4:	4604      	mov	r4, r0
 80072d6:	e7e4      	b.n	80072a2 <__pow5mult+0x5a>
 80072d8:	4638      	mov	r0, r7
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	bf00      	nop
 80072e0:	08007c40 	.word	0x08007c40

080072e4 <__lshift>:
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	460c      	mov	r4, r1
 80072ea:	4607      	mov	r7, r0
 80072ec:	4616      	mov	r6, r2
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072f4:	eb0a 0903 	add.w	r9, sl, r3
 80072f8:	6849      	ldr	r1, [r1, #4]
 80072fa:	68a3      	ldr	r3, [r4, #8]
 80072fc:	f109 0501 	add.w	r5, r9, #1
 8007300:	42ab      	cmp	r3, r5
 8007302:	db32      	blt.n	800736a <__lshift+0x86>
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff fdee 	bl	8006ee6 <_Balloc>
 800730a:	2300      	movs	r3, #0
 800730c:	4680      	mov	r8, r0
 800730e:	461a      	mov	r2, r3
 8007310:	f100 0114 	add.w	r1, r0, #20
 8007314:	4553      	cmp	r3, sl
 8007316:	db2b      	blt.n	8007370 <__lshift+0x8c>
 8007318:	6920      	ldr	r0, [r4, #16]
 800731a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800731e:	f104 0314 	add.w	r3, r4, #20
 8007322:	f016 021f 	ands.w	r2, r6, #31
 8007326:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800732a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800732e:	d025      	beq.n	800737c <__lshift+0x98>
 8007330:	2000      	movs	r0, #0
 8007332:	f1c2 0e20 	rsb	lr, r2, #32
 8007336:	468a      	mov	sl, r1
 8007338:	681e      	ldr	r6, [r3, #0]
 800733a:	4096      	lsls	r6, r2
 800733c:	4330      	orrs	r0, r6
 800733e:	f84a 0b04 	str.w	r0, [sl], #4
 8007342:	f853 0b04 	ldr.w	r0, [r3], #4
 8007346:	459c      	cmp	ip, r3
 8007348:	fa20 f00e 	lsr.w	r0, r0, lr
 800734c:	d814      	bhi.n	8007378 <__lshift+0x94>
 800734e:	6048      	str	r0, [r1, #4]
 8007350:	b108      	cbz	r0, 8007356 <__lshift+0x72>
 8007352:	f109 0502 	add.w	r5, r9, #2
 8007356:	3d01      	subs	r5, #1
 8007358:	4638      	mov	r0, r7
 800735a:	f8c8 5010 	str.w	r5, [r8, #16]
 800735e:	4621      	mov	r1, r4
 8007360:	f7ff fdf5 	bl	8006f4e <_Bfree>
 8007364:	4640      	mov	r0, r8
 8007366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736a:	3101      	adds	r1, #1
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	e7c7      	b.n	8007300 <__lshift+0x1c>
 8007370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007374:	3301      	adds	r3, #1
 8007376:	e7cd      	b.n	8007314 <__lshift+0x30>
 8007378:	4651      	mov	r1, sl
 800737a:	e7dc      	b.n	8007336 <__lshift+0x52>
 800737c:	3904      	subs	r1, #4
 800737e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007382:	459c      	cmp	ip, r3
 8007384:	f841 2f04 	str.w	r2, [r1, #4]!
 8007388:	d8f9      	bhi.n	800737e <__lshift+0x9a>
 800738a:	e7e4      	b.n	8007356 <__lshift+0x72>

0800738c <__mcmp>:
 800738c:	6903      	ldr	r3, [r0, #16]
 800738e:	690a      	ldr	r2, [r1, #16]
 8007390:	b530      	push	{r4, r5, lr}
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	d10c      	bne.n	80073b0 <__mcmp+0x24>
 8007396:	0092      	lsls	r2, r2, #2
 8007398:	3014      	adds	r0, #20
 800739a:	3114      	adds	r1, #20
 800739c:	1884      	adds	r4, r0, r2
 800739e:	4411      	add	r1, r2
 80073a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073a8:	4295      	cmp	r5, r2
 80073aa:	d003      	beq.n	80073b4 <__mcmp+0x28>
 80073ac:	d305      	bcc.n	80073ba <__mcmp+0x2e>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4618      	mov	r0, r3
 80073b2:	bd30      	pop	{r4, r5, pc}
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	d3f3      	bcc.n	80073a0 <__mcmp+0x14>
 80073b8:	e7fa      	b.n	80073b0 <__mcmp+0x24>
 80073ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073be:	e7f7      	b.n	80073b0 <__mcmp+0x24>

080073c0 <__mdiff>:
 80073c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	460d      	mov	r5, r1
 80073c6:	4607      	mov	r7, r0
 80073c8:	4611      	mov	r1, r2
 80073ca:	4628      	mov	r0, r5
 80073cc:	4614      	mov	r4, r2
 80073ce:	f7ff ffdd 	bl	800738c <__mcmp>
 80073d2:	1e06      	subs	r6, r0, #0
 80073d4:	d108      	bne.n	80073e8 <__mdiff+0x28>
 80073d6:	4631      	mov	r1, r6
 80073d8:	4638      	mov	r0, r7
 80073da:	f7ff fd84 	bl	8006ee6 <_Balloc>
 80073de:	2301      	movs	r3, #1
 80073e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80073e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e8:	bfa4      	itt	ge
 80073ea:	4623      	movge	r3, r4
 80073ec:	462c      	movge	r4, r5
 80073ee:	4638      	mov	r0, r7
 80073f0:	6861      	ldr	r1, [r4, #4]
 80073f2:	bfa6      	itte	ge
 80073f4:	461d      	movge	r5, r3
 80073f6:	2600      	movge	r6, #0
 80073f8:	2601      	movlt	r6, #1
 80073fa:	f7ff fd74 	bl	8006ee6 <_Balloc>
 80073fe:	f04f 0e00 	mov.w	lr, #0
 8007402:	60c6      	str	r6, [r0, #12]
 8007404:	692b      	ldr	r3, [r5, #16]
 8007406:	6926      	ldr	r6, [r4, #16]
 8007408:	f104 0214 	add.w	r2, r4, #20
 800740c:	f105 0914 	add.w	r9, r5, #20
 8007410:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007414:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007418:	f100 0114 	add.w	r1, r0, #20
 800741c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007420:	f859 5b04 	ldr.w	r5, [r9], #4
 8007424:	fa1f f38a 	uxth.w	r3, sl
 8007428:	4473      	add	r3, lr
 800742a:	b2ac      	uxth	r4, r5
 800742c:	1b1b      	subs	r3, r3, r4
 800742e:	0c2c      	lsrs	r4, r5, #16
 8007430:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007434:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007438:	b29b      	uxth	r3, r3
 800743a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800743e:	45c8      	cmp	r8, r9
 8007440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007444:	4694      	mov	ip, r2
 8007446:	f841 4b04 	str.w	r4, [r1], #4
 800744a:	d8e7      	bhi.n	800741c <__mdiff+0x5c>
 800744c:	45bc      	cmp	ip, r7
 800744e:	d304      	bcc.n	800745a <__mdiff+0x9a>
 8007450:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007454:	b183      	cbz	r3, 8007478 <__mdiff+0xb8>
 8007456:	6106      	str	r6, [r0, #16]
 8007458:	e7c4      	b.n	80073e4 <__mdiff+0x24>
 800745a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800745e:	b2a2      	uxth	r2, r4
 8007460:	4472      	add	r2, lr
 8007462:	1413      	asrs	r3, r2, #16
 8007464:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007468:	b292      	uxth	r2, r2
 800746a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800746e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007472:	f841 2b04 	str.w	r2, [r1], #4
 8007476:	e7e9      	b.n	800744c <__mdiff+0x8c>
 8007478:	3e01      	subs	r6, #1
 800747a:	e7e9      	b.n	8007450 <__mdiff+0x90>

0800747c <__ulp>:
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <__ulp+0x44>)
 800747e:	400b      	ands	r3, r1
 8007480:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd02      	ble.n	800748e <__ulp+0x12>
 8007488:	2000      	movs	r0, #0
 800748a:	4619      	mov	r1, r3
 800748c:	4770      	bx	lr
 800748e:	425b      	negs	r3, r3
 8007490:	151b      	asrs	r3, r3, #20
 8007492:	2b13      	cmp	r3, #19
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	f04f 0100 	mov.w	r1, #0
 800749c:	dc04      	bgt.n	80074a8 <__ulp+0x2c>
 800749e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80074a2:	fa42 f103 	asr.w	r1, r2, r3
 80074a6:	4770      	bx	lr
 80074a8:	2201      	movs	r2, #1
 80074aa:	3b14      	subs	r3, #20
 80074ac:	2b1e      	cmp	r3, #30
 80074ae:	bfce      	itee	gt
 80074b0:	4613      	movgt	r3, r2
 80074b2:	f1c3 031f 	rsble	r3, r3, #31
 80074b6:	fa02 f303 	lslle.w	r3, r2, r3
 80074ba:	4618      	mov	r0, r3
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	7ff00000 	.word	0x7ff00000

080074c4 <__b2d>:
 80074c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c8:	6907      	ldr	r7, [r0, #16]
 80074ca:	f100 0914 	add.w	r9, r0, #20
 80074ce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80074d2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80074d6:	f1a7 0804 	sub.w	r8, r7, #4
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff fdc7 	bl	800706e <__hi0bits>
 80074e0:	f1c0 0320 	rsb	r3, r0, #32
 80074e4:	280a      	cmp	r0, #10
 80074e6:	600b      	str	r3, [r1, #0]
 80074e8:	491e      	ldr	r1, [pc, #120]	; (8007564 <__b2d+0xa0>)
 80074ea:	dc17      	bgt.n	800751c <__b2d+0x58>
 80074ec:	45c1      	cmp	r9, r8
 80074ee:	bf28      	it	cs
 80074f0:	2200      	movcs	r2, #0
 80074f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80074f6:	fa26 f30c 	lsr.w	r3, r6, ip
 80074fa:	bf38      	it	cc
 80074fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007500:	ea43 0501 	orr.w	r5, r3, r1
 8007504:	f100 0315 	add.w	r3, r0, #21
 8007508:	fa06 f303 	lsl.w	r3, r6, r3
 800750c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007510:	ea43 0402 	orr.w	r4, r3, r2
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751c:	45c1      	cmp	r9, r8
 800751e:	bf3a      	itte	cc
 8007520:	f1a7 0808 	subcc.w	r8, r7, #8
 8007524:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007528:	2200      	movcs	r2, #0
 800752a:	f1b0 030b 	subs.w	r3, r0, #11
 800752e:	d015      	beq.n	800755c <__b2d+0x98>
 8007530:	409e      	lsls	r6, r3
 8007532:	f1c3 0720 	rsb	r7, r3, #32
 8007536:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800753a:	fa22 f107 	lsr.w	r1, r2, r7
 800753e:	45c8      	cmp	r8, r9
 8007540:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007544:	ea46 0501 	orr.w	r5, r6, r1
 8007548:	bf94      	ite	ls
 800754a:	2100      	movls	r1, #0
 800754c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007550:	fa02 f003 	lsl.w	r0, r2, r3
 8007554:	40f9      	lsrs	r1, r7
 8007556:	ea40 0401 	orr.w	r4, r0, r1
 800755a:	e7db      	b.n	8007514 <__b2d+0x50>
 800755c:	ea46 0501 	orr.w	r5, r6, r1
 8007560:	4614      	mov	r4, r2
 8007562:	e7d7      	b.n	8007514 <__b2d+0x50>
 8007564:	3ff00000 	.word	0x3ff00000

08007568 <__d2b>:
 8007568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800756c:	461c      	mov	r4, r3
 800756e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007572:	2101      	movs	r1, #1
 8007574:	4690      	mov	r8, r2
 8007576:	f7ff fcb6 	bl	8006ee6 <_Balloc>
 800757a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800757e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007582:	4607      	mov	r7, r0
 8007584:	bb34      	cbnz	r4, 80075d4 <__d2b+0x6c>
 8007586:	9201      	str	r2, [sp, #4]
 8007588:	f1b8 0200 	subs.w	r2, r8, #0
 800758c:	d027      	beq.n	80075de <__d2b+0x76>
 800758e:	a802      	add	r0, sp, #8
 8007590:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007594:	f7ff fd8a 	bl	80070ac <__lo0bits>
 8007598:	9900      	ldr	r1, [sp, #0]
 800759a:	b1f0      	cbz	r0, 80075da <__d2b+0x72>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	f1c0 0320 	rsb	r3, r0, #32
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	430b      	orrs	r3, r1
 80075a8:	40c2      	lsrs	r2, r0
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	9201      	str	r2, [sp, #4]
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf14      	ite	ne
 80075b4:	2102      	movne	r1, #2
 80075b6:	2101      	moveq	r1, #1
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	6139      	str	r1, [r7, #16]
 80075bc:	b1c4      	cbz	r4, 80075f0 <__d2b+0x88>
 80075be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80075c2:	4404      	add	r4, r0
 80075c4:	6034      	str	r4, [r6, #0]
 80075c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075ca:	6028      	str	r0, [r5, #0]
 80075cc:	4638      	mov	r0, r7
 80075ce:	b002      	add	sp, #8
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075d8:	e7d5      	b.n	8007586 <__d2b+0x1e>
 80075da:	6179      	str	r1, [r7, #20]
 80075dc:	e7e7      	b.n	80075ae <__d2b+0x46>
 80075de:	a801      	add	r0, sp, #4
 80075e0:	f7ff fd64 	bl	80070ac <__lo0bits>
 80075e4:	2101      	movs	r1, #1
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	6139      	str	r1, [r7, #16]
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	3020      	adds	r0, #32
 80075ee:	e7e5      	b.n	80075bc <__d2b+0x54>
 80075f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80075f8:	6030      	str	r0, [r6, #0]
 80075fa:	6918      	ldr	r0, [r3, #16]
 80075fc:	f7ff fd37 	bl	800706e <__hi0bits>
 8007600:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007604:	e7e1      	b.n	80075ca <__d2b+0x62>

08007606 <__ratio>:
 8007606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	4688      	mov	r8, r1
 800760c:	4669      	mov	r1, sp
 800760e:	4681      	mov	r9, r0
 8007610:	f7ff ff58 	bl	80074c4 <__b2d>
 8007614:	468b      	mov	fp, r1
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	4640      	mov	r0, r8
 800761c:	a901      	add	r1, sp, #4
 800761e:	f7ff ff51 	bl	80074c4 <__b2d>
 8007622:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007626:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800762a:	460d      	mov	r5, r1
 800762c:	eba3 0c02 	sub.w	ip, r3, r2
 8007630:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfd5      	itete	le
 800763e:	460a      	movle	r2, r1
 8007640:	463a      	movgt	r2, r7
 8007642:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007646:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800764a:	bfd8      	it	le
 800764c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007650:	462b      	mov	r3, r5
 8007652:	4602      	mov	r2, r0
 8007654:	4659      	mov	r1, fp
 8007656:	4630      	mov	r0, r6
 8007658:	f7f9 f868 	bl	800072c <__aeabi_ddiv>
 800765c:	b003      	add	sp, #12
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007662 <__copybits>:
 8007662:	3901      	subs	r1, #1
 8007664:	b510      	push	{r4, lr}
 8007666:	1149      	asrs	r1, r1, #5
 8007668:	6914      	ldr	r4, [r2, #16]
 800766a:	3101      	adds	r1, #1
 800766c:	f102 0314 	add.w	r3, r2, #20
 8007670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007674:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007678:	42a3      	cmp	r3, r4
 800767a:	4602      	mov	r2, r0
 800767c:	d303      	bcc.n	8007686 <__copybits+0x24>
 800767e:	2300      	movs	r3, #0
 8007680:	428a      	cmp	r2, r1
 8007682:	d305      	bcc.n	8007690 <__copybits+0x2e>
 8007684:	bd10      	pop	{r4, pc}
 8007686:	f853 2b04 	ldr.w	r2, [r3], #4
 800768a:	f840 2b04 	str.w	r2, [r0], #4
 800768e:	e7f3      	b.n	8007678 <__copybits+0x16>
 8007690:	f842 3b04 	str.w	r3, [r2], #4
 8007694:	e7f4      	b.n	8007680 <__copybits+0x1e>

08007696 <__any_on>:
 8007696:	f100 0214 	add.w	r2, r0, #20
 800769a:	6900      	ldr	r0, [r0, #16]
 800769c:	114b      	asrs	r3, r1, #5
 800769e:	4298      	cmp	r0, r3
 80076a0:	b510      	push	{r4, lr}
 80076a2:	db11      	blt.n	80076c8 <__any_on+0x32>
 80076a4:	dd0a      	ble.n	80076bc <__any_on+0x26>
 80076a6:	f011 011f 	ands.w	r1, r1, #31
 80076aa:	d007      	beq.n	80076bc <__any_on+0x26>
 80076ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076b0:	fa24 f001 	lsr.w	r0, r4, r1
 80076b4:	fa00 f101 	lsl.w	r1, r0, r1
 80076b8:	428c      	cmp	r4, r1
 80076ba:	d10b      	bne.n	80076d4 <__any_on+0x3e>
 80076bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d803      	bhi.n	80076cc <__any_on+0x36>
 80076c4:	2000      	movs	r0, #0
 80076c6:	bd10      	pop	{r4, pc}
 80076c8:	4603      	mov	r3, r0
 80076ca:	e7f7      	b.n	80076bc <__any_on+0x26>
 80076cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d0f5      	beq.n	80076c0 <__any_on+0x2a>
 80076d4:	2001      	movs	r0, #1
 80076d6:	e7f6      	b.n	80076c6 <__any_on+0x30>

080076d8 <_calloc_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	fb02 f401 	mul.w	r4, r2, r1
 80076de:	4621      	mov	r1, r4
 80076e0:	f000 f854 	bl	800778c <_malloc_r>
 80076e4:	4605      	mov	r5, r0
 80076e6:	b118      	cbz	r0, 80076f0 <_calloc_r+0x18>
 80076e8:	4622      	mov	r2, r4
 80076ea:	2100      	movs	r1, #0
 80076ec:	f7fd ff74 	bl	80055d8 <memset>
 80076f0:	4628      	mov	r0, r5
 80076f2:	bd38      	pop	{r3, r4, r5, pc}

080076f4 <_free_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4605      	mov	r5, r0
 80076f8:	2900      	cmp	r1, #0
 80076fa:	d043      	beq.n	8007784 <_free_r+0x90>
 80076fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007700:	1f0c      	subs	r4, r1, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	bfb8      	it	lt
 8007706:	18e4      	addlt	r4, r4, r3
 8007708:	f000 f96a 	bl	80079e0 <__malloc_lock>
 800770c:	4a1e      	ldr	r2, [pc, #120]	; (8007788 <_free_r+0x94>)
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	4610      	mov	r0, r2
 8007712:	b933      	cbnz	r3, 8007722 <_free_r+0x2e>
 8007714:	6063      	str	r3, [r4, #4]
 8007716:	6014      	str	r4, [r2, #0]
 8007718:	4628      	mov	r0, r5
 800771a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800771e:	f000 b960 	b.w	80079e2 <__malloc_unlock>
 8007722:	42a3      	cmp	r3, r4
 8007724:	d90b      	bls.n	800773e <_free_r+0x4a>
 8007726:	6821      	ldr	r1, [r4, #0]
 8007728:	1862      	adds	r2, r4, r1
 800772a:	4293      	cmp	r3, r2
 800772c:	bf01      	itttt	eq
 800772e:	681a      	ldreq	r2, [r3, #0]
 8007730:	685b      	ldreq	r3, [r3, #4]
 8007732:	1852      	addeq	r2, r2, r1
 8007734:	6022      	streq	r2, [r4, #0]
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6004      	str	r4, [r0, #0]
 800773a:	e7ed      	b.n	8007718 <_free_r+0x24>
 800773c:	4613      	mov	r3, r2
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	b10a      	cbz	r2, 8007746 <_free_r+0x52>
 8007742:	42a2      	cmp	r2, r4
 8007744:	d9fa      	bls.n	800773c <_free_r+0x48>
 8007746:	6819      	ldr	r1, [r3, #0]
 8007748:	1858      	adds	r0, r3, r1
 800774a:	42a0      	cmp	r0, r4
 800774c:	d10b      	bne.n	8007766 <_free_r+0x72>
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	4401      	add	r1, r0
 8007752:	1858      	adds	r0, r3, r1
 8007754:	4282      	cmp	r2, r0
 8007756:	6019      	str	r1, [r3, #0]
 8007758:	d1de      	bne.n	8007718 <_free_r+0x24>
 800775a:	6810      	ldr	r0, [r2, #0]
 800775c:	6852      	ldr	r2, [r2, #4]
 800775e:	4401      	add	r1, r0
 8007760:	6019      	str	r1, [r3, #0]
 8007762:	605a      	str	r2, [r3, #4]
 8007764:	e7d8      	b.n	8007718 <_free_r+0x24>
 8007766:	d902      	bls.n	800776e <_free_r+0x7a>
 8007768:	230c      	movs	r3, #12
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	e7d4      	b.n	8007718 <_free_r+0x24>
 800776e:	6820      	ldr	r0, [r4, #0]
 8007770:	1821      	adds	r1, r4, r0
 8007772:	428a      	cmp	r2, r1
 8007774:	bf01      	itttt	eq
 8007776:	6811      	ldreq	r1, [r2, #0]
 8007778:	6852      	ldreq	r2, [r2, #4]
 800777a:	1809      	addeq	r1, r1, r0
 800777c:	6021      	streq	r1, [r4, #0]
 800777e:	6062      	str	r2, [r4, #4]
 8007780:	605c      	str	r4, [r3, #4]
 8007782:	e7c9      	b.n	8007718 <_free_r+0x24>
 8007784:	bd38      	pop	{r3, r4, r5, pc}
 8007786:	bf00      	nop
 8007788:	2000030c 	.word	0x2000030c

0800778c <_malloc_r>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	1ccd      	adds	r5, r1, #3
 8007790:	f025 0503 	bic.w	r5, r5, #3
 8007794:	3508      	adds	r5, #8
 8007796:	2d0c      	cmp	r5, #12
 8007798:	bf38      	it	cc
 800779a:	250c      	movcc	r5, #12
 800779c:	2d00      	cmp	r5, #0
 800779e:	4606      	mov	r6, r0
 80077a0:	db01      	blt.n	80077a6 <_malloc_r+0x1a>
 80077a2:	42a9      	cmp	r1, r5
 80077a4:	d903      	bls.n	80077ae <_malloc_r+0x22>
 80077a6:	230c      	movs	r3, #12
 80077a8:	6033      	str	r3, [r6, #0]
 80077aa:	2000      	movs	r0, #0
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
 80077ae:	f000 f917 	bl	80079e0 <__malloc_lock>
 80077b2:	4a21      	ldr	r2, [pc, #132]	; (8007838 <_malloc_r+0xac>)
 80077b4:	6814      	ldr	r4, [r2, #0]
 80077b6:	4621      	mov	r1, r4
 80077b8:	b991      	cbnz	r1, 80077e0 <_malloc_r+0x54>
 80077ba:	4c20      	ldr	r4, [pc, #128]	; (800783c <_malloc_r+0xb0>)
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	b91b      	cbnz	r3, 80077c8 <_malloc_r+0x3c>
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 f83d 	bl	8007840 <_sbrk_r>
 80077c6:	6020      	str	r0, [r4, #0]
 80077c8:	4629      	mov	r1, r5
 80077ca:	4630      	mov	r0, r6
 80077cc:	f000 f838 	bl	8007840 <_sbrk_r>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d124      	bne.n	800781e <_malloc_r+0x92>
 80077d4:	230c      	movs	r3, #12
 80077d6:	4630      	mov	r0, r6
 80077d8:	6033      	str	r3, [r6, #0]
 80077da:	f000 f902 	bl	80079e2 <__malloc_unlock>
 80077de:	e7e4      	b.n	80077aa <_malloc_r+0x1e>
 80077e0:	680b      	ldr	r3, [r1, #0]
 80077e2:	1b5b      	subs	r3, r3, r5
 80077e4:	d418      	bmi.n	8007818 <_malloc_r+0x8c>
 80077e6:	2b0b      	cmp	r3, #11
 80077e8:	d90f      	bls.n	800780a <_malloc_r+0x7e>
 80077ea:	600b      	str	r3, [r1, #0]
 80077ec:	18cc      	adds	r4, r1, r3
 80077ee:	50cd      	str	r5, [r1, r3]
 80077f0:	4630      	mov	r0, r6
 80077f2:	f000 f8f6 	bl	80079e2 <__malloc_unlock>
 80077f6:	f104 000b 	add.w	r0, r4, #11
 80077fa:	1d23      	adds	r3, r4, #4
 80077fc:	f020 0007 	bic.w	r0, r0, #7
 8007800:	1ac3      	subs	r3, r0, r3
 8007802:	d0d3      	beq.n	80077ac <_malloc_r+0x20>
 8007804:	425a      	negs	r2, r3
 8007806:	50e2      	str	r2, [r4, r3]
 8007808:	e7d0      	b.n	80077ac <_malloc_r+0x20>
 800780a:	684b      	ldr	r3, [r1, #4]
 800780c:	428c      	cmp	r4, r1
 800780e:	bf16      	itet	ne
 8007810:	6063      	strne	r3, [r4, #4]
 8007812:	6013      	streq	r3, [r2, #0]
 8007814:	460c      	movne	r4, r1
 8007816:	e7eb      	b.n	80077f0 <_malloc_r+0x64>
 8007818:	460c      	mov	r4, r1
 800781a:	6849      	ldr	r1, [r1, #4]
 800781c:	e7cc      	b.n	80077b8 <_malloc_r+0x2c>
 800781e:	1cc4      	adds	r4, r0, #3
 8007820:	f024 0403 	bic.w	r4, r4, #3
 8007824:	42a0      	cmp	r0, r4
 8007826:	d005      	beq.n	8007834 <_malloc_r+0xa8>
 8007828:	1a21      	subs	r1, r4, r0
 800782a:	4630      	mov	r0, r6
 800782c:	f000 f808 	bl	8007840 <_sbrk_r>
 8007830:	3001      	adds	r0, #1
 8007832:	d0cf      	beq.n	80077d4 <_malloc_r+0x48>
 8007834:	6025      	str	r5, [r4, #0]
 8007836:	e7db      	b.n	80077f0 <_malloc_r+0x64>
 8007838:	2000030c 	.word	0x2000030c
 800783c:	20000310 	.word	0x20000310

08007840 <_sbrk_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	2300      	movs	r3, #0
 8007844:	4c05      	ldr	r4, [pc, #20]	; (800785c <_sbrk_r+0x1c>)
 8007846:	4605      	mov	r5, r0
 8007848:	4608      	mov	r0, r1
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	f7fa ff9c 	bl	8002788 <_sbrk>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_sbrk_r+0x1a>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	b103      	cbz	r3, 800785a <_sbrk_r+0x1a>
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	200004e0 	.word	0x200004e0

08007860 <__sread>:
 8007860:	b510      	push	{r4, lr}
 8007862:	460c      	mov	r4, r1
 8007864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007868:	f000 f8bc 	bl	80079e4 <_read_r>
 800786c:	2800      	cmp	r0, #0
 800786e:	bfab      	itete	ge
 8007870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007872:	89a3      	ldrhlt	r3, [r4, #12]
 8007874:	181b      	addge	r3, r3, r0
 8007876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800787a:	bfac      	ite	ge
 800787c:	6563      	strge	r3, [r4, #84]	; 0x54
 800787e:	81a3      	strhlt	r3, [r4, #12]
 8007880:	bd10      	pop	{r4, pc}

08007882 <__swrite>:
 8007882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007886:	461f      	mov	r7, r3
 8007888:	898b      	ldrh	r3, [r1, #12]
 800788a:	4605      	mov	r5, r0
 800788c:	05db      	lsls	r3, r3, #23
 800788e:	460c      	mov	r4, r1
 8007890:	4616      	mov	r6, r2
 8007892:	d505      	bpl.n	80078a0 <__swrite+0x1e>
 8007894:	2302      	movs	r3, #2
 8007896:	2200      	movs	r2, #0
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	f000 f886 	bl	80079ac <_lseek_r>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	4632      	mov	r2, r6
 80078a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ae:	463b      	mov	r3, r7
 80078b0:	4628      	mov	r0, r5
 80078b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b6:	f000 b835 	b.w	8007924 <_write_r>

080078ba <__sseek>:
 80078ba:	b510      	push	{r4, lr}
 80078bc:	460c      	mov	r4, r1
 80078be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c2:	f000 f873 	bl	80079ac <_lseek_r>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	bf15      	itete	ne
 80078cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078d6:	81a3      	strheq	r3, [r4, #12]
 80078d8:	bf18      	it	ne
 80078da:	81a3      	strhne	r3, [r4, #12]
 80078dc:	bd10      	pop	{r4, pc}

080078de <__sclose>:
 80078de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e2:	f000 b831 	b.w	8007948 <_close_r>

080078e6 <strncmp>:
 80078e6:	b510      	push	{r4, lr}
 80078e8:	b16a      	cbz	r2, 8007906 <strncmp+0x20>
 80078ea:	3901      	subs	r1, #1
 80078ec:	1884      	adds	r4, r0, r2
 80078ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80078f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d103      	bne.n	8007902 <strncmp+0x1c>
 80078fa:	42a0      	cmp	r0, r4
 80078fc:	d001      	beq.n	8007902 <strncmp+0x1c>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f5      	bne.n	80078ee <strncmp+0x8>
 8007902:	1a98      	subs	r0, r3, r2
 8007904:	bd10      	pop	{r4, pc}
 8007906:	4610      	mov	r0, r2
 8007908:	e7fc      	b.n	8007904 <strncmp+0x1e>

0800790a <__ascii_wctomb>:
 800790a:	b149      	cbz	r1, 8007920 <__ascii_wctomb+0x16>
 800790c:	2aff      	cmp	r2, #255	; 0xff
 800790e:	bf8b      	itete	hi
 8007910:	238a      	movhi	r3, #138	; 0x8a
 8007912:	700a      	strbls	r2, [r1, #0]
 8007914:	6003      	strhi	r3, [r0, #0]
 8007916:	2001      	movls	r0, #1
 8007918:	bf88      	it	hi
 800791a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800791e:	4770      	bx	lr
 8007920:	4608      	mov	r0, r1
 8007922:	4770      	bx	lr

08007924 <_write_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4605      	mov	r5, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	2200      	movs	r2, #0
 800792e:	4c05      	ldr	r4, [pc, #20]	; (8007944 <_write_r+0x20>)
 8007930:	6022      	str	r2, [r4, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7fa fedb 	bl	80026ee <_write>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_write_r+0x1e>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	b103      	cbz	r3, 8007942 <_write_r+0x1e>
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	200004e0 	.word	0x200004e0

08007948 <_close_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	2300      	movs	r3, #0
 800794c:	4c05      	ldr	r4, [pc, #20]	; (8007964 <_close_r+0x1c>)
 800794e:	4605      	mov	r5, r0
 8007950:	4608      	mov	r0, r1
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	f7fa fee7 	bl	8002726 <_close>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_close_r+0x1a>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	b103      	cbz	r3, 8007962 <_close_r+0x1a>
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	200004e0 	.word	0x200004e0

08007968 <_fstat_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	2300      	movs	r3, #0
 800796c:	4c06      	ldr	r4, [pc, #24]	; (8007988 <_fstat_r+0x20>)
 800796e:	4605      	mov	r5, r0
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	f7fa fee1 	bl	800273c <_fstat>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	d102      	bne.n	8007984 <_fstat_r+0x1c>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	b103      	cbz	r3, 8007984 <_fstat_r+0x1c>
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	bd38      	pop	{r3, r4, r5, pc}
 8007986:	bf00      	nop
 8007988:	200004e0 	.word	0x200004e0

0800798c <_isatty_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	2300      	movs	r3, #0
 8007990:	4c05      	ldr	r4, [pc, #20]	; (80079a8 <_isatty_r+0x1c>)
 8007992:	4605      	mov	r5, r0
 8007994:	4608      	mov	r0, r1
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	f7fa fedf 	bl	800275a <_isatty>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_isatty_r+0x1a>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_isatty_r+0x1a>
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	200004e0 	.word	0x200004e0

080079ac <_lseek_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4605      	mov	r5, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	2200      	movs	r2, #0
 80079b6:	4c05      	ldr	r4, [pc, #20]	; (80079cc <_lseek_r+0x20>)
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f7fa fed7 	bl	800276e <_lseek>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_lseek_r+0x1e>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_lseek_r+0x1e>
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	200004e0 	.word	0x200004e0

080079d0 <malloc>:
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <malloc+0xc>)
 80079d2:	4601      	mov	r1, r0
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	f7ff bed9 	b.w	800778c <_malloc_r>
 80079da:	bf00      	nop
 80079dc:	20000064 	.word	0x20000064

080079e0 <__malloc_lock>:
 80079e0:	4770      	bx	lr

080079e2 <__malloc_unlock>:
 80079e2:	4770      	bx	lr

080079e4 <_read_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4605      	mov	r5, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	2200      	movs	r2, #0
 80079ee:	4c05      	ldr	r4, [pc, #20]	; (8007a04 <_read_r+0x20>)
 80079f0:	6022      	str	r2, [r4, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	f7fa fe5e 	bl	80026b4 <_read>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d102      	bne.n	8007a02 <_read_r+0x1e>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	b103      	cbz	r3, 8007a02 <_read_r+0x1e>
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	200004e0 	.word	0x200004e0

08007a08 <_init>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr

08007a14 <_fini>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr
